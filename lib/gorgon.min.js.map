{"version":3,"sources":["webpack:///gorgon.min.js","webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap b60a5a44c40cbe381143","webpack:///./src/gorgon.js","webpack:///./src/config/config.js","webpack:///./src/config/env.js","webpack:///./src/service/status/index.js","webpack:///./src/component/routes.js","webpack:///./src/service/index.js","webpack:///./src/component/network.js","webpack:///external \"http\"","webpack:///external \"socket.io\"","webpack:///external \"compression\"","webpack:///external \"express\"","webpack:///./src/component/log.js","webpack:///external \"fs\"","webpack:///external \"moment\"","webpack:///external \"os\"","webpack:///external \"sanitize-filename\""],"names":["require","install","root","factory","exports","module","define","amd","this","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_8__","__WEBPACK_EXTERNAL_MODULE_9__","__WEBPACK_EXTERNAL_MODULE_10__","__WEBPACK_EXTERNAL_MODULE_12__","__WEBPACK_EXTERNAL_MODULE_13__","__WEBPACK_EXTERNAL_MODULE_14__","__WEBPACK_EXTERNAL_MODULE_15__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_config","_env","_index","_log","global","Logger","Gorgon","GorgonConfig","log","GorgonEnv","GorgonContainerService","separator1","separator2","value","_bootstrap","console","service","forEach","add","namespace","data","version","_motd","motd","GorgonServer","initServer","name","storage","logs","load","server","cli","services","debug","enable","_interopRequireDefault","obj","__esModule","default","undefined","_index2","sid","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_routes","_network","NetworkStack","Network","StatusService","_GorgonService","_this","getPrototypeOf","config","StatusServiceConfig","description","type","https","inboundTypes","ports","router","Routes","namepsace","permissions","serviceBind","ServiceRequest","method","callback","serviceRequest","req","res","importRoutes","routes","_setNetworking","addService","removeService","GorgonService","_toConsumableArray","arr","Array","isArray","arr2","from","serviceNamespace","routeCallbacks","permissionMap","push","pos","indexOf","keyPos","splice","hasOwnProperty","inboundType","payload","_routeCallbacks","apply","concat","containers","containerMap","networking","port","warn","_http","_http2","_socket","_socket2","_compression","_compression2","_express","_express2","app","Server","use","serviceMap","components","componentMap","componentTypeMap","rest","socket","webSocket","http","api","portReservations","portReservationNamespace","activeServices","wsExpress","webSocketServer","serviceId","label","_createRestComponent","component","post","isPortReserved","listen","NetworkComponent","attr","_interopRequireWildcard","newObj","_fs","fs","_moment","_moment2","_os","os","_sanitizeFilename","_sanitizeFilename2","Log","sanitize","topicMap","subscribers","subscriberMap","level","levelKey","location","message","values","logItem","logValues","JSON","stringify","filename","created","format","logEntry","EOL","existsSync","mkdirSync","appendFile","err","error"],"mappings":"AAAAA,QAAQ,sBAAsBC,UCA9B,SAAAC,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,EAAAH,QAAA,QAAAA,QAAA,aAAAA,QAAA,eAAAA,QAAA,WAAAA,QAAA,MAAAA,QAAA,UAAAA,QAAA,MAAAA,QAAA,sBACA,kBAAAM,gBAAAC,IACAD,OAAA,6FAAAH,GACA,gBAAAC,SACAA,QAAA,OAAAD,EAAAH,QAAA,QAAAA,QAAA,aAAAA,QAAA,eAAAA,QAAA,WAAAA,QAAA,MAAAA,QAAA,UAAAA,QAAA,MAAAA,QAAA,sBAEAE,EAAA,OAAAC,EAAAD,EAAA,KAAAA,EAAA,aAAAA,EAAA,YAAAA,EAAA,QAAAA,EAAA,GAAAA,EAAA,OAAAA,EAAA,GAAAA,EAAA,uBACCM,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACD,MDCgB,UAAUC,GEP1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAf,OAGA,IAAAC,GAAAe,EAAAD,IACAf,WACAiB,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAlB,EAAAD,QAAAC,IAAAD,QAAAc,GAGAb,EAAAiB,QAAA,EAGAjB,EAAAD,QAvBA,GAAAgB,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KFiBM,SAASb,EAAQD,EAASc,GAE/B,YAwBA,SAASS,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAtBhH,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MG/CjiBkB,EAAA7B,EAAA,GACA8B,EAAA9B,EAAA,GACA+B,EAAA/B,EAAA,GACAgC,EAAAhC,EAAA,GAEAiC,QAAOC,OAAS,GAAAF,GAAAE,MHwEf,IGnEKC,GHmEQ,WG/DV,QAAAA,KACA1B,EAAAnB,KAAA6C,GAKI7C,KAAK8C,aAAe,GAAAP,GAAAO,aAMpB9C,KAAK4C,OAASD,OAAOC,OACrB5C,KAAK4C,OAAOG,IAAI,oBAAqB,IAAK,4DAM1C/C,KAAKgD,UAAY,GAAAR,GAAAQ,UAMjBhD,KAAKiD,uBAAyB,GAAAR,GAAAQ,uBAO9BjD,KAAKkD,WAAa,mDAMlBlD,KAAKmD,WAAa,mDH4HvB,MAjDA5B,GAAasB,IACXV,IAAK,aACLiB,MAAO,WGrEJpD,KAAKqD,aACLC,QAAQP,IAAI/C,KAAKmD,YACjBG,QAAQP,IAAI,oBACZO,QAAQP,IAAI/C,KAAKmD,YACjBnD,KAAK4C,OAAOG,IAAI,oBAAqB,IAAK,uCAE1C/C,KAAKgD,UAAUO,QAAQC,QAAQ,SAASJ,GACpCpD,KAAKiD,uBAAuBQ,IAAIL,EAAMG,SACtCD,QAAQP,IAAIK,EAAMM,UAAY,aAC9B1D,KAAK4C,OAAOG,IAAI,oBAAqB,IAAK,6BAA+BK,EAAMM,YAChF1D,MAEHA,KAAK4C,OAAOG,IAAI,oBAAqB,IAAK,gCHgF7CZ,IAAK,aACLiB,MAAO,WGvEJE,QAAQP,IAAI,oBAAsB/C,KAAK8C,aAAaa,KAAKC,SACzDN,QAAQP,IAAI,oDACZO,QAAQP,IAAI,6DACZ/C,KAAK6D,QACLP,QAAQP,IAAI,uCHkFfZ,IAAK,QACLiB,MAAO,WGzEJE,QAAQP,IAAI/C,KAAKkD,YACjBI,QAAQP,IAAI/C,KAAK8C,aAAaa,KAAKG,MACnCR,QAAQP,IAAI/C,KAAKkD,gBH8EfL,KGvENkB,EAAe,GAAIlB,EACvBkB,GAAaC,cHmFP,SAASnE,EAAQD,GAEtB,YAMA,SAASuB,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAJhHW,OAAOC,eAAetC,EAAS,cAC7BwD,OAAO;;;;;;;;AAqBTxD,EIvNYkD,aAKT,QAAAA,KACA3B,EAAAnB,KAAA8C,GAKI9C,KAAK2D,MACDM,KAAM,gBACNL,QAAS,kBACTE,KAAM,wDAUV9D,KAAKkE,SACDC,KAAM,SAOVnE,KAAKoE,MACDC,QAAQ,EACRC,KAAK,EACLC,UAAU,GAOdvE,KAAKwE,OACDC,QAAQ,KJyNd,SAAS5E,EAAQD,EAASc,GAE/B,YAWA,SAASgE,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAASxD,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAXhHW,OAAOC,eAAetC,EAAS,cAC3BwD,OAAO,IAEXxD,EAAQoD,UAAY8B,MK9QrB,IAAArC,GAAA/B,EAAA,GLkRKqE,EAAUL,EAAuBjC,EAgBrB7C,GK7RJoD,UAET,QAAAA,KACA7B,EAAAnB,KAAAgD,GACIhD,KAAKuD,QAAU,GAAAwB,cACf/E,KAAKuD,UAEGyB,IAAK,EACLf,KAAM,SACNP,UAAW,gBACXe,QAAQ,EACRlB,QAASvD,KAAKuD,YLgSxB,SAAS1D,EAAQD,EAASc,GAE/B,YAgBA,SAASS,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAAS2D,GAA2BC,EAAMnE,GAAQ,IAAKmE,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOpE,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BmE,EAAPnE,EAElO,QAASqE,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIhE,WAAU,iEAAoEgE,GAAeD,GAAS/C,UAAYL,OAAOsD,OAAOD,GAAcA,EAAWhD,WAAakD,aAAepC,MAAOiC,EAAUvD,YAAY,EAAOE,UAAU,EAAMD,cAAc,KAAeuD,IAAYrD,OAAOwD,eAAiBxD,OAAOwD,eAAeJ,EAAUC,GAAcD,EAASK,UAAYJ,GAlBjerD,OAAOC,eAAetC,EAAS,cAC7BwD,OAAO,GAGT,IAAI7B,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MMrTjiBsE,EAAAjF,EAAA,GACA+B,EAAA/B,EAAA,GACA6B,EAAA7B,EAAA,GACAkF,EAAAlF,EAAA,GAEImF,EAAe,GAAAD,GAAAE,QAObC,EN6Ue,SAAUC,GMzU3B,QAAAD,KACA5E,EAAAnB,KAAA+F,EAAA,IAAAE,GAAAhB,EAAAjF,KAAAiC,OAAAiE,eAAAH,GAAAhF,KAAAf,MAAA,OAOIiG,GAAKE,OAAL5D,EAAA6D,oBAMAH,EAAKhC,KAAO,iBAMZgC,EAAKvC,UAAY,gBAMjBuC,EAAKI,YAAc,0BAMnBJ,EAAKK,KAAO,UAMZL,EAAKM,OAAQ,EAMbN,EAAKO,cAAgB,OAAQ,SAAU,OAAQ,YAAa,OAM5DP,EAAKQ,OAAS,KAAM,KAAM,KAAM,KAAM,MAMtCR,EAAKS,OAAS,GAAAf,GAAAgB,OAAWV,EAAKW,WAM9BX,EAAKY,aAAe,YAKpBZ,EAAKa,cAlETb,ENodD,MA3IAb,GAAUW,EAAeC,GAoFzBzE,EAAawE,IACX5D,IAAK,SACLiB,MAAO,WMnVJ,OACI2D,gBAEIP,aAAcxG,KAAKwG,aACnBQ,OAAQ,wBACRC,SAAUjH,KAAKkH,sBN+V1B/E,IAAK,iBACLiB,MAAO,SMrVO+D,EAAKC,ON8VnBjF,IAAK,cACLiB,MAAO,WMpUJ,MAZApD,MAAK0G,OAAOW,aAAarH,KAAKsH,UAK9BtH,KAAKuH,iBAKL1B,EAAa2B,WAAWxH,OAEjB,KNuVVmC,IAAK,gBACLiB,MAAO,WMnVJyC,EAAa4B,cAAczH,KAAK0D,eNwV9BqC,GACPtD,EAAOiF,cAOT9H,cMxVcmG,ENyVdlG,EAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,GAEtB,YAQA,SAAS+H,GAAmBC,GAAO,GAAIC,MAAMC,QAAQF,GAAM,CAAE,IAAK,GAAIjG,GAAI,EAAGoG,EAAOF,MAAMD,EAAIhG,QAASD,EAAIiG,EAAIhG,OAAQD,IAAOoG,EAAKpG,GAAKiG,EAAIjG,EAAM,OAAOoG,GAAe,MAAOF,OAAMG,KAAKJ,GAE1L,QAASzG,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCARhHW,OAAOC,eAAetC,EAAS,cAC3BwD,OAAO,GAGX,IAAI7B,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAenhBzB,GO5gBD+G,OP4gBkB,WO3gB3B,QAAAA,GAAYsB,GAAkB9G,EAAAnB,KAAA2G,GAC1B3G,KAAKuD,QAAU0E,EACfjI,KAAKwG,cAAgB,OAAQ,SAAU,OAAQ,QAAS,YAAa,OACrExG,KAAKsH,UACLtH,KAAKkI,kBACLlI,KAAKmI,iBP0kBR,MAzDA5G,GAAaoF,IACTxE,IAAK,MACLiB,MAAO,SOhhBRoD,EAAcQ,EAAQC,GAEtBjH,KAAKsH,OAAOc,KAAKpB,GACjBhH,KAAKkI,eAAejB,EACpB,IAAIoB,GAAMrI,KAAKkI,eAAetG,OAAS,CAEvC4E,GAAahD,QAAQ,SAASJ,GACtBpD,KAAKwG,aAAa8B,QAAQlF,MAAapD,KAAKmI,cAAc/E,GAAOgF,KAAKC,GACrE/E,QAAQP,IAAI,uDAAyD/C,KAAKuD,QAAU,cAAgByD,EAAS,UPkhBrH7E,IAAK,SACLiB,MAAO,SO/gBL4D,GAEH,GAAIqB,GAAMrI,KAAKsH,OAAOgB,QAAQtB,EAC9B,OAAIqB,QAEArI,KAAKkI,eAAeG,GAAO,KAC3BrI,KAAKsH,OAAOe,GAAO,KAEnBrI,KAAKwG,aAAahD,QAAQ,SAASJ,GAE/B,GAAiC0B,QAA7B9E,KAAKmI,cAAc/E,IAAuBpD,KAAKmI,cAAc/E,YAAkByE,OACnF,CACI,GAAIU,GAASvI,KAAKmI,cAAc/E,GAAOkF,QAAQD,EAC3CE,OAAavI,KAAKmI,cAAc/E,GAAOoF,OAAOD,EAAQ,OAG3D,MPghBVpG,IAAK,eACLiB,MAAO,SO5gBCkE,GAET,GAAIA,YAAkBO,OAElB,IAAK,GAAI1F,KAAOmF,GACRA,EAAOmB,eAAetG,IACtBnC,KAAKyD,IAAI6D,EAAOnF,GAAP,aAA6BmF,EAAOnF,GAAP,OAAuBmF,EAAOnF,GAAP,SAIzE,QAAO,KP6gBNA,IAAK,QACLiB,MAAO,SO3gBNsF,EAAa1B,EAAQ2B,GAEvB,GAAIN,GAAMrI,KAAKsH,OAAOgB,QAAQtB,EAC9B,IAAIqB,MAEuCvD,QAAnC9E,KAAKmI,cAAcO,IAA6B1I,KAAKmI,cAAcO,GAAa9G,OAAS,GAAK5B,KAAKmI,cAAcO,GAAaJ,QAAQD,MAC1I,IAAAO,EAEI,QAAOA,EAAA5I,KAAKkI,gBAAeG,GAApBQ,MAAAD,GAAyB5B,EAAQ0B,GAAjCI,OAAAnB,EAAiDgB,KAGhE,OAAO,MP8gBHhC,MAKN,SAAS9G,EAAQD,GAEtB,YAQA,SAASuB,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCANhHW,OAAOC,eAAetC,EAAS,cAC3BwD,OAAO,GAGX,IAAI7B,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAkBngBzB,GQ1mBjBqD,uBR0mBkD,WQtmB3D,QAAAA,KAAc9B,EAAAnB,KAAAiD,GACVjD,KAAK+I,cACL/I,KAAKgJ,gBACLhJ,KAAKiE,KAAO,2BACZjE,KAAKsG,KAAO,URoqBf,MA7CA/E,GAAa0B,IACTd,IAAK,MACLiB,MAAO,SQhnBRG,GAEA,MAAyB,OAArBA,EAAQG,WAA0C,IAArBH,EAAQG,WAAmB1D,KAAKgJ,aAAaV,QAAQ/E,EAAQG,iBAE1F1D,KAAK+I,WAAWX,KAAK7E,GACrBvD,KAAKgJ,aAAaZ,KAAK7E,EAAQG,YACxB,MR2nBVvB,IAAK,SACLiB,MAAO,SQjnBL6E,GAEH,GAAIjI,KAAKgJ,aAAaV,QAAQL,MAC9B,CACI,GAAII,GAAMrI,KAAKgJ,aAAaV,QAAQL,EAGpC,OAFAjI,MAAK+I,WAAWP,OAAOH,EAAK,GAC5BrI,KAAKgJ,aAAaR,OAAOH,EAAK,IACvB,EAEX,OAAO,KR0nBNlG,IAAK,MACLiB,MAAO,SQlnBR6E,GAEA,MAAIjI,MAAKgJ,aAAaV,QAAQL,OAA+BjI,KAAK+I,WAAW/I,KAAKgJ,aAAaV,QAAQL,QRsnBnGhF,KAUSrD,EQtnBR8H,cRsnBgC,WQpnBzC,QAAAA,KACAvG,EAAAnB,KAAA0H,GACI1H,KAAKiE,KAAO,KACZjE,KAAKqG,YAAc,KACnBrG,KAAKsG,KAAO,UACZtG,KAAK0G,OAAS,KACd1G,KAAKwG,gBACLxG,KAAKyG,SACLzG,KAAK6G,eACL7G,KAAKiJ,cR4oBR,MAbA1H,GAAamG,IACTvF,IAAK,iBACLiB,MAAO,WQxnBR,GAAIpD,KAAKwG,uBAAwBqB,QAAS7H,KAAKyG,gBAAiBoB,QAAS7H,KAAKwG,aAAa5E,QAAU5B,KAAKyG,MAAM7E,OAE5G,IAAI,GAAID,GAAI,EAAGA,EAAI3B,KAAKwG,aAAa5E,OAAQD,IAEzC3B,KAAKiJ,WAAWb,MAAOnE,KAAMjE,KAAKwG,aAAa7E,GAAIuH,KAAMlJ,KAAKyG,MAAM9E,SAGxE2B,SAAQ6F,KAAK,4EAA8EnJ,KAAKiE,UR4nBhGyD,MAKN,SAAS7H,EAAQD,EAASc,GAE/B,YAyBA,SAASgE,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAASxD,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAzBhHW,OAAOC,eAAetC,EAAS,cAC3BwD,OAAO,IAEXxD,EAAQkG,QAAUhB,MAElB,IAAIvD,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MSzuBjiB+H,EAAA1I,EAAA,GT6uBK2I,EAAS3E,EAAuB0E,GS5uBrCE,EAAA5I,EAAA,GTgvBK6I,EAAW7E,EAAuB4E,GS/uBvCE,EAAA9I,EAAA,GTmvBK+I,EAAgB/E,EAAuB8E,GSlvB5CE,EAAAhJ,EAAA,ITsvBKiJ,EAAYjF,EAAuBgF,GS1vBpCtI,EAAW,KAMXwI,GAAM,EAAAD,gBACNtF,EAASgF,aAAKQ,OAAOD,EAChB,IAAAL,cAAalF,EAEtBuF,GAAIE,KAAI,EAAAL,kBT+wBP,ISvwBY3D,GTuwBElG,ESvwBFkG,QTuwBoB,WSnwB7B,QAAAA,KAEI,MADJ3E,GAAAnB,KAAA8F,GACQ1E,EAwBUA,GAtBVpB,KAAKuE,YACLvE,KAAK+J,cACL/J,KAAKgK,cACLhK,KAAKiK,gBACLjK,KAAKkK,kBACDC,QACAC,UACAC,aACAC,QACAC,QAEJvK,KAAKwK,oBACLxK,KAAKyK,4BACLzK,KAAK0K,kBACL1K,KAAK2K,WAAY,EAAAhB,gBACjB3J,KAAK4K,gBAAkBvB,aAAKQ,OAAO7J,KAAK2K,WAKxCvJ,EAAWpB,KApBXA,QTg7BP,MAzIAuB,GAAauE,IACT3D,IAAK,aACLiB,MAAO,SS1wBDG,GAEP,GAAIvD,KAAK0K,eAAepC,QAAQ/E,EAAQG,eACxC,CACI1D,KAAKuE,SAAS6D,KAAK7E,GACnBvD,KAAK+J,WAAW3B,KAAK7E,EAAQG,UAC7B,IAAImH,GAAY7K,KAAK+J,WAAWnI,OAAS,CAKzC,IAAI2B,EAAQ0F,qBAAsBpB,OAE9B,IAAI,GAAIlG,GAAE,EAAGA,EAAI4B,EAAQ0F,WAAWrH,OAAQD,IAKxC3B,KAAKyD,IAAIoH,EAAWtH,EAAQG,UAAWH,EAAQ0F,WAAWtH,GAAGsC,KAAM,QAASV,EAAQ0F,WAAWtH,GAAGuH,MAK9G,OAAO,KTgxBN/G,IAAK,gBACLiB,MAAO,SSxwBE6E,OTsxBT9F,IAAK,MACLiB,MAAO,SSxwBRyH,EAAW5C,EAAkB3B,EAAMwE,EAAO5B,GAE1C,GAAIlJ,KAAKwK,iBAAiBlC,QAAQY,QAAuB,MAARA,GAAwBpE,QAARoE,EACjE,CACI,OAAO5C,GAEH,QAEI,MADA3D,QAAOC,OAAOG,IAAI,cAAe,IAAK,qCAAuCuD,EAAO,2BAA6B2B,EAAmB,iBAAmB4C,IAChJ,CAEX,KAAK,OACD7K,KAAK+K,qBAAqBF,EAAW5C,EAAkBiB,EACvD,MACJ,KAAK,OACD,KACJ,KAAK,SACD,KACJ,KAAK,YACD,KACJ,KAAK,OAITlJ,KAAKiK,aAAa7B,KAAKH,EAAmB,IAAM3B,EAAO,IAAMwE,EAAQ,IAAM5B,GAC3E5F,QAAQP,IAAI,YACZO,QAAQP,IAAIuD,GAEZ3D,OAAOC,OAAOG,IAAI,cAAe,IAAK,4BAA8BuD,EAAO,2BAA6B2B,EAAmB,iBAAmB4C,GAElJ,OAAO,KTwwBN1I,IAAK,uBACLiB,MAAO,SStwBSyH,EAAWnH,EAAWwF,GAEvC,GAAI8B,GAAYhL,KAAK2K,UAAUM,KAAK,IAAMvH,EAAW,SAAUyD,EAAKC,GAChEpH,KAAKuE,SAASsG,GAAW3D,eAAeC,EAAKC,IAGjD,IAAIpH,KAAKkL,eAAehC,GACxB,CACI,GAAIb,GAAMrI,KAAKwK,iBAAiBlC,QAAQY,GACpCjB,EAAmBjI,KAAKyK,yBAAyBpC,EACrD,IAAIJ,GAAoBvE,EAGpB,MADAf,QAAOC,OAAOG,IAAI,cAAe,IAAK,sFAAwFW,EAAY,iBAAmBmH,EAAY,yCAA2C5C,IAC7M,EAQf,MAJA3E,SAAQP,IAAI,wBACZiI,EAAUG,OAAOjC,EAAM,WACnB5F,QAAQP,IAAI,0CAET,KTswBNZ,IAAK,uBACLiB,MAAO,eAEPjB,IAAK,yBACLiB,MAAO,eAEPjB,IAAK,4BACLiB,MAAO,eAEPjB,IAAK,sBACLiB,MAAO,eAYPjB,IAAK,SACLiB,MAAO,SS9vBL6E,EAAkB3B,EAAMwE,OTwwB1B3I,IAAK,iBACLiB,MAAO,SS9vBG8F,GAEX,MAAOlJ,MAAKwK,iBAAiBlC,QAAQY,UTiwBjCpD,KSpuBRD,GTuuBoB,WS9vBpB,QAAAuF,GAAY9E,EAAMwE,EAAO5B,EAAM3F,GAC/BpC,EAAAnB,KAAAoL,GACIpL,KAAKsG,KAAOA,EACZtG,KAAK8K,MAAQA,EACb9K,KAAKkJ,KAAOA,EACZlJ,KAAKuD,QAAUA,EACfvD,KAAKqL,QT+wBR,MAZA9J,GAAa6J,IACTjJ,IAAK,eACLiB,MAAO,SSlwBCa,EAAMb,GAEfpD,KAAKqL,KAAKpH,GAAQb,KTowBjBjB,IAAK,kBACLiB,MAAO,SSlwBIa,SAELjE,MAAKqL,KAAKpH,OTqwBbmH,KS9vBO,GAAItF,GTuwBtBlG,cStwBciG,GT0wBT,SAAShG,EAAQD,GU1/BvBC,EAAAD,QAAAJ,QAAA,SVggCM,SAASK,EAAQD,GWhgCvBC,EAAAD,QAAAJ,QAAA,cXsgCM,SAASK,EAAQD,GYtgCvBC,EAAAD,QAAAJ,QAAA,gBZ4gCM,SAASK,EAAQD,Ga5gCvBC,EAAAD,QAAAJ,QAAA,YbkhCM,SAASK,EAAQD,EAASc,GAE/B,YAuCA,SAASgE,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS2G,GAAwB3G,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAI4G,KAAa,IAAW,MAAP5G,EAAe,IAAK,GAAIxC,KAAOwC,GAAW1C,OAAOK,UAAUmG,eAAe1H,KAAK4D,EAAKxC,KAAMoJ,EAAOpJ,GAAOwC,EAAIxC,GAAgC,OAAtBoJ,cAAiB5G,EAAY4G,EAElQ,QAASpK,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAzChHW,OAAOC,eAAetC,EAAS,cAC3BwD,OAAO,IAEXxD,EAAQgD,OAASkC,MAEjB,IAAIvD,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,Mc/gCjiBmK,EAAA9K,EAAA,IAAY+K,Ed+hCFH,EAAwBE,Gc9hClCE,EAAAhL,EAAA,IdkiCKiL,EAAWjH,EAAuBgH,GcjiCvCE,EAAAlL,EAAA,IAAYmL,EdqiCFP,EAAwBM,GcpiClCrJ,EAAA7B,EAAA,GACAoL,EAAApL,EAAA,IdyiCKqL,EAAqBrH,EAAuBoH,Gcj+B3CE,Gd4+BQpM,Ec/iCDgD,Od+iCkB,Wc3iC3B,QAAAA,KACAzB,EAAAnB,KAAA4C,GACI5C,KAAKyL,GAAKA,EACVzL,KAAK8C,aAAe,GAAAP,GAAAO,aACpB9C,KAAKiM,SAALF,aACA/L,KAAKkM,YACLlM,KAAKmM,eACLnM,KAAKoM,iBACLpM,KAAKqM,OAAS,QAAS,OAAQ,OAAQ,QAAS,WAAY,SAC5DrM,KAAKsM,UAAY,IAAK,IAAK,IAAK,IAAK,IAAK,KdomC7C,MArCA/K,GAAaqB,IACTT,IAAK,MACLiB,MAAO,ScpjCRmJ,EAAUF,EAAOG,EAASC,EAAQnG,GAElC,GAAIoG,GAAU,GAAIV,GAAIO,EAAUF,EAAOG,EAASC,EAAQnG,GACpDqG,EAA8B,MAAlBD,EAAQD,QAAoC3H,QAAlB4H,EAAQD,OAAsB,KAAOG,KAAKC,UAAUH,EAAQD,QAClGK,EAAWJ,EAAQK,QAAQC,OAAO,YAAc,MAEpD,QAAON,EAAQpG,MAEX,QACIwG,EAAW9M,KAAKiM,SAASS,EAAQpG,MAAQ,IAAMwG,CAC/C,MACJ,KAAKhI,QACL,KAAK,EACL,IAAK,MACDgI,EAAW,OAASA,CACpB,MACJ,KAAK,QACDA,EAAW,SAAWA,EAI9B,GAAIG,GAAWP,EAAQK,QAAQC,SAAW,IAAMN,EAAQL,MAAQ,IAAMK,EAAQH,SAAW,aAAeG,EAAQF,QAAU,aAAoBG,EAAY,IAAMd,EAAGqB,GAanK,OAXKlN,MAAKyL,GAAG0B,WAAWnN,KAAK8C,aAAaoB,QAAQC,OAC9CsH,EAAG2B,UAAUpN,KAAK8C,aAAaoB,QAAQC,MAG3CnE,KAAKyL,GAAG4B,WAAWrN,KAAK8C,aAAaoB,QAAQC,KAAO2I,EAAUG,EAAU,OAAS,SAAUK,GAEvF,GAAIA,EAEA,MADAhK,SAAQiK,MAAMD,IACP,KAGR,MdqjCH1K,KcpiCR,QAAAoJ,GAAYO,EAAUF,EAAOG,EAASC,EAAQnG,GAC9CnF,EAAAnB,KAAAgM,GACIhM,KAAKuM,SAAWA,EAChBvM,KAAKqM,MAAiB,MAATA,GAA0BvH,QAATuH,EAAqB,IAAMA,EACzDrM,KAAKwM,QAAUA,EACfxM,KAAKsG,KAAe,MAARA,GAAwBxB,QAARwB,EAAoB,MAAQA,EACxDtG,KAAKyM,OAAmB,MAAVA,GAA4B3H,QAAV2H,EAAsB,KAAOA,EAC7DzM,KAAK+M,SAAU,EAAApB,mBd4jCjB,SAAS9L,EAAQD,GerqCvBC,EAAAD,QAAAJ,QAAA,Of2qCM,SAASK,EAAQD,GgB3qCvBC,EAAAD,QAAAJ,QAAA,WhBirCM,SAASK,EAAQD,GiBjrCvBC,EAAAD,QAAAJ,QAAA,OjBurCM,SAASK,EAAQD,GkBvrCvBC,EAAAD,QAAAJ,QAAA","file":"gorgon.min.js","sourcesContent":["require(\"source-map-support\").install();\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"moment\"), require(\"os\"), require(\"sanitize-filename\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gorgon\", [\"http\", \"socket.io\", \"compression\", \"express\", \"fs\", \"moment\", \"os\", \"sanitize-filename\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gorgon\"] = factory(require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"moment\"), require(\"os\"), require(\"sanitize-filename\"));\n\telse\n\t\troot[\"gorgon\"] = factory(root[\"http\"], root[\"socket.io\"], root[\"compression\"], root[\"express\"], root[\"fs\"], root[\"moment\"], root[\"os\"], root[\"sanitize-filename\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n\torgon the scripting capable network server for Node JS\r\n\tr\n\tpackage Gorgon\r\n\tauthor Ryan Rentfro\r\n\tlicense MIT\r\n\turl https://github.com/manufacturing-industry\r\n\tn\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _env = __webpack_require__(2);\n\t\n\tvar _index = __webpack_require__(5);\n\t\n\tvar _log = __webpack_require__(11);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tglobal.Logger = new _log.Logger();\n\t\n\t/**\r\n\t * The Gorgon class\r\n\t */\n\t\n\tvar Gorgon = function () {\n\t  /**\r\n\t   * Constructs the class\r\n\t   */\n\t  function Gorgon() {\n\t    _classCallCheck(this, Gorgon);\n\t\n\t    /**\r\n\t     * The gorgon config for the server\r\n\t     * @type {GorgonConfig}\r\n\t     */\n\t    this.GorgonConfig = new _config.GorgonConfig();\n\t\n\t    /**\r\n\t     * The gorgon server logger\r\n\t     * @type {Logger}\r\n\t     */\n\t    this.Logger = global.Logger;\n\t    this.Logger.log('Gorgon:initServer', 200, 'The Gorgon has been summoned - GORGON SERVER STARTING...');\n\t\n\t    /**\r\n\t     * The gorgon environment for the server\r\n\t     * @type {GorgonEnv}\r\n\t     */\n\t    this.GorgonEnv = new _env.GorgonEnv();\n\t\n\t    /**\r\n\t     * The container service\r\n\t     * @type {GorgonContainerService}\r\n\t     */\n\t    this.GorgonContainerService = new _index.GorgonContainerService();\n\t\n\t    /**\r\n\t     * The first style of CLI separator\r\n\t     * @type {string}\r\n\t     */\n\t    this.separator1 = '================================================';\n\t\n\t    /**\r\n\t     * The second style of CLI separator\r\n\t     * @type {string}\r\n\t     */\n\t    this.separator2 = '------------------------------------------------';\n\t  }\n\t\n\t  /**\r\n\t   * Initializes the server and loads the configured services from the environment\r\n\t   */\n\t\n\t\n\t  _createClass(Gorgon, [{\n\t    key: \"initServer\",\n\t    value: function initServer() {\n\t      this._bootstrap();\n\t      console.log(this.separator2);\n\t      console.log('Loading Services');\n\t      console.log(this.separator2);\n\t      this.Logger.log('Gorgon:initServer', 200, 'The server was started successfully');\n\t\n\t      this.GorgonEnv.service.forEach(function (value) {\n\t        this.GorgonContainerService.add(value.service);\n\t        console.log(value.namespace + ' - [ Ok ]');\n\t        this.Logger.log('Gorgon:initServer', 200, 'Loaded service namespace: ' + value.namespace);\n\t      }, this);\n\t\n\t      this.Logger.log('Gorgon:initServer', 200, 'Service Loading Completed');\n\t    }\n\t\n\t    /**\r\n\t     * The CLI server bootstrap\r\n\t     *\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: \"_bootstrap\",\n\t    value: function _bootstrap() {\n\t      console.log('Gorgon Server - v' + this.GorgonConfig.data.version);\n\t      console.log('Author: Ryan Rentfro <rrentfro at gmail dot com>');\n\t      console.log('Project: https://github.com/manufacturing-industry/gorgon');\n\t      this._motd();\n\t      console.log('Press cntrl+c to exit the server');\n\t    }\n\t\n\t    /**\r\n\t     * The server message of the day display\r\n\t     *\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: \"_motd\",\n\t    value: function _motd() {\n\t      console.log(this.separator1);\n\t      console.log(this.GorgonConfig.data.motd);\n\t      console.log(this.separator1);\n\t    }\n\t  }]);\n\t\n\t  return Gorgon;\n\t}();\n\t\n\t/*\r\n\t * Run the Gorgon Server\r\n\t */\n\t\n\t\n\tvar GorgonServer = new Gorgon();\n\tGorgonServer.initServer();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\t/**\r\n\t * The Gorgon config class\r\n\t */\n\tvar GorgonConfig =\n\t/**\r\n\t * Constructs the class\r\n\t */\n\texports.GorgonConfig = function GorgonConfig() {\n\t  _classCallCheck(this, GorgonConfig);\n\t\n\t  /**\r\n\t   * The servers default config data\r\n\t   * @type {{name: string, version: string}}\r\n\t   */\n\t  this.data = {\n\t    name: 'Gorgon Server',\n\t    version: '0.0.1 Pre-Alpha',\n\t    motd: 'This is the message of the day for the Gorgon Server'\n\t  };\n\t\n\t  /**\r\n\t   * The servers default storage config\r\n\t   *\r\n\t   * @note Contains the path pointers for base storage components\r\n\t   *\r\n\t   * @type {{logs: string}}\r\n\t   */\n\t  this.storage = {\n\t    logs: 'logs/'\n\t  };\n\t\n\t  /**\r\n\t   * The servers default layers controls\r\n\t   * @type {{server: boolean, cli: boolean, services: boolean}}\r\n\t   */\n\t  this.load = {\n\t    server: true,\n\t    cli: true,\n\t    services: true\n\t  };\n\t\n\t  /**\r\n\t   * Controls debugging\r\n\t   * @type {{enable: boolean}}\r\n\t   */\n\t  this.debug = {\n\t    enable: true\n\t  };\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.GorgonEnv = undefined;\n\t\n\tvar _index = __webpack_require__(3);\n\t\n\tvar _index2 = _interopRequireDefault(_index);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\r\n\t                                                                                                                                                           * Gorgon the scripting capable network server for Node JS\r\n\t                                                                                                                                                           *\r\n\t                                                                                                                                                           * @package Gorgon\r\n\t                                                                                                                                                           * @author Ryan Rentfro\r\n\t                                                                                                                                                           * @license MIT\r\n\t                                                                                                                                                           * @url https://github.com/manufacturing-industry\r\n\t                                                                                                                                                           */\n\t\n\t/**\r\n\t * The Gorgon env class\r\n\t */\n\tvar GorgonEnv = exports.GorgonEnv = function GorgonEnv() {\n\t    _classCallCheck(this, GorgonEnv);\n\t\n\t    this.service = new _index2.default();\n\t    this.service = [{\n\t        sid: 0,\n\t        name: 'Status',\n\t        namespace: 'StatusService',\n\t        enable: true,\n\t        service: this.service }];\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _routes = __webpack_require__(4);\n\t\n\tvar _index = __webpack_require__(5);\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _network = __webpack_require__(6);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Gorgon the scripting capable network server for Node JS\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @package Gorgon\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Ryan Rentfro\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license MIT\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @url https://github.com/manufacturing-industry\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar NetworkStack = new _network.Network();\n\t\n\t/**\r\n\t * The status service\r\n\t *\r\n\t * @note Provides status on server configuration\r\n\t */\n\t\n\tvar StatusService = function (_GorgonService) {\n\t  _inherits(StatusService, _GorgonService);\n\t\n\t  /**\r\n\t   * Constructs the class\r\n\t   */\n\t  function StatusService() {\n\t    _classCallCheck(this, StatusService);\n\t\n\t    /**\r\n\t     * The status service configuration\r\n\t     * @type {StatusServiceConfig}\r\n\t     */\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StatusService).call(this));\n\t\n\t    _this.config = _config.StatusServiceConfig;\n\t\n\t    /**\r\n\t     * The service name\r\n\t     * @type {string}\r\n\t     */\n\t    _this.name = 'Status Service';\n\t\n\t    /**\r\n\t     * The service namespace\r\n\t     * @type {string}\r\n\t     */\n\t    _this.namespace = 'StatusService';\n\t\n\t    /**\r\n\t     * The service description\r\n\t     * @type {string}\r\n\t     */\n\t    _this.description = 'Provides service status';\n\t\n\t    /**\r\n\t     * The service type\r\n\t     * @type {string}\r\n\t     */\n\t    _this.type = 'Service';\n\t\n\t    /**\r\n\t     * The service https control - controls how https works for the services exposed http endpoints\r\n\t     * @type {string|boolean} Can be enable, disable, true, false, or enforce\r\n\t     */\n\t    _this.https = true;\n\t\n\t    /**\r\n\t     * The inbound types supported by the service\r\n\t     * @type {string[]}\r\n\t     */\n\t    _this.inboundTypes = ['rest', 'socket', 'http', 'webSocket', 'api'];\n\t\n\t    /**\r\n\t     * The ports that map to the inbound types 1:1\r\n\t     * @type {number|null[]}\r\n\t     */\n\t    _this.ports = [2600, null, 2680, 2688, null];\n\t\n\t    /**\r\n\t     * The router for the service\r\n\t     * @type {Routes}\r\n\t     */\n\t    _this.router = new _routes.Routes(_this.namepsace);\n\t\n\t    /**\r\n\t     * The permissions for the service\r\n\t     * @type {string[]} Can be internal and/or external\r\n\t     */\n\t    _this.permissions = ['internal'];\n\t\n\t    /**\r\n\t     * Binds the services routes and networking\r\n\t     */\n\t    _this.serviceBind();\n\t    return _this;\n\t  }\n\t\n\t  /**\r\n\t   * The routes configuration for the service\r\n\t   *\r\n\t   * @note This is loaded into the classes router and the network stack\r\n\t   */\n\t\n\t\n\t  _createClass(StatusService, [{\n\t    key: 'routes',\n\t    value: function routes() {\n\t      return {\n\t        'ServiceRequest': {\n\t          inboundTypes: this.inboundTypes,\n\t          method: '/StatusServiceRequest',\n\t          callback: this.serviceRequest()\n\t        }\n\t      };\n\t    }\n\t\n\t    /**\r\n\t     * The service request method\r\n\t     *\r\n\t     * @note Provides the service request for the server\r\n\t     */\n\t\n\t  }, {\n\t    key: 'serviceRequest',\n\t    value: function serviceRequest(req, res) {}\n\t\n\t    /**\r\n\t     * Binds the services routes and networking components\r\n\t     *\r\n\t     * @return {boolean} Returns true on completion\r\n\t     */\n\t\n\t  }, {\n\t    key: 'serviceBind',\n\t    value: function serviceBind() {\n\t      /*\r\n\t       * Imports the routers routes from the class\r\n\t       */\n\t      this.router.importRoutes(this.routes());\n\t\n\t      /*\r\n\t       * Set the networking configuration for the class\r\n\t       */\n\t      this._setNetworking();\n\t\n\t      /*\r\n\t       * Add the service to the network\r\n\t       */\n\t      NetworkStack.addService(this);\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'serviceUnbind',\n\t    value: function serviceUnbind() {\n\t      NetworkStack.removeService(this.namespace);\n\t    }\n\t  }]);\n\t\n\t  return StatusService;\n\t}(_index.GorgonService);\n\t\n\t/*\r\n\t * Exports\r\n\t */\n\t\n\t\n\texports.default = StatusService;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\tvar Routes = exports.Routes = function () {\n\t    function Routes(serviceNamespace) {\n\t        _classCallCheck(this, Routes);\n\t\n\t        this.service = serviceNamespace;\n\t        this.inboundTypes = ['rest', 'socket', 'http', 'https', 'webSocket', 'api'];\n\t        this.routes = [];\n\t        this.routeCallbacks = [];\n\t        this.permissionMap = [];\n\t    }\n\t\n\t    _createClass(Routes, [{\n\t        key: 'add',\n\t        value: function add(inboundTypes, method, callback) {\n\t            this.routes.push(method);\n\t            this.routeCallbacks(callback);\n\t            var pos = this.routeCallbacks.length - 1;\n\t\n\t            inboundTypes.forEach(function (value) {\n\t                if (this.inboundTypes.indexOf(value) > -1) this.permissionMap[value].push(pos);else console.log('ERROR - Invalid Permission Encountered in Service: [' + this.service + '] Method: [' + method + ']');\n\t            });\n\t        }\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(method) {\n\t            var pos = this.routes.indexOf(method);\n\t            if (pos > -1) {\n\t                this.routeCallbacks[pos] = null;\n\t                this.routes[pos] = null;\n\t\n\t                this.inboundTypes.forEach(function (value) {\n\t                    if (this.permissionMap[value] != undefined && this.permissionMap[value] instanceof Array) {\n\t                        var keyPos = this.permissionMap[value].indexOf(pos);\n\t                        if (keyPos > -1) this.permissionMap[value].splice(keyPos, 1);\n\t                    }\n\t                });\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'importRoutes',\n\t        value: function importRoutes(routes) {\n\t            if (routes instanceof Array) {\n\t                for (var key in routes) {\n\t                    if (routes.hasOwnProperty(key)) {\n\t                        this.add(routes[key]['inboundTypes'], routes[key]['method'], routes[key]['callback']);\n\t                    }\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'route',\n\t        value: function route(inboundType, method, payload) {\n\t            var pos = this.routes.indexOf(method);\n\t            if (pos > -1) {\n\t                if (this.permissionMap[inboundType] != undefined && this.permissionMap[inboundType].length > 0 && this.permissionMap[inboundType].indexOf(pos) > -1) {\n\t                    var _routeCallbacks;\n\t\n\t                    //callback exists for method\n\t                    return (_routeCallbacks = this.routeCallbacks)[pos].apply(_routeCallbacks, [method, inboundType].concat(_toConsumableArray(payload)));\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    }]);\n\n\t    return Routes;\n\t}();\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\t/**\r\n\t * The Gorgon Container Service Class\r\n\t *\r\n\t * @note This class provides containers for services\r\n\t */\n\tvar GorgonContainerService = exports.GorgonContainerService = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function GorgonContainerService() {\n\t        _classCallCheck(this, GorgonContainerService);\n\t\n\t        this.containers = [];\n\t        this.containerMap = [];\n\t        this.name = \"Gorgon Container Service\";\n\t        this.type = \"Service\";\n\t    }\n\t\n\t    /**\r\n\t     * Adds a new service by creating a container and injecting the service and its location to the service map\r\n\t     *\r\n\t     * @param {object} service The service to tbe added\r\n\t     * @returns {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(GorgonContainerService, [{\n\t        key: \"add\",\n\t        value: function add(service) {\n\t            if (service.namespace != null && service.namespace != '' && this.containerMap.indexOf(service.namespace) == -1) {\n\t                this.containers.push(service);\n\t                this.containerMap.push(service.namespace);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Removes a service container by the service namespace\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace to be removed\r\n\t         * @returns {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: \"remove\",\n\t        value: function remove(serviceNamespace) {\n\t            if (this.containerMap.indexOf(serviceNamespace) > -1) {\n\t                var pos = this.containerMap.indexOf(serviceNamespace);\n\t                this.containers.splice(pos, 1);\n\t                this.containerMap.splice(pos, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Retrieves a service container by its namespace\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace\r\n\t         * @returns {*} Returns the service when located or false when not located\r\n\t         */\n\t\n\t    }, {\n\t        key: \"get\",\n\t        value: function get(serviceNamespace) {\n\t            if (this.containerMap.indexOf(serviceNamespace) > -1) return this.containers[this.containerMap.indexOf(serviceNamespace)];\n\t            return false;\n\t        }\n\t    }]);\n\t\n\t    return GorgonContainerService;\n\t}();\n\t\n\t/**\r\n\t * The gorgon service object\r\n\t *\r\n\t * @note Provides the service, default properties/methods used for constructing containers\r\n\t */\n\t\n\t\n\tvar GorgonService = exports.GorgonService = function () {\n\t    function GorgonService() {\n\t        _classCallCheck(this, GorgonService);\n\t\n\t        this.name = null;\n\t        this.description = null;\n\t        this.type = 'Service';\n\t        this.router = null;\n\t        this.inboundTypes = [];\n\t        this.ports = [];\n\t        this.permissions = [];\n\t        this.networking = [];\n\t    }\n\t\n\t    /**\r\n\t     * Updates the networking property via the\r\n\t     * @private\r\n\t     */\n\t\n\t\n\t    _createClass(GorgonService, [{\n\t        key: \"_setNetworking\",\n\t        value: function _setNetworking() {\n\t            if (this.inboundTypes instanceof Array && this.ports instanceof Array && this.inboundTypes.length == this.ports.length) {\n\t                for (var i = 0; i < this.inboundTypes.length; i++) {\n\t                    this.networking.push({ name: this.inboundTypes[i], port: this.ports[i] });\n\t                }\n\t            } else {\n\t                console.warn('GorgonService:_setNetworking - Missing or invalid networking for service ' + this.name);\n\t            }\n\t        }\n\t    }]);\n\n\t    return GorgonService;\n\t}();\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Network = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _http = __webpack_require__(7);\n\t\n\tvar _http2 = _interopRequireDefault(_http);\n\t\n\tvar _socket = __webpack_require__(8);\n\t\n\tvar _socket2 = _interopRequireDefault(_socket);\n\t\n\tvar _compression = __webpack_require__(9);\n\t\n\tvar _compression2 = _interopRequireDefault(_compression);\n\t\n\tvar _express = __webpack_require__(10);\n\t\n\tvar _express2 = _interopRequireDefault(_express);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\tvar instance = null;\n\t\n\t\n\tvar app = (0, _express2.default)();\n\tvar server = _http2.default.Server(app);\n\tvar io = new _socket2.default(server);\n\t\n\tapp.use((0, _compression2.default)({}));\n\t//app.use(express['static'](__dirname + '/../client'));\n\t\n\t/**\r\n\t * The network controls singleton class\r\n\t *\r\n\t * @note Creates and maps the network components for services\r\n\t */\n\t\n\tvar Network = exports.Network = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function Network() {\n\t        _classCallCheck(this, Network);\n\t\n\t        if (!instance) {\n\t            this.services = [];\n\t            this.serviceMap = [];\n\t            this.components = [];\n\t            this.componentMap = [];\n\t            this.componentTypeMap = {\n\t                rest: [],\n\t                socket: [],\n\t                webSocket: [],\n\t                http: [],\n\t                api: []\n\t            };\n\t            this.portReservations = [];\n\t            this.portReservationNamespace = [];\n\t            this.activeServices = [];\n\t            this.wsExpress = (0, _express2.default)();\n\t            this.webSocketServer = _http2.default.Server(this.wsExpress);\n\t\n\t            //Configures compression for the http stack\n\t            //this.baseComponent.express.use(compression({}));\n\t\n\t            instance = this;\n\t        } else return instance;\n\t    }\n\t\n\t    /**\r\n\t     * Adds a service to the network layer\r\n\t     *\r\n\t     * @param {object} service The service to be added\r\n\t     * @return {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(Network, [{\n\t        key: 'addService',\n\t        value: function addService(service) {\n\t            if (this.activeServices.indexOf(service.namespace) == -1) {\n\t                this.services.push(service);\n\t                this.serviceMap.push(service.namespace);\n\t                var serviceId = this.serviceMap.length - 1;\n\t\n\t                /*\r\n\t                 * Add networking components\r\n\t                 */\n\t                if (service.networking instanceof Array) {\n\t                    for (var i = 0; i < service.networking.length; i++) {\n\t                        /**\r\n\t                         * @todo RESUME HERE\r\n\t                         */\n\t                        this.add(serviceId, service.namespace, service.networking[i].name, 'label', service.networking[i].port);\n\t                    }\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Removes the services network components\r\n\t         *\r\n\t         * @param {string} serviceNamespace The namespace of the service to be removed\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: 'removeService',\n\t        value: function removeService(serviceNamespace) {}\n\t\n\t        /**\r\n\t         * Adds a service network component\r\n\t         *\r\n\t         * @param {number} serviceId The serviceId for the service\r\n\t         * @param {string} serviceNamespace The service namespace for the component\r\n\t         * @param {string} type The network component type\r\n\t         * @param {string} label The label for the component\r\n\t         * @param {string|null} port The optional port for the network component\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: 'add',\n\t        value: function add(serviceId, serviceNamespace, type, label, port) {\n\t            if (this.portReservations.indexOf(port) == -1 || port == null || port == undefined) {\n\t                switch (type) {\n\t                    default:\n\t                        global.Logger.log('Network:add', 400, 'Unable to load component type of: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\n\t                        return false;\n\t                        break;\n\t                    case 'rest':\n\t                        this._createRestComponent(serviceId, serviceNamespace, port);\n\t                        break;\n\t                    case 'http':\n\t                        break;\n\t                    case 'socket':\n\t                        break;\n\t                    case 'webSocket':\n\t                        break;\n\t                    case 'api':\n\t                        break;\n\t                }\n\t\n\t                this.componentMap.push(serviceNamespace + '-' + type + '-' + label + '-' + port);\n\t                console.log('loadType');\n\t                console.log(type);\n\t                //this.componentTypeMap[type].push(serviceNamespace + '-' + type + '-' + label + '-' + port);\n\t                global.Logger.log('Network:add', 200, 'Added network component: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: '_createRestComponent',\n\t        value: function _createRestComponent(serviceId, namespace, port) {\n\t            var component = this.wsExpress.post('/' + namespace, function (req, res) {\n\t                this.services[serviceId].serviceRequest(req, res);\n\t            });\n\t\n\t            if (this.isPortReserved(port)) {\n\t                var pos = this.portReservations.indexOf(port);\n\t                var serviceNamespace = this.portReservationNamespace[pos];\n\t                if (serviceNamespace != namespace) {\n\t                    global.Logger.log('Network:add', 400, 'Unable to create component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace);\n\t                    return false;\n\t                }\n\t            }\n\t\n\t            console.log('component port mount');\n\t            component.listen(port, function () {\n\t                console.log('Example app listening on port 3000!');\n\t            });\n\t            return true;\n\t        }\n\t    }, {\n\t        key: '_createHttpComponent',\n\t        value: function _createHttpComponent() {}\n\t    }, {\n\t        key: '_createSocketComponent',\n\t        value: function _createSocketComponent() {}\n\t    }, {\n\t        key: '_createWebSocketComponent',\n\t        value: function _createWebSocketComponent() {}\n\t    }, {\n\t        key: '_createApiComponent',\n\t        value: function _createApiComponent() {}\n\t\n\t        /**\r\n\t         * Removes a service network component\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace for the component\r\n\t         * @param {string} type The network component type\r\n\t         * @param {string} label The label for the component\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(serviceNamespace, type, label) {}\n\t\n\t        /**\r\n\t         * Checks if the port is reserved\r\n\t         *\r\n\t         * @param {number} port The port number\r\n\t         * @returns {boolean} Returns true if the port is reserved false if it is not\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isPortReserved',\n\t        value: function isPortReserved(port) {\n\t            return this.portReservations.indexOf(port) > -1;\n\t        }\n\t    }]);\n\t\n\t    return Network;\n\t}();\n\t\n\tvar NetworkComponent = function () {\n\t    function NetworkComponent(type, label, port, service) {\n\t        _classCallCheck(this, NetworkComponent);\n\t\n\t        this.type = type;\n\t        this.label = label;\n\t        this.port = port;\n\t        this.service = service;\n\t        this.attr = {};\n\t    }\n\t\n\t    _createClass(NetworkComponent, [{\n\t        key: 'addAttribute',\n\t        value: function addAttribute(name, value) {\n\t            this.attr[name] = value;\n\t        }\n\t    }, {\n\t        key: 'removeAttribute',\n\t        value: function removeAttribute(name) {\n\t            delete this.attr[name];\n\t        }\n\t    }]);\n\t\n\t    return NetworkComponent;\n\t}();\n\t\n\t/*\r\n\t * Exports\r\n\t */\n\t\n\t\n\tvar NetworkStack = new Network();\n\texports.default = NetworkStack;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"http\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"socket.io\");\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"compression\");\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express\");\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Logger = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n\torgon the scripting capable network server for Node JS\r\n\tr\n\tpackage Gorgon\r\n\tauthor Ryan Rentfro\r\n\tlicense MIT\r\n\turl https://github.com/manufacturing-industry\r\n\tn\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar _fs = __webpack_require__(12);\n\t\n\tvar fs = _interopRequireWildcard(_fs);\n\t\n\tvar _moment = __webpack_require__(13);\n\t\n\tvar _moment2 = _interopRequireDefault(_moment);\n\t\n\tvar _os = __webpack_require__(14);\n\t\n\tvar os = _interopRequireWildcard(_os);\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _sanitizeFilename = __webpack_require__(15);\n\t\n\tvar _sanitizeFilename2 = _interopRequireDefault(_sanitizeFilename);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * The server logging class\r\n\t */\n\tvar Logger = exports.Logger = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function Logger() {\n\t        _classCallCheck(this, Logger);\n\t\n\t        this.fs = fs;\n\t        this.GorgonConfig = new _config.GorgonConfig();\n\t        this.sanitize = _sanitizeFilename2.default;\n\t        this.topicMap = [];\n\t        this.subscribers = [];\n\t        this.subscriberMap = [];\n\t        this.level = ['Debug', 'Info', 'Warn', 'Error', 'Critical', 'Fatal'];\n\t        this.levelKey = [100, 200, 300, 400, 500, 600];\n\t    }\n\t\n\t    /**\r\n\t     * Creates a new log and writes it to the corresponding file\r\n\t     *\r\n\t     * @param {string} location The location the log originated from\r\n\t     * @param {number} level The level of the log (from levelKey)\r\n\t     * @param {string} message The message for the log\r\n\t     * @param {*} values The values to include with the log\r\n\t     * @param {string} type The type for the log\r\n\t     * @return {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(Logger, [{\n\t        key: 'log',\n\t        value: function log(location, level, message, values, type) {\n\t            var logItem = new Log(location, level, message, values, type);\n\t            var logValues = logItem.values == null || logItem.values == undefined ? null : JSON.stringify(logItem.values);\n\t            var filename = logItem.created.format('YYYYMMDD') + '.log';\n\t\n\t            switch (logItem.type) {\n\t                default:\n\t                    filename = this.sanitize(logItem.type) + '-' + filename;\n\t                    break;\n\t                case undefined:\n\t                case true:\n\t                case 'sys':\n\t                    filename = 'sys-' + filename;\n\t                    break;\n\t                case 'error':\n\t                    filename = 'error-' + filename;\n\t                    break;\n\t            }\n\t\n\t            var logEntry = logItem.created.format() + ' ' + logItem.level + ' ' + logItem.location + ' [message=' + logItem.message + ']' + ' [values=' + logValues + ']' + os.EOL;\n\t\n\t            if (!this.fs.existsSync(this.GorgonConfig.storage.logs)) {\n\t                fs.mkdirSync(this.GorgonConfig.storage.logs);\n\t            }\n\t\n\t            this.fs.appendFile(this.GorgonConfig.storage.logs + filename, logEntry, 'utf8', function (err) {\n\t                if (err) {\n\t                    console.error(err);\n\t                    return false;\n\t                }\n\t            });\n\t            return true;\n\t        }\n\t    }]);\n\t\n\t    return Logger;\n\t}();\n\t\n\t/**\r\n\t * The server log class\r\n\t */\n\t\n\t\n\tvar Log =\n\t/**\r\n\t * Constructs the class\r\n\t *\r\n\t * @param {string} location The location the log originated from\r\n\t * @param {number} level The level of the log (from levelKey)\r\n\t * @param {string} message The message for the log\r\n\t * @param {*} values The values to include with the log\r\n\t * @param {string} type The type for the log\r\n\t */\n\tfunction Log(location, level, message, values, type) {\n\t    _classCallCheck(this, Log);\n\t\n\t    this.location = location;\n\t    this.level = level == null || level == undefined ? 100 : level;\n\t    this.message = message;\n\t    this.type = type == null || type == undefined ? 'sys' : type;\n\t    this.values = values == null || values == undefined ? null : values;\n\t    this.created = (0, _moment2.default)();\n\t};\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"fs\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"moment\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"os\");\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"sanitize-filename\");\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** gorgon.min.js\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"moment\"), require(\"os\"), require(\"sanitize-filename\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gorgon\", [\"http\", \"socket.io\", \"compression\", \"express\", \"fs\", \"moment\", \"os\", \"sanitize-filename\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gorgon\"] = factory(require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"moment\"), require(\"os\"), require(\"sanitize-filename\"));\n\telse\n\t\troot[\"gorgon\"] = factory(root[\"http\"], root[\"socket.io\"], root[\"compression\"], root[\"express\"], root[\"fs\"], root[\"moment\"], root[\"os\"], root[\"sanitize-filename\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b60a5a44c40cbe381143\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport {GorgonConfig} from \"config/config\";\r\nimport {GorgonEnv} from \"config/env\";\r\nimport {GorgonContainerService} from 'service/index';\r\nimport {Logger} from 'component/log'\r\n\r\nglobal.Logger = new Logger();\r\n\r\n/**\r\n * The Gorgon class\r\n */\r\nclass Gorgon {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * The gorgon config for the server\r\n         * @type {GorgonConfig}\r\n         */\r\n        this.GorgonConfig = new GorgonConfig();\r\n\r\n        /**\r\n         * The gorgon server logger\r\n         * @type {Logger}\r\n         */\r\n        this.Logger = global.Logger;\r\n        this.Logger.log('Gorgon:initServer', 200, 'The Gorgon has been summoned - GORGON SERVER STARTING...');\r\n\r\n        /**\r\n         * The gorgon environment for the server\r\n         * @type {GorgonEnv}\r\n         */\r\n        this.GorgonEnv = new GorgonEnv();\r\n\r\n        /**\r\n         * The container service\r\n         * @type {GorgonContainerService}\r\n         */\r\n        this.GorgonContainerService = new GorgonContainerService();\r\n\r\n\r\n        /**\r\n         * The first style of CLI separator\r\n         * @type {string}\r\n         */\r\n        this.separator1 = '================================================';\r\n\r\n        /**\r\n         * The second style of CLI separator\r\n         * @type {string}\r\n         */\r\n        this.separator2 = '------------------------------------------------';\r\n    }\r\n\r\n    /**\r\n     * Initializes the server and loads the configured services from the environment\r\n     */\r\n    initServer()\r\n    {\r\n        this._bootstrap();\r\n        console.log(this.separator2);\r\n        console.log('Loading Services');\r\n        console.log(this.separator2);\r\n        this.Logger.log('Gorgon:initServer', 200, 'The server was started successfully');\r\n\r\n        this.GorgonEnv.service.forEach(function(value){\r\n            this.GorgonContainerService.add(value.service);\r\n            console.log(value.namespace + ' - [ Ok ]');\r\n            this.Logger.log('Gorgon:initServer', 200, 'Loaded service namespace: ' + value.namespace);\r\n        }, this);\r\n\r\n        this.Logger.log('Gorgon:initServer', 200, 'Service Loading Completed');\r\n    }\r\n\r\n    /**\r\n     * The CLI server bootstrap\r\n     *\r\n     * @private\r\n     */\r\n    _bootstrap()\r\n    {\r\n        console.log('Gorgon Server - v' + this.GorgonConfig.data.version);\r\n        console.log('Author: Ryan Rentfro <rrentfro at gmail dot com>');\r\n        console.log('Project: https://github.com/manufacturing-industry/gorgon');\r\n        this._motd();\r\n        console.log('Press cntrl+c to exit the server');\r\n    }\r\n\r\n    /**\r\n     * The server message of the day display\r\n     *\r\n     * @private\r\n     */\r\n    _motd()\r\n    {\r\n        console.log(this.separator1);\r\n        console.log(this.GorgonConfig.data.motd);\r\n        console.log(this.separator1);\r\n    }\r\n}\r\n\r\n/*\r\n * Run the Gorgon Server\r\n */\r\nvar GorgonServer = new Gorgon();\r\nGorgonServer.initServer();\n\n\n/** WEBPACK FOOTER **\n ** ./src/gorgon.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/**\r\n * The Gorgon config class\r\n */\r\nexport class GorgonConfig\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * The servers default config data\r\n         * @type {{name: string, version: string}}\r\n         */\r\n        this.data = {\r\n            name: 'Gorgon Server',\r\n            version: '0.0.1 Pre-Alpha',\r\n            motd: 'This is the message of the day for the Gorgon Server'\r\n        };\r\n\r\n        /**\r\n         * The servers default storage config\r\n         *\r\n         * @note Contains the path pointers for base storage components\r\n         *\r\n         * @type {{logs: string}}\r\n         */\r\n        this.storage = {\r\n            logs: 'logs/'\r\n        };\r\n\r\n        /**\r\n         * The servers default layers controls\r\n         * @type {{server: boolean, cli: boolean, services: boolean}}\r\n         */\r\n        this.load = {\r\n            server: true,\r\n            cli: true,\r\n            services: true\r\n        };\r\n\r\n        /**\r\n         * Controls debugging\r\n         * @type {{enable: boolean}}\r\n         */\r\n        this.debug = {\r\n            enable: true\r\n        };\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/config/config.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nimport StatusService from '../service/status/index'\r\n\r\n/**\r\n * The Gorgon env class\r\n */\r\nexport class GorgonEnv\r\n{\r\n    constructor()\r\n    {\r\n        this.service = new StatusService();\r\n        this.service = [\r\n            {\r\n                sid: 0,\r\n                name: 'Status',\r\n                namespace: 'StatusService',\r\n                enable: true,\r\n                service: this.service }\r\n        ];\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/config/env.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport {Routes} from '../../component/routes'\r\nimport {GorgonService} from '../index';\r\nimport {StatusServiceConfig} from 'config/config';\r\nimport {Network} from '../../component/network'\r\n\r\nvar NetworkStack = new Network();\r\n\r\n/**\r\n * The status service\r\n *\r\n * @note Provides status on server configuration\r\n */\r\nclass StatusService extends GorgonService {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        /**\r\n         * The status service configuration\r\n         * @type {StatusServiceConfig}\r\n         */\r\n        this.config = StatusServiceConfig;\r\n\r\n        /**\r\n         * The service name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Status Service';\r\n\r\n        /**\r\n         * The service namespace\r\n         * @type {string}\r\n         */\r\n        this.namespace = 'StatusService';\r\n\r\n        /**\r\n         * The service description\r\n         * @type {string}\r\n         */\r\n        this.description = 'Provides service status';\r\n\r\n        /**\r\n         * The service type\r\n         * @type {string}\r\n         */\r\n        this.type = 'Service';\r\n\r\n        /**\r\n         * The service https control - controls how https works for the services exposed http endpoints\r\n         * @type {string|boolean} Can be enable, disable, true, false, or enforce\r\n         */\r\n        this.https = true;\r\n\r\n        /**\r\n         * The inbound types supported by the service\r\n         * @type {string[]}\r\n         */\r\n        this.inboundTypes = ['rest', 'socket', 'http', 'webSocket', 'api'];\r\n\r\n        /**\r\n         * The ports that map to the inbound types 1:1\r\n         * @type {number|null[]}\r\n         */\r\n        this.ports = [2600, null, 2680, 2688, null];\r\n\r\n        /**\r\n         * The router for the service\r\n         * @type {Routes}\r\n         */\r\n        this.router = new Routes(this.namepsace);\r\n\r\n        /**\r\n         * The permissions for the service\r\n         * @type {string[]} Can be internal and/or external\r\n         */\r\n        this.permissions = ['internal'];\r\n\r\n        /**\r\n         * Binds the services routes and networking\r\n         */\r\n        this.serviceBind();\r\n    }\r\n\r\n    /**\r\n     * The routes configuration for the service\r\n     *\r\n     * @note This is loaded into the classes router and the network stack\r\n     */\r\n    routes()\r\n    {\r\n        return {\r\n            'ServiceRequest':\r\n            {\r\n                inboundTypes: this.inboundTypes,\r\n                method: '/StatusServiceRequest',\r\n                callback: this.serviceRequest()\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    /**\r\n     * The service request method\r\n     *\r\n     * @note Provides the service request for the server\r\n     */\r\n    serviceRequest(req, res)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Binds the services routes and networking components\r\n     *\r\n     * @return {boolean} Returns true on completion\r\n     */\r\n    serviceBind()\r\n    {\r\n        /*\r\n         * Imports the routers routes from the class\r\n         */\r\n        this.router.importRoutes(this.routes());\r\n\r\n        /*\r\n         * Set the networking configuration for the class\r\n         */\r\n        this._setNetworking();\r\n\r\n        /*\r\n         * Add the service to the network\r\n         */\r\n        NetworkStack.addService(this);\r\n\r\n        return true;\r\n    }\r\n\r\n    serviceUnbind()\r\n    {\r\n        NetworkStack.removeService(this.namespace);\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * Exports\r\n */\r\nexport default StatusService;\n\n\n/** WEBPACK FOOTER **\n ** ./src/service/status/index.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nexport class Routes {\r\n    constructor(serviceNamespace) {\r\n        this.service = serviceNamespace;\r\n        this.inboundTypes = ['rest', 'socket', 'http', 'https', 'webSocket', 'api'];\r\n        this.routes = [];\r\n        this.routeCallbacks = [];\r\n        this.permissionMap = [];\r\n    }\r\n\r\n    add(inboundTypes, method, callback)\r\n    {\r\n        this.routes.push(method);\r\n        this.routeCallbacks(callback);\r\n        var pos = this.routeCallbacks.length - 1;\r\n\r\n        inboundTypes.forEach(function(value){\r\n            if (this.inboundTypes.indexOf(value) > -1) this.permissionMap[value].push(pos);\r\n            else console.log('ERROR - Invalid Permission Encountered in Service: [' + this.service + '] Method: [' + method + ']');\r\n        });\r\n    }\r\n\r\n    remove(method)\r\n    {\r\n        let pos = this.routes.indexOf(method);\r\n        if (pos > -1)\r\n        {\r\n            this.routeCallbacks[pos] = null;\r\n            this.routes[pos] = null;\r\n\r\n            this.inboundTypes.forEach(function(value)\r\n            {\r\n                if (this.permissionMap[value] != undefined && this.permissionMap[value] instanceof Array)\r\n                {\r\n                    let keyPos = this.permissionMap[value].indexOf(pos);\r\n                    if (keyPos > -1) this.permissionMap[value].splice(keyPos, 1);\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    importRoutes(routes)\r\n    {\r\n        if (routes instanceof Array)\r\n        {\r\n            for (var key in routes) {\r\n                if (routes.hasOwnProperty(key)) {\r\n                    this.add(routes[key]['inboundTypes'], routes[key]['method'], routes[key]['callback']);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    route(inboundType, method, payload)\r\n    {\r\n        let pos = this.routes.indexOf(method);\r\n        if (pos > -1)\r\n        {\r\n            if (this.permissionMap[inboundType] != undefined && this.permissionMap[inboundType].length > 0 && this.permissionMap[inboundType].indexOf(pos) > -1)\r\n            {\r\n                //callback exists for method\r\n                return this.routeCallbacks[pos](method, inboundType, ...payload);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/routes.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/**\r\n * The Gorgon Container Service Class\r\n *\r\n * @note This class provides containers for services\r\n */\r\nexport class GorgonContainerService {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor() {\r\n        this.containers = [];\r\n        this.containerMap = [];\r\n        this.name = \"Gorgon Container Service\";\r\n        this.type = \"Service\";\r\n    }\r\n\r\n    /**\r\n     * Adds a new service by creating a container and injecting the service and its location to the service map\r\n     *\r\n     * @param {object} service The service to tbe added\r\n     * @returns {boolean} Returns true on completion and false on failure\r\n     */\r\n    add(service)\r\n    {\r\n        if (service.namespace != null && service.namespace != '' && this.containerMap.indexOf(service.namespace) == -1)\r\n        {\r\n            this.containers.push(service);\r\n            this.containerMap.push(service.namespace);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Removes a service container by the service namespace\r\n     *\r\n     * @param {string} serviceNamespace The service namespace to be removed\r\n     * @returns {boolean} Returns true on completion and false on failure\r\n     */\r\n    remove(serviceNamespace)\r\n    {\r\n        if (this.containerMap.indexOf(serviceNamespace) > -1)\r\n        {\r\n            let pos = this.containerMap.indexOf(serviceNamespace);\r\n            this.containers.splice(pos, 1);\r\n            this.containerMap.splice(pos, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a service container by its namespace\r\n     *\r\n     * @param {string} serviceNamespace The service namespace\r\n     * @returns {*} Returns the service when located or false when not located\r\n     */\r\n    get(serviceNamespace)\r\n    {\r\n        if (this.containerMap.indexOf(serviceNamespace) > -1) return this.containers[this.containerMap.indexOf(serviceNamespace)];\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * The gorgon service object\r\n *\r\n * @note Provides the service, default properties/methods used for constructing containers\r\n */\r\nexport class GorgonService\r\n{\r\n    constructor()\r\n    {\r\n        this.name = null;\r\n        this.description = null;\r\n        this.type = 'Service';\r\n        this.router = null;\r\n        this.inboundTypes = [];\r\n        this.ports = [];\r\n        this.permissions = [];\r\n        this.networking = [];\r\n    }\r\n\r\n    /**\r\n     * Updates the networking property via the\r\n     * @private\r\n     */\r\n    _setNetworking()\r\n    {\r\n        if (this.inboundTypes instanceof Array && this.ports instanceof Array && this.inboundTypes.length == this.ports.length)\r\n        {\r\n            for(var i = 0; i < this.inboundTypes.length; i++)\r\n            {\r\n                this.networking.push({ name: this.inboundTypes[i], port: this.ports[i] })\r\n            }\r\n        } else {\r\n            console.warn('GorgonService:_setNetworking - Missing or invalid networking for service ' + this.name);\r\n        }\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/service/index.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nlet instance = null;\r\nimport http from 'http';\r\nimport SocketIO from 'socket.io';\r\nimport compression from 'compression';\r\nimport express from 'express';\r\n\r\nvar app = express();\r\nvar server = http.Server(app);\r\nvar io = new SocketIO(server);\r\n\r\napp.use(compression({}));\r\n//app.use(express['static'](__dirname + '/../client'));\r\n\r\n/**\r\n * The network controls singleton class\r\n *\r\n * @note Creates and maps the network components for services\r\n */\r\nexport class Network {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        if(!instance)\r\n        {\r\n            this.services = [];\r\n            this.serviceMap = [];\r\n            this.components = [];\r\n            this.componentMap = [];\r\n            this.componentTypeMap = {\r\n                rest: [],\r\n                socket: [],\r\n                webSocket: [],\r\n                http: [],\r\n                api: []\r\n            };\r\n            this.portReservations = [];\r\n            this.portReservationNamespace = [];\r\n            this.activeServices = [];\r\n            this.wsExpress = express();\r\n            this.webSocketServer = http.Server(this.wsExpress);\r\n\r\n            //Configures compression for the http stack\r\n            //this.baseComponent.express.use(compression({}));\r\n\r\n            instance = this;\r\n\r\n        } else return instance;\r\n    }\r\n\r\n    /**\r\n     * Adds a service to the network layer\r\n     *\r\n     * @param {object} service The service to be added\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    addService(service)\r\n    {\r\n        if (this.activeServices.indexOf(service.namespace) == -1)\r\n        {\r\n            this.services.push(service);\r\n            this.serviceMap.push(service.namespace);\r\n            let serviceId = this.serviceMap.length - 1;\r\n\r\n            /*\r\n             * Add networking components\r\n             */\r\n            if (service.networking instanceof Array)\r\n            {\r\n                for(var i=0; i < service.networking.length; i++)\r\n                {\r\n                    /**\r\n                     * @todo RESUME HERE\r\n                     */\r\n                    this.add(serviceId, service.namespace, service.networking[i].name, 'label', service.networking[i].port);\r\n                }\r\n\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Removes the services network components\r\n     *\r\n     * @param {string} serviceNamespace The namespace of the service to be removed\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    removeService(serviceNamespace)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds a service network component\r\n     *\r\n     * @param {number} serviceId The serviceId for the service\r\n     * @param {string} serviceNamespace The service namespace for the component\r\n     * @param {string} type The network component type\r\n     * @param {string} label The label for the component\r\n     * @param {string|null} port The optional port for the network component\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    add(serviceId, serviceNamespace, type, label, port)\r\n    {\r\n        if (this.portReservations.indexOf(port) == -1 || port == null || port == undefined)\r\n        {\r\n            switch(type)\r\n            {\r\n                default:\r\n                    global.Logger.log('Network:add', 400, 'Unable to load component type of: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\r\n                    return false;\r\n                    break;\r\n                case 'rest':\r\n                    this._createRestComponent(serviceId, serviceNamespace, port);\r\n                    break;\r\n                case 'http':\r\n                    break;\r\n                case 'socket':\r\n                    break;\r\n                case 'webSocket':\r\n                    break;\r\n                case 'api':\r\n                    break;\r\n            }\r\n\r\n            this.componentMap.push(serviceNamespace + '-' + type + '-' + label + '-' + port);\r\n            console.log('loadType');\r\n            console.log(type);\r\n            //this.componentTypeMap[type].push(serviceNamespace + '-' + type + '-' + label + '-' + port);\r\n            global.Logger.log('Network:add', 200, 'Added network component: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _createRestComponent(serviceId, namespace, port)\r\n    {\r\n        var component = this.wsExpress.post('/' + namespace, function (req, res) {\r\n            this.services[serviceId].serviceRequest(req, res);\r\n        });\r\n\r\n        if (this.isPortReserved(port))\r\n        {\r\n            let pos = this.portReservations.indexOf(port);\r\n            let serviceNamespace = this.portReservationNamespace[pos];\r\n            if (serviceNamespace != namespace)\r\n            {\r\n                global.Logger.log('Network:add', 400, 'Unable to create component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        console.log('component port mount');\r\n        component.listen(port, function () {\r\n            console.log('Example app listening on port 3000!');\r\n        });\r\n        return true;\r\n    }\r\n\r\n    _createHttpComponent()\r\n    {\r\n\r\n    }\r\n\r\n    _createSocketComponent()\r\n    {\r\n\r\n    }\r\n\r\n    _createWebSocketComponent()\r\n    {\r\n\r\n    }\r\n\r\n    _createApiComponent()\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Removes a service network component\r\n     *\r\n     * @param {string} serviceNamespace The service namespace for the component\r\n     * @param {string} type The network component type\r\n     * @param {string} label The label for the component\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    remove(serviceNamespace, type, label)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Checks if the port is reserved\r\n     *\r\n     * @param {number} port The port number\r\n     * @returns {boolean} Returns true if the port is reserved false if it is not\r\n     */\r\n    isPortReserved(port)\r\n    {\r\n        return this.portReservations.indexOf(port) > -1;\r\n    }\r\n}\r\n\r\nclass NetworkComponent\r\n{\r\n    constructor(type, label, port, service)\r\n    {\r\n        this.type = type;\r\n        this.label = label;\r\n        this.port = port;\r\n        this.service = service;\r\n        this.attr = {};\r\n    }\r\n\r\n    addAttribute(name, value)\r\n    {\r\n        this.attr[name] = value;\r\n    }\r\n\r\n    removeAttribute(name)\r\n    {\r\n        delete this.attr[name];\r\n    }\r\n}\r\n\r\n/*\r\n * Exports\r\n */\r\nvar NetworkStack = new Network();\r\nexport default NetworkStack;\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/network.js\n **/","module.exports = require(\"http\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"http\"\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = require(\"socket.io\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"socket.io\"\n ** module id = 8\n ** module chunks = 0\n **/","module.exports = require(\"compression\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"compression\"\n ** module id = 9\n ** module chunks = 0\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 10\n ** module chunks = 0\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport * as fs from 'fs';\r\nimport moment from 'moment';\r\nimport * as os from 'os';\r\nimport {GorgonConfig} from '../config/config'\r\nimport sanitize from 'sanitize-filename';\r\n\r\n/**\r\n * The server logging class\r\n */\r\nexport class Logger {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        this.fs = fs;\r\n        this.GorgonConfig = new GorgonConfig();\r\n        this.sanitize = sanitize;\r\n        this.topicMap = [];\r\n        this.subscribers = [];\r\n        this.subscriberMap = [];\r\n        this.level = ['Debug', 'Info', 'Warn', 'Error', 'Critical', 'Fatal'];\r\n        this.levelKey = [100, 200, 300, 400, 500, 600];\r\n    }\r\n\r\n    /**\r\n     * Creates a new log and writes it to the corresponding file\r\n     *\r\n     * @param {string} location The location the log originated from\r\n     * @param {number} level The level of the log (from levelKey)\r\n     * @param {string} message The message for the log\r\n     * @param {*} values The values to include with the log\r\n     * @param {string} type The type for the log\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    log(location, level, message, values, type)\r\n    {\r\n        var logItem = new Log(location, level, message, values, type);\r\n        var logValues = logItem.values == null || logItem.values == undefined ? null : JSON.stringify(logItem.values);\r\n        var filename = logItem.created.format('YYYYMMDD') + '.log';\r\n\r\n        switch(logItem.type)\r\n        {\r\n            default:\r\n                filename = this.sanitize(logItem.type) + '-' + filename;\r\n                break;\r\n            case undefined:\r\n            case true:\r\n            case 'sys':\r\n                filename = 'sys-' + filename;\r\n                break;\r\n            case 'error':\r\n                filename = 'error-' + filename;\r\n                break;\r\n        }\r\n\r\n        var logEntry = logItem.created.format() + ' ' + logItem.level + ' ' + logItem.location + ' [message=' + logItem.message + ']' + ' [values=' + logValues + ']' + os.EOL;\r\n\r\n        if (!this.fs.existsSync(this.GorgonConfig.storage.logs)){\r\n            fs.mkdirSync(this.GorgonConfig.storage.logs);\r\n        }\r\n\r\n        this.fs.appendFile(this.GorgonConfig.storage.logs + filename, logEntry, 'utf8',  function (err)\r\n        {\r\n            if (err) {\r\n                console.error(err);\r\n                return false;\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * The server log class\r\n */\r\nclass Log {\r\n    /**\r\n     * Constructs the class\r\n     *\r\n     * @param {string} location The location the log originated from\r\n     * @param {number} level The level of the log (from levelKey)\r\n     * @param {string} message The message for the log\r\n     * @param {*} values The values to include with the log\r\n     * @param {string} type The type for the log\r\n     */\r\n    constructor(location, level, message, values, type)\r\n    {\r\n        this.location = location;\r\n        this.level = level == null || level == undefined ? 100 : level;\r\n        this.message = message;\r\n        this.type = type == null || type == undefined ? 'sys' : type;\r\n        this.values = values == null || values == undefined ? null : values;\r\n        this.created = moment();\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/log.js\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 12\n ** module chunks = 0\n **/","module.exports = require(\"moment\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"moment\"\n ** module id = 13\n ** module chunks = 0\n **/","module.exports = require(\"os\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"os\"\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = require(\"sanitize-filename\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"sanitize-filename\"\n ** module id = 15\n ** module chunks = 0\n **/"],"sourceRoot":""}
{"version":3,"sources":["webpack:///gorgon.min.js","webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8b642b969a39190d691d","webpack:///./src/gorgon.js","webpack:///./src/config/config.js","webpack:///./src/config/env.js","webpack:///./src/service/status/index.js","webpack:///./src/component/routes.js","webpack:///./src/service/index.js","webpack:///./src/component/network.js","webpack:///external \"lodash\"","webpack:///./src/component/middleware.js","webpack:///./src/component/api.js","webpack:///external \"moment\"","webpack:///external \"http\"","webpack:///external \"socket.io\"","webpack:///external \"compression\"","webpack:///external \"express\"","webpack:///./src/component/log.js","webpack:///external \"fs\"","webpack:///external \"os\"","webpack:///external \"sanitize-filename\"","webpack:///external \"colog\""],"names":["require","install","root","factory","exports","module","define","amd","this","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_10__","__WEBPACK_EXTERNAL_MODULE_11__","__WEBPACK_EXTERNAL_MODULE_12__","__WEBPACK_EXTERNAL_MODULE_13__","__WEBPACK_EXTERNAL_MODULE_14__","__WEBPACK_EXTERNAL_MODULE_16__","__WEBPACK_EXTERNAL_MODULE_17__","__WEBPACK_EXTERNAL_MODULE_18__","__WEBPACK_EXTERNAL_MODULE_19__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_config","_env","_index","_log","_lodash","_lodash2","_colog","_colog2","global","Logger","Console","Gorgon","GorgonConfig","log","GorgonEnv","GorgonContainerService","separator1","separator2","value","_bootstrap","question","service","forEach","consoleWidth","add","logExtLen","spaceLength","namespace","spaceChar","repeat","color","_logExtLen","_spaceLength","_spaceChar","data","version","_motd","motd","GorgonServer","initServer","name","storage","logs","load","server","cli","services","debug","enable","undefined","_index2","sid","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_routes","_network","NetworkStack","Network","StatusService","_GorgonService","_this","getPrototypeOf","config","StatusServiceConfig","description","type","https","inboundTypes","ports","router","Routes","namepsace","permissions","serviceBind","ServiceRequest","method","callback","serviceRequest","req","res","mode","socket","importRoutes","routes","_setNetworking","addService","removeService","GorgonService","_toConsumableArray","arr","Array","isArray","arr2","from","serviceNamespace","routeCallbacks","permissionMap","push","pos","indexOf","console","keyPos","splice","hasOwnProperty","inboundType","payload","_routeCallbacks","apply","concat","containers","containerMap","serviceId","networking","port","warn","isRest","_middleware","_middleware2","_api","_api2","_http","_http2","_socket","_socket2","_compression","_compression2","_express","_express2","middleware","serviceMap","components","componentMap","componentTypeMap","rest","webSocket","http","api","portReservations","portReservationNamespace","activeServices","setServiceId","label","created","_createRestComponent","_createHttpComponent","_createWebSocketComponent","setListener","use","component","all","callChannel","isPortReserved","isFunction","listen","httpServer","Server","users","sockets","on","userId","handshake","query","currentUser","findIndex","disconnect","emit","broadcast","setWebSocketEvents","addApiNode","apiRequest","NetworkComponent","attr","Middleware","serviceRegister","dataMap","channels","channel","_getChannelId","_getExistingMiddleware","middlewareList","foreach","channelObject","existing","find","toUpper","Api","_moment","_moment2","ApiCall","apiMap","serviceIdMap","node","_getNodePos","getApiNode","apiCall","callApi","mehod","returned","error","errors","updated","_interopRequireWildcard","newObj","_fs","fs","_os","os","_sanitizeFilename","_sanitizeFilename2","Log","sanitize","topicMap","subscribers","subscriberMap","level","levelKey","location","message","values","logItem","logValues","JSON","stringify","filename","format","logEntry","EOL","existsSync","mkdirSync","appendFile","err"],"mappings":"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","file":"gorgon.min.js","sourcesContent":["require(\"source-map-support\").install();\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"moment\"), require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"os\"), require(\"sanitize-filename\"), require(\"colog\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gorgon\", [\"lodash\", \"moment\", \"http\", \"socket.io\", \"compression\", \"express\", \"fs\", \"os\", \"sanitize-filename\", \"colog\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gorgon\"] = factory(require(\"lodash\"), require(\"moment\"), require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"os\"), require(\"sanitize-filename\"), require(\"colog\"));\n\telse\n\t\troot[\"gorgon\"] = factory(root[\"lodash\"], root[\"moment\"], root[\"http\"], root[\"socket.io\"], root[\"compression\"], root[\"express\"], root[\"fs\"], root[\"os\"], root[\"sanitize-filename\"], root[\"colog\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_19__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n\torgon the scripting capable network server for Node JS\r\n\tr\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @package Gorgon\r\n\tauthor Ryan Rentfro\r\n\tlicense MIT\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @url https://github.com/manufacturing-industry\r\n\tn\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _env = __webpack_require__(2);\n\t\n\tvar _index = __webpack_require__(5);\n\t\n\tvar _log = __webpack_require__(15);\n\t\n\tvar _lodash = __webpack_require__(7);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tvar _colog = __webpack_require__(19);\n\t\n\tvar _colog2 = _interopRequireDefault(_colog);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*\r\n\t * Configure globals\r\n\t */\n\t\n\t/**\r\n\t * The global logger class\r\n\t *\r\n\t * @type {Logger}\r\n\t */\n\tglobal.Logger = new _log.Logger();\n\t\n\t/**\r\n\t * The global console class\r\n\t *\r\n\t * @type {object} The colog instance\r\n\t */\n\tglobal.Console = _colog2.default;\n\t\n\t/**\r\n\t * The Gorgon class\r\n\t */\n\t\n\tvar Gorgon = function () {\n\t  /**\r\n\t   * Constructs the class\r\n\t   */\n\t  function Gorgon() {\n\t    _classCallCheck(this, Gorgon);\n\t\n\t    /**\r\n\t     * The gorgon config for the server\r\n\t     * @type {GorgonConfig}\r\n\t     */\n\t    this.GorgonConfig = new _config.GorgonConfig();\n\t\n\t    /**\r\n\t     * The gorgon server logger\r\n\t     * @type {Logger}\r\n\t     */\n\t    this.Logger = global.Logger;\n\t    this.Logger.log('Gorgon:initServer', 200, 'The Gorgon has been summoned - GORGON SERVER STARTING...');\n\t\n\t    /**\r\n\t     * The gorgon environment for the server\r\n\t     * @type {GorgonEnv}\r\n\t     */\n\t    this.GorgonEnv = new _env.GorgonEnv();\n\t\n\t    /**\r\n\t     * The container service\r\n\t     * @type {GorgonContainerService}\r\n\t     */\n\t    this.GorgonContainerService = new _index.GorgonContainerService();\n\t\n\t    /**\r\n\t     * The first style of CLI separator\r\n\t     * @type {string}\r\n\t     */\n\t    this.separator1 = '================================================';\n\t\n\t    /**\r\n\t     * The second style of CLI separator\r\n\t     * @type {string}\r\n\t     */\n\t    this.separator2 = '------------------------------------------------';\n\t  }\n\t\n\t  /**\r\n\t   * Initializes the server and loads the configured services from the environment\r\n\t   */\n\t\n\t\n\t  _createClass(Gorgon, [{\n\t    key: \"initServer\",\n\t    value: function initServer() {\n\t      this._bootstrap();\n\t      global.Console.log(this.separator2);\n\t      global.Console.question('Loading Services');\n\t      global.Console.log(this.separator2);\n\t      this.Logger.log('Gorgon:initServer', 200, 'The server was started successfully');\n\t\n\t      this.GorgonEnv.service.forEach(function (value) {\n\t        var consoleWidth = 48;\n\t        var loaded = this.GorgonContainerService.add(value.service);\n\t        var status = loaded !== false;\n\t        //global.Console.log(value.namespace + ' - [ ' + loaded === false ? global.Console.error(status) : global.Console.success(status) + ' ]');\n\t        if (loaded) {\n\t          var logExtLen = 6;\n\t          var spaceLength = consoleWidth - logExtLen - value.namespace.length - 2;\n\t          var spaceChar = _lodash2.default.repeat('.', spaceLength);\n\t          this.Logger.log('Gorgon:initServer', 200, 'Loaded service namespace: ' + value.namespace);\n\t          global.Console.log(value.namespace + ' ' + spaceChar + ' [ ' + global.Console.color('OK', 'green') + ' ]');\n\t        } else {\n\t          var _logExtLen = 10;\n\t          var _spaceLength = consoleWidth - _logExtLen - value.namespace.length - 2;\n\t          var _spaceChar = _lodash2.default.repeat('.', _spaceLength);\n\t          this.Logger.log('Gorgon:initServer', 400, 'Failed to load service with namespace: ' + value.namespace);\n\t          global.Console.log(value.namespace + ' ' + _spaceChar + ' [ ' + global.Console.color('FAILED', 'red') + ' ]');\n\t        }\n\t      }, this);\n\t\n\t      this.Logger.log('Gorgon:initServer', 200, 'Service Loading Completed');\n\t      global.Console.log(this.separator2);\n\t      global.Console.log('Server is now online...');\n\t    }\n\t\n\t    /**\r\n\t     * The CLI server bootstrap\r\n\t     *\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: \"_bootstrap\",\n\t    value: function _bootstrap() {\n\t      global.Console.log('Gorgon Server - v' + this.GorgonConfig.data.version);\n\t      global.Console.log('Author: Ryan Rentfro <rrentfro at gmail dot com>');\n\t      global.Console.log('Project: https://github.com/manufacturing-industry/gorgon');\n\t      this._motd();\n\t      global.Console.log('Press cntrl+c to exit the server');\n\t    }\n\t\n\t    /**\r\n\t     * The server message of the day display\r\n\t     *\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: \"_motd\",\n\t    value: function _motd() {\n\t      global.Console.log(this.separator1);\n\t      global.Console.log(this.GorgonConfig.data.motd);\n\t      global.Console.log(this.separator1);\n\t    }\n\t  }]);\n\t\n\t  return Gorgon;\n\t}();\n\t\n\t/*\r\n\t * Run the Gorgon Server\r\n\t */\n\t\n\t\n\tvar GorgonServer = new Gorgon();\n\tGorgonServer.initServer();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\t/**\r\n\t * The Gorgon config class\r\n\t */\n\tvar GorgonConfig =\n\t/**\r\n\t * Constructs the class\r\n\t */\n\texports.GorgonConfig = function GorgonConfig() {\n\t  _classCallCheck(this, GorgonConfig);\n\t\n\t  /**\r\n\t   * The servers default config data\r\n\t   * @type {{name: string, version: string}}\r\n\t   */\n\t  this.data = {\n\t    name: 'Gorgon Server',\n\t    version: '0.0.1 Pre-Alpha',\n\t    motd: 'This is the message of the day.'\n\t  };\n\t\n\t  /**\r\n\t   * The servers default storage config\r\n\t   *\r\n\t   * @note Contains the path pointers for base storage components\r\n\t   *\r\n\t   * @type {{logs: string}}\r\n\t   */\n\t  this.storage = {\n\t    logs: 'logs/'\n\t  };\n\t\n\t  /**\r\n\t   * The servers default layers controls\r\n\t   * @type {{server: boolean, cli: boolean, services: boolean}}\r\n\t   */\n\t  this.load = {\n\t    server: true,\n\t    cli: true,\n\t    services: true\n\t  };\n\t\n\t  /**\r\n\t   * Controls debugging\r\n\t   * @type {{enable: boolean}}\r\n\t   */\n\t  this.debug = {\n\t    enable: true\n\t  };\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.GorgonEnv = undefined;\n\t\n\tvar _index = __webpack_require__(3);\n\t\n\tvar _index2 = _interopRequireDefault(_index);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\r\n\t                                                                                                                                                           * Gorgon the scripting capable network server for Node JS\r\n\t                                                                                                                                                           *\r\n\t                                                                                                                                                           * @package Gorgon\r\n\t                                                                                                                                                           * @author Ryan Rentfro\r\n\t                                                                                                                                                           * @license MIT\r\n\t                                                                                                                                                           * @url https://github.com/manufacturing-industry\r\n\t                                                                                                                                                           */\n\t\n\t/**\r\n\t * The Gorgon env class\r\n\t */\n\tvar GorgonEnv = exports.GorgonEnv = function GorgonEnv() {\n\t    _classCallCheck(this, GorgonEnv);\n\t\n\t    this.service = new _index2.default();\n\t    this.service = [{\n\t        sid: 0,\n\t        name: 'Status',\n\t        namespace: 'StatusService',\n\t        enable: true,\n\t        service: this.service }];\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _routes = __webpack_require__(4);\n\t\n\tvar _index = __webpack_require__(5);\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _network = __webpack_require__(6);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Gorgon the scripting capable network server for Node JS\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @package Gorgon\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Ryan Rentfro\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license MIT\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @url https://github.com/manufacturing-industry\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar NetworkStack = new _network.Network();\n\t\n\t/**\r\n\t * The status service\r\n\t *\r\n\t * @note Provides status on server configuration\r\n\t */\n\t\n\tvar StatusService = function (_GorgonService) {\n\t  _inherits(StatusService, _GorgonService);\n\t\n\t  /**\r\n\t   * Constructs the class\r\n\t   */\n\t  function StatusService() {\n\t    _classCallCheck(this, StatusService);\n\t\n\t    /**\r\n\t     * The status service configuration\r\n\t     * @type {StatusServiceConfig}\r\n\t     */\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StatusService).call(this));\n\t\n\t    _this.config = _config.StatusServiceConfig;\n\t\n\t    /**\r\n\t     * The service name\r\n\t     * @type {string}\r\n\t     */\n\t    _this.name = 'Status Service';\n\t\n\t    /**\r\n\t     * The service namespace\r\n\t     * @type {string}\r\n\t     */\n\t    _this.namespace = 'StatusService';\n\t\n\t    /**\r\n\t     * The service description\r\n\t     * @type {string}\r\n\t     */\n\t    _this.description = 'Provides service status';\n\t\n\t    /**\r\n\t     * The service type\r\n\t     * @type {string}\r\n\t     */\n\t    _this.type = 'Service';\n\t\n\t    /**\r\n\t     * The service https control - controls how https works for the services exposed http endpoints\r\n\t     * @type {string|boolean} Can be enable, disable, true, false, or enforce\r\n\t     */\n\t    _this.https = true;\n\t\n\t    /**\r\n\t     * The inbound types supported by the service\r\n\t     * @type {string[]}\r\n\t     */\n\t    _this.inboundTypes = ['rest', 'socket', 'http', 'webSocket', 'api'];\n\t\n\t    /**\r\n\t     * The ports that map to the inbound types 1:1\r\n\t     * @type {number|null[]}\r\n\t     */\n\t    _this.ports = [2600, null, 2680, 2688, null];\n\t\n\t    /**\r\n\t     * The router for the service\r\n\t     * @type {Routes}\r\n\t     */\n\t    _this.router = new _routes.Routes(_this.namepsace);\n\t\n\t    /**\r\n\t     * The permissions for the service\r\n\t     * @type {string[]} Can be internal and/or external\r\n\t     */\n\t    _this.permissions = ['internal'];\n\t\n\t    /**\r\n\t     * Binds the services routes and networking\r\n\t     */\n\t    _this.serviceBind();\n\t    return _this;\n\t  }\n\t\n\t  /**\r\n\t   * The routes configuration for the service\r\n\t   *\r\n\t   * @note This is loaded into the classes router and the network stack\r\n\t   */\n\t\n\t\n\t  _createClass(StatusService, [{\n\t    key: 'routes',\n\t    value: function routes() {\n\t      return {\n\t        'ServiceRequest': {\n\t          inboundTypes: this.inboundTypes,\n\t          method: '/StatusServiceRequest',\n\t          callback: this.serviceRequest()\n\t        }\n\t      };\n\t    }\n\t\n\t    /**\r\n\t     * The service request method for http and rest services\r\n\t     *\r\n\t     * @note Provides the service request for the server\r\n\t     *\r\n\t     * @param {Request} req A request object\r\n\t     * @param {Object} res A response object\r\n\t     * @param {string} mode Controls if the call is http or rest\r\n\t     * @todo Add routing for handling inbound requests\r\n\t     */\n\t\n\t  }, {\n\t    key: 'serviceRequest',\n\t    value: function serviceRequest(req, res, mode) {}\n\t\n\t    /**\r\n\t     * The service api call method\r\n\t     *\r\n\t     *\r\n\t     * @param data\r\n\t     * @todo Add routing for handling inbound requests\r\n\t     */\n\t\n\t  }, {\n\t    key: 'apiRequest',\n\t    value: function apiRequest(data) {}\n\t  }, {\n\t    key: 'setWebSocketEvents',\n\t    value: function setWebSocketEvents(socket) {}\n\t\n\t    /**\r\n\t     * Binds the services routes and networking components\r\n\t     *\r\n\t     * @return {boolean} Returns true on completion\r\n\t     */\n\t\n\t  }, {\n\t    key: 'serviceBind',\n\t    value: function serviceBind() {\n\t      /*\r\n\t       * Imports the routers routes from the class\r\n\t       */\n\t      this.router.importRoutes(this.routes());\n\t\n\t      /*\r\n\t       * Set the networking configuration for the class\r\n\t       */\n\t      this._setNetworking();\n\t\n\t      /*\r\n\t       * Add the service to the network\r\n\t       */\n\t      NetworkStack.addService(this);\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'serviceUnbind',\n\t    value: function serviceUnbind() {\n\t      NetworkStack.removeService(this.namespace);\n\t    }\n\t  }]);\n\t\n\t  return StatusService;\n\t}(_index.GorgonService);\n\t\n\t/*\r\n\t * Exports\r\n\t */\n\t\n\t\n\texports.default = StatusService;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\tvar Routes = exports.Routes = function () {\n\t    function Routes(serviceNamespace) {\n\t        _classCallCheck(this, Routes);\n\t\n\t        this.service = serviceNamespace;\n\t        this.inboundTypes = ['rest', 'socket', 'http', 'https', 'webSocket', 'api'];\n\t        this.routes = [];\n\t        this.routeCallbacks = [];\n\t        this.permissionMap = [];\n\t    }\n\t\n\t    _createClass(Routes, [{\n\t        key: 'add',\n\t        value: function add(inboundTypes, method, callback) {\n\t            this.routes.push(method);\n\t            this.routeCallbacks(callback);\n\t            var pos = this.routeCallbacks.length - 1;\n\t\n\t            inboundTypes.forEach(function (value) {\n\t                if (this.inboundTypes.indexOf(value) > -1) this.permissionMap[value].push(pos);else console.log('ERROR - Invalid Permission Encountered in Service: [' + this.service + '] Method: [' + method + ']');\n\t            });\n\t        }\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(method) {\n\t            var pos = this.routes.indexOf(method);\n\t            if (pos > -1) {\n\t                this.routeCallbacks[pos] = null;\n\t                this.routes[pos] = null;\n\t\n\t                this.inboundTypes.forEach(function (value) {\n\t                    if (this.permissionMap[value] != undefined && this.permissionMap[value] instanceof Array) {\n\t                        var keyPos = this.permissionMap[value].indexOf(pos);\n\t                        if (keyPos > -1) this.permissionMap[value].splice(keyPos, 1);\n\t                    }\n\t                });\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'importRoutes',\n\t        value: function importRoutes(routes) {\n\t            if (routes instanceof Array) {\n\t                for (var key in routes) {\n\t                    if (routes.hasOwnProperty(key)) {\n\t                        this.add(routes[key]['inboundTypes'], routes[key]['method'], routes[key]['callback']);\n\t                    }\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'route',\n\t        value: function route(inboundType, method, payload) {\n\t            var pos = this.routes.indexOf(method);\n\t            if (pos > -1) {\n\t                if (this.permissionMap[inboundType] != undefined && this.permissionMap[inboundType].length > 0 && this.permissionMap[inboundType].indexOf(pos) > -1) {\n\t                    var _routeCallbacks;\n\t\n\t                    //callback exists for method\n\t                    return (_routeCallbacks = this.routeCallbacks)[pos].apply(_routeCallbacks, [method, inboundType].concat(_toConsumableArray(payload)));\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    }]);\n\n\t    return Routes;\n\t}();\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\t/**\r\n\t * The Gorgon Container Service Class\r\n\t *\r\n\t * @note This class provides containers for services\r\n\t */\n\tvar GorgonContainerService = exports.GorgonContainerService = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function GorgonContainerService() {\n\t        _classCallCheck(this, GorgonContainerService);\n\t\n\t        this.containers = [];\n\t        this.containerMap = [];\n\t        this.name = \"Gorgon Container Service\";\n\t        this.type = \"Service\";\n\t    }\n\t\n\t    /**\r\n\t     * Adds a new service by creating a container and injecting the service and its location to the service map\r\n\t     *\r\n\t     * @param {object} service The service to tbe added\r\n\t     * @returns {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(GorgonContainerService, [{\n\t        key: \"add\",\n\t        value: function add(service) {\n\t            if (service.namespace != null && service.namespace != '' && this.containerMap.indexOf(service.namespace) == -1) {\n\t                this.containers.push(service);\n\t                this.containerMap.push(service.namespace);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Removes a service container by the service namespace\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace to be removed\r\n\t         * @returns {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: \"remove\",\n\t        value: function remove(serviceNamespace) {\n\t            if (this.containerMap.indexOf(serviceNamespace) > -1) {\n\t                var pos = this.containerMap.indexOf(serviceNamespace);\n\t                this.containers.splice(pos, 1);\n\t                this.containerMap.splice(pos, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Retrieves a service container by its namespace\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace\r\n\t         * @returns {*} Returns the service when located or false when not located\r\n\t         */\n\t\n\t    }, {\n\t        key: \"get\",\n\t        value: function get(serviceNamespace) {\n\t            if (this.containerMap.indexOf(serviceNamespace) > -1) return this.containers[this.containerMap.indexOf(serviceNamespace)];\n\t            return false;\n\t        }\n\t    }]);\n\t\n\t    return GorgonContainerService;\n\t}();\n\t\n\t/**\r\n\t * The gorgon service object\r\n\t *\r\n\t * @note Provides the service, default properties/methods used for constructing containers\r\n\t */\n\t\n\t\n\tvar GorgonService = exports.GorgonService = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function GorgonService() {\n\t        _classCallCheck(this, GorgonService);\n\t\n\t        /**\r\n\t         * The service id for the service\r\n\t         *\r\n\t         * @note The service Id is set when a service is added to the network layer and its service id is returned\r\n\t         *\r\n\t         * @type {null|number}\r\n\t         */\n\t        this.serviceId = null;\n\t\n\t        /**\r\n\t         * The service name\r\n\t         * @type {null|string}\r\n\t         */\n\t        this.name = null;\n\t\n\t        /**\r\n\t         * The service description\r\n\t         * @type {null|string}\r\n\t         */\n\t        this.description = null;\n\t\n\t        /**\r\n\t         * The service type\r\n\t         * @type {string}\r\n\t         */\n\t        this.type = 'Service';\n\t\n\t        /**\r\n\t         * The service router\r\n\t         * @type {null|Router}\r\n\t         */\n\t        this.router = null;\n\t\n\t        /**\r\n\t         * The list of inbound service types to connect\r\n\t         *\r\n\t         * @note These map 1:1 with this.ports\r\n\t         *\r\n\t         * @type {Array}\r\n\t         */\n\t        this.inboundTypes = [];\n\t\n\t        /**\r\n\t         * The list of inbound ports types to\r\n\t         *\r\n\t         * @note These map 1:1 with this.inboundTypes\r\n\t         *\r\n\t         * @type {Array}\r\n\t         */\n\t        this.ports = [];\n\t\n\t        /**\r\n\t         * The service permissions list\r\n\t         * @type {Array}\r\n\t         */\n\t        this.permissions = [];\n\t\n\t        /**\r\n\t         * The service networking configuration\r\n\t         *\r\n\t         * @note Most object will build this via this._setNetworking\r\n\t         *\r\n\t         * @type {Array}\r\n\t         */\n\t        this.networking = [];\n\t    }\n\t\n\t    /**\r\n\t     * Sets the networking property via the inboundTypes and ports properties\r\n\t     * @private\r\n\t     */\n\t\n\t\n\t    _createClass(GorgonService, [{\n\t        key: \"_setNetworking\",\n\t        value: function _setNetworking() {\n\t            if (this.inboundTypes instanceof Array && this.ports instanceof Array && this.inboundTypes.length == this.ports.length) {\n\t                for (var i = 0; i < this.inboundTypes.length; i++) {\n\t                    this.networking.push({ name: this.inboundTypes[i], port: this.ports[i] });\n\t                }\n\t            } else {\n\t                console.warn('GorgonService:_setNetworking - Missing or invalid networking for service ' + this.name);\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * Sets the serviceId for the service\r\n\t         * @param {number} serviceId\r\n\t         * @return {boolean} Returns true on completion\r\n\t         */\n\t\n\t    }, {\n\t        key: \"setServiceId\",\n\t        value: function setServiceId(serviceId) {\n\t            this.serviceId = serviceId;\n\t            return true;\n\t        }\n\t    }, {\n\t        key: \"apiRequest\",\n\t        value: function apiRequest(req, res, isRest) {\n\t            return null;\n\t        }\n\t    }, {\n\t        key: \"setWebSocketEvents\",\n\t        value: function setWebSocketEvents(socket) {\n\t            return null;\n\t        }\n\t    }]);\n\n\t    return GorgonService;\n\t}();\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Network = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _lodash = __webpack_require__(7);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tvar _middleware = __webpack_require__(8);\n\t\n\tvar _middleware2 = _interopRequireDefault(_middleware);\n\t\n\tvar _api = __webpack_require__(9);\n\t\n\tvar _api2 = _interopRequireDefault(_api);\n\t\n\tvar _http = __webpack_require__(11);\n\t\n\tvar _http2 = _interopRequireDefault(_http);\n\t\n\tvar _socket = __webpack_require__(12);\n\t\n\tvar _socket2 = _interopRequireDefault(_socket);\n\t\n\tvar _compression = __webpack_require__(13);\n\t\n\tvar _compression2 = _interopRequireDefault(_compression);\n\t\n\tvar _express = __webpack_require__(14);\n\t\n\tvar _express2 = _interopRequireDefault(_express);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\tvar instance = null;\n\t\n\t/**\r\n\t * The network controls singleton class\r\n\t *\r\n\t * @note Creates and maps the network components for services\r\n\t */\n\tvar Network = exports.Network = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function Network() {\n\t        _classCallCheck(this, Network);\n\t\n\t        if (!instance) {\n\t            this.middleware = new _middleware2.default();\n\t            this.services = [];\n\t            this.serviceMap = [];\n\t            this.components = [];\n\t            this.componentMap = [];\n\t            this.componentTypeMap = {\n\t                rest: [],\n\t                socket: [],\n\t                webSocket: [],\n\t                http: [],\n\t                api: []\n\t            };\n\t            this.portReservations = [];\n\t            this.portReservationNamespace = [];\n\t            this.activeServices = [];\n\t            instance = this;\n\t        } else return instance;\n\t    }\n\t\n\t    /**\r\n\t     * Adds a service to the network layer\r\n\t     *\r\n\t     * @param {object} service The service to be added\r\n\t     * @return {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(Network, [{\n\t        key: 'addService',\n\t        value: function addService(service) {\n\t            if (this.activeServices.indexOf(service.namespace) == -1) {\n\t                this.services.push(service);\n\t                this.serviceMap.push(service.namespace);\n\t                var serviceId = this.serviceMap.length - 1;\n\t                service.setServiceId(service);\n\t\n\t                /*\r\n\t                 * Add networking components\r\n\t                 */\n\t                if (service.networking instanceof Array) {\n\t                    for (var i = 0; i < service.networking.length; i++) {\n\t                        /**\r\n\t                         * @todo RESUME HERE\r\n\t                         */\n\t                        this.add(serviceId, service.namespace, service.networking[i].name, 'label', service.networking[i].port);\n\t                    }\n\t                    global.Logger.log('Network:addService', 200, 'Added services components: ' + service.name + ' for Service Namespace: ' + service.namespace + ' - ServiceId: ' + serviceId);\n\t                    return true;\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Removes the services network components\r\n\t         *\r\n\t         * @param {string} serviceNamespace The namespace of the service to be removed\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: 'removeService',\n\t        value: function removeService(serviceNamespace) {}\n\t\n\t        /**\r\n\t         * Adds a service network component\r\n\t         *\r\n\t         * @param {number} serviceId The serviceId for the service\r\n\t         * @param {string} serviceNamespace The service namespace for the component\r\n\t         * @param {string} type The network component type\r\n\t         * @param {string} label The label for the component\r\n\t         * @param {string|null} port The optional port for the network component\r\n\t         * @param {function} middleware The middleware to call for this service\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: 'add',\n\t        value: function add(serviceId, serviceNamespace, type, label, port, middleware) {\n\t            var created = false;\n\t            if (this.portReservations.indexOf(port) == -1 || port == null || port == undefined) {\n\t                switch (type) {\n\t                    default:\n\t                        global.Logger.log('Network:add', 400, 'Unable to load component type of: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\n\t                        return false;\n\t                        break;\n\t                    case 'rest':\n\t                        created = this._createRestComponent(serviceId, serviceNamespace, port, middleware);\n\t                        break;\n\t                    case 'http':\n\t                        created = this._createHttpComponent(serviceId, serviceNamespace, port, middleware);\n\t                        break;\n\t                    case 'socket':\n\t                        break;\n\t                    case 'webSocket':\n\t                        created = this._createWebSocketComponent(serviceId, serviceNamespace, port, middleware);\n\t                        break;\n\t                    case 'api':\n\t                        break;\n\t                }\n\t\n\t                this.componentMap.push(serviceNamespace + '-' + type + '-' + label + '-' + port);\n\t                //this.componentTypeMap[type].push(serviceNamespace + '-' + type + '-' + label + '-' + port);\n\t                global.Logger.log('Network:add', 200, 'Added network component: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Creates a REST network component\r\n\t         *\r\n\t         * @note A REST network component uses the http 1.1 stack\r\n\t         *\r\n\t         * @param {number} serviceId The services id from the service stack\r\n\t         * @param {string} namespace The namespace for the service\r\n\t         * @param {null|number} port The port for the service or null.\r\n\t         * @param {function} middleware The middleware to call for this service\r\n\t         * @returns {*} Returns true io the component is created\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_createRestComponent',\n\t        value: function _createRestComponent(serviceId, namespace, port, middleware) {\n\t            return this._createHttpComponent(serviceId, namespace, port, middleware, true);\n\t        }\n\t\n\t        /**\r\n\t         * Creates a http network component\r\n\t         *\r\n\t         * @note When a port is set for null if the component requires a port to be created the service will assign a random port.  The service will need to retrieve this information as needed.\r\n\t         * @note A http network component uses the http stack\r\n\t         *\r\n\t         * @param {number} serviceId The services id from the service stack\r\n\t         * @param {string} namespace The namespace for the service\r\n\t         * @param {null|number} port The port for the service or null.\r\n\t         * @param {function} middleware The middleware to call for this service\r\n\t         * @param {boolean|undefined} isRest Controls the rest interface flag when creating the http instance\r\n\t         * @returns {*} Returns true io the component is created\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_createHttpComponent',\n\t        value: function _createHttpComponent(serviceId, namespace, port, middleware, isRest) {\n\t            var setListener = true;\n\t            if (isRest == undefined) isRest = false;\n\t\n\t            var server = (0, _express2.default)();\n\t            server.use((0, _compression2.default)({}));\n\t\n\t            var component = server.all('/', function (req, res) {\n\t                this.middleware.callChannel('PRE_REQUEST', req);\n\t                this.middleware.callChannel('PRE_RESPONSE', res);\n\t                this.services[serviceId].serviceRequest(req, res, isRest === false ? 'http' : 'rest');\n\t            });\n\t\n\t            if (this.isPortReserved(port)) {\n\t                setListener = false;\n\t                var pos = this.portReservations.indexOf(port);\n\t                var serviceNamespace = this.portReservationNamespace[pos];\n\t                if (serviceNamespace != namespace) {\n\t                    global.Logger.log('Network:_createHttpComponent', 400, 'Unable to create new http component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace, { type: isRest === false ? 'http' : 'rest' });\n\t                    return false;\n\t                }\n\t            }\n\t\n\t            if (_lodash2.default.isFunction(middleware)) component.use(middleware);\n\t\n\t            if (setListener) {\n\t                component.listen(port, function () {\n\t                    global.Logger.log('Network:_createHttpComponent', 200, 'Created new http component - Mounted: ' + namespace + ' / ServiceId: ' + serviceId + ' - listening on port: ' + port, { type: isRest === false ? 'http' : 'rest' });\n\t                });\n\t            }\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: '_createWebSocketComponent',\n\t        value: function _createWebSocketComponent(serviceId, namespace, port, middleware) {\n\t            var _this = this;\n\t\n\t            var setListener = true;\n\t            if (this.isPortReserved(port)) {\n\t                setListener = false;\n\t                var pos = this.portReservations.indexOf(port);\n\t                var serviceNamespace = this.portReservationNamespace[pos];\n\t                if (serviceNamespace != namespace) {\n\t                    global.Logger.log('Network:_createRestComponent', 400, 'Unable to create component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace);\n\t                    return false;\n\t                }\n\t            }\n\t\n\t            //create webSocket component\n\t            var server = (0, _express2.default)();\n\t            server.use((0, _compression2.default)({}));\n\t\n\t            var httpServer = _http2.default.Server(server);\n\t            var webSocket = new _socket2.default(httpServer);\n\t\n\t            var users = [];\n\t            var sockets = {};\n\t\n\t            webSocket.use((0, _compression2.default)({}));\n\t            //app.use(express['static'](__dirname + '/../../client'));\n\t\n\t            webSocket.on('connection', function (socket) {\n\t                var userId = socket.handshake.query.userId;\n\t                var currentUser = {\n\t                    id: socket.id,\n\t                    userId: userId\n\t                };\n\t\n\t                if (findIndex(users, currentUser.id) > -1) {\n\t                    console.log('[INFO] User ID is already connected, kicking.');\n\t                    socket.disconnect();\n\t                } /*else if (!validNick(currentUser.nick)) {\r\n\t                   socket.disconnect();\r\n\t                  }*/else {\n\t                        console.log('[INFO] User ID: ' + currentUser.userId + ' connected!');\n\t                        sockets[currentUser.id] = socket;\n\t                        users.push(currentUser);\n\t                        webSocket.emit('User Join', { userId: currentUser.userId });\n\t                        console.log('[INFO] Total users: ' + users.length);\n\t                    }\n\t\n\t                socket.on('ding', function () {\n\t                    socket.emit('dong');\n\t                });\n\t\n\t                socket.on('disconnect', function () {\n\t                    if (findIndex(users, currentUser.id) > -1) users.splice(findIndex(users, currentUser.id), 1);\n\t                    console.log('[INFO] User ' + currentUser.userId + ' disconnected!');\n\t                    socket.broadcast.emit('userDisconnect', { userId: currentUser.userId });\n\t                });\n\t\n\t                //Bind the events contained within the service to this socket\n\t                _this.services[serviceId].setWebSocketEvents(socket);\n\t\n\t                /*\r\n\t                socket.on('action', (data) => {\r\n\t                    let _nick = sanitizeString(data.nick);\r\n\t                    let _message = sanitizeString(data.message);\r\n\t                    let date = new Date();\r\n\t                    let time = (\"0\" + date.getHours()).slice(-2) + (\"0\" + date.getMinutes()).slice(-2);\r\n\t                      console.log('[CHAT] [' + time + '] ' + _nick + ': ' + _message);\r\n\t                    socket.broadcast.emit('serverSendUserChat', {nick: _nick, message: _message});\r\n\t                });*/\n\t            });\n\t\n\t            httpServer.listen(port, function () {\n\t                console.log('[INFO] ' + namespace + ' Listening on *:' + port);\n\t            });\n\t\n\t            return true;\n\t        }\n\t    }, {\n\t        key: '_createSocketComponent',\n\t        value: function _createSocketComponent(serviceId, namespace) {}\n\t    }, {\n\t        key: '_createApiComponent',\n\t        value: function _createApiComponent(serviceId, namespace) {\n\t            return _api2.default.addApiNode(serviceId, namespace, this.services[serviceId].apiRequest);\n\t        }\n\t\n\t        /**\r\n\t         * Removes a service network component\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace for the component\r\n\t         * @param {string} type The network component type\r\n\t         * @param {string} label The label for the component\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(serviceNamespace, type, label) {}\n\t\n\t        /**\r\n\t         * Checks if the port is reserved\r\n\t         *\r\n\t         * @param {number} port The port number\r\n\t         * @returns {boolean} Returns true if the port is reserved false if it is not\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isPortReserved',\n\t        value: function isPortReserved(port) {\n\t            return this.portReservations.indexOf(port) > -1;\n\t        }\n\t    }]);\n\t\n\t    return Network;\n\t}();\n\t\n\tvar NetworkComponent = function () {\n\t    function NetworkComponent(type, label, port, service) {\n\t        _classCallCheck(this, NetworkComponent);\n\t\n\t        this.type = type;\n\t        this.label = label;\n\t        this.port = port;\n\t        this.service = service;\n\t        this.attr = {};\n\t    }\n\t\n\t    _createClass(NetworkComponent, [{\n\t        key: 'addAttribute',\n\t        value: function addAttribute(name, value) {\n\t            this.attr[name] = value;\n\t        }\n\t    }, {\n\t        key: 'removeAttribute',\n\t        value: function removeAttribute(name) {\n\t            delete this.attr[name];\n\t        }\n\t    }]);\n\t\n\t    return NetworkComponent;\n\t}();\n\t\n\t/*\r\n\t * Exports\r\n\t */\n\t\n\t\n\tvar NetworkStack = new Network();\n\texports.default = NetworkStack;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"lodash\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Middleware = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n\torgon the scripting capable network server for Node JS\r\n\tr\n\tpackage Gorgon\r\n\tauthor Ryan Rentfro\r\n\tlicense MIT\r\n\turl https://github.com/manufacturing-industry\r\n\tn\t\n\tvar _lodash = __webpack_require__(7);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * The middleware class\r\n\t *\r\n\t * Manages middleware for the system for specific system interactions\r\n\t *\r\n\t * @note Middleware are limited to 1 middleware assigned to a channel->service namespace->middleware\r\n\t * @note This means that you have 1 method assignable to a channel per service per middleware\r\n\t */\n\tvar Middleware = exports.Middleware = function () {\n\t    function Middleware() {\n\t        _classCallCheck(this, Middleware);\n\t\n\t        this.data = [];\n\t        this.serviceRegister = [];\n\t        this.dataMap = [];\n\t        this.channels = ['PRE_REQUEST', 'PRE_RESPONSE', 'PRE_API_CALL', 'POST_API_CALL'];\n\t        this.channels.forEach(function (value) {\n\t            this.data.push([]);\n\t            this.dataMap.push(value);\n\t        }, this);\n\t    }\n\t\n\t    /**\r\n\t     * Adds a middleware to the server based on a middleware channel\r\n\t     *\r\n\t     * @param {string} channel The label for the channel\r\n\t     * @param {string} serviceNamespace The service namespace for the middleware\r\n\t     * @param {string} middleware The class name of the middleware to be used\r\n\t     * @param {function} method The method to be called with the object when a channel call is made\r\n\t     * @returns {boolean}\r\n\t     */\n\t\n\t\n\t    _createClass(Middleware, [{\n\t        key: 'addMiddleware',\n\t        value: function addMiddleware(channel, serviceNamespace, middleware, method) {\n\t            var pos = this._getChannelId(channel);\n\t            if (pos > -1) {\n\t                var _middleware = this._getExistingMiddleware(channel[pos], serviceNamespace, _middleware, method);\n\t                if (_middleware === false) {\n\t                    this.channels[pos].push({ service: serviceNamespace, middleware: _middleware, method: method });\n\t                    global.Logger.log('Middleware:addMiddleware', 200, 'A new middleware was added for Service Namespace: ' + serviceNamespace + ' on Channel: ' + channel);\n\t                    return true;\n\t                } else {\n\t                    global.Logger.log('Middleware:addMiddleware', 300, 'Attempted to add duplicate middleware for Service Namespace: ' + serviceNamespace + ' on Channel: ' + channel + ' for middleware: ' + _middleware + ' with method: ' + method);\n\t                }\n\t            }\n\t            global.Logger.log('Middleware:addMiddleware', 400, 'Attempted to add a middleware for non-existent channel: ' + channel + ' - for Service Namespace: ' + serviceNamespace);\n\t        }\n\t\n\t        /**\r\n\t         * Removes a registered middleware from the server\r\n\t         *\r\n\t         * @param {string} channel\r\n\t         * @param {string} serviceNamespace\r\n\t         * @param {string} middleware\r\n\t         */\n\t\n\t    }, {\n\t        key: 'removeMiddleware',\n\t        value: function removeMiddleware(channel, serviceNamespace, middleware) {\n\t            var pos = this._getChannelId(channel);\n\t            if (pos > -1) {\n\t                /**\r\n\t                 * @todo Add Remove middleware code\r\n\t                 */\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * Calls a channels assigned middleware with the data and returns the data\r\n\t         *\r\n\t         * @param {string} channel The name of the channel\r\n\t         * @param {*} data The object or data to be passed to the middleware\r\n\t         * @returns {*|boolean} Returns the data from the middleware call for the data sent\r\n\t         */\n\t\n\t    }, {\n\t        key: 'callChannel',\n\t        value: function callChannel(channel, data) {\n\t            var pos = this._getChannelId(channel);\n\t            if (pos > -1) {\n\t                var middlewareList = this.channels[pos];\n\t                if (middlewareList instanceof Array) {\n\t                    middlewareList.foreach(function (value) {\n\t                        data = value.method(data);\n\t                    });\n\t                }\n\t            } else global.Logger.log('Middleware:callChannel', 400, 'Attempted to call a non-existent channel: ' + channel + ' - for Service Namespace: ' + serviceNamespace);\n\t            return data;\n\t        }\n\t\n\t        /**\r\n\t         * Checks for an existing middleware for a given channelObject, serviceNamespace, and middleware\r\n\t         *\r\n\t         * @note This method ensures we lock the assigned middleware for a given channel/service namespace/middleware\r\n\t         * @param {object} channelObject The channel object from the middleware data stack\r\n\t         * @param {string} serviceNamespace The service namespace for the middleware\r\n\t         * @param {string} middleware The class name of the middleware to be used\r\n\t         * @returns {boolean|array} Returns false if channel doesn't exist or the channel datas array if it does\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_getExistingMiddleware',\n\t        value: function _getExistingMiddleware(channelObject, serviceNamespace, middleware) {\n\t            var existing = _lodash2.default.find(channelObject, { 'serviceNamespace': serviceNamespace, 'middleware': middleware });\n\t            if (existing != undefined) return false;\n\t            return existing;\n\t        }\n\t\n\t        /**\r\n\t         * Locates a channel id from the channels name\r\n\t         *\r\n\t         * @param {string} name The name of the channel\r\n\t         * @returns {number} Returns the index of the channel (-1 if channel does not exist)\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_getChannelId',\n\t        value: function _getChannelId(name) {\n\t            return this.channels.indexOf(name.toUpper);\n\t        }\n\t    }]);\n\t\n\t    return Middleware;\n\t}();\n\t\n\t/**\r\n\t * Export the middleware class as default\r\n\t */\n\t\n\t\n\texports.default = Middleware;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Api = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _lodash = __webpack_require__(7);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tvar _moment = __webpack_require__(10);\n\t\n\tvar _moment2 = _interopRequireDefault(_moment);\n\t\n\tvar _middleware = __webpack_require__(8);\n\t\n\tvar _middleware2 = _interopRequireDefault(_middleware);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\tvar instance = null;\n\t\n\t/**\r\n\t * The api class\r\n\t *\r\n\t * @note This powers the extensible internal API\r\n\t */\n\tvar Api = exports.Api = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function Api() {\n\t        _classCallCheck(this, Api);\n\t\n\t        if (!instance) {\n\t            this.middleware = new _middleware2.default();\n\t            this.api = [];\n\t            this.apiMap = [];\n\t            this.serviceIdMap = [];\n\t            instance = this;\n\t        } else return instance;\n\t    }\n\t\n\t    _createClass(Api, [{\n\t        key: 'addApiNode',\n\t        value: function addApiNode(serviceId, namespace, node) {\n\t            if (this._getNodePos(namespace) === false) {\n\t                this.api.push(node);\n\t                this.apiMap.push(namespace);\n\t                this.serviceIdMap.push(serviceId);\n\t                global.Logger.log('Api:addApiNode', 200, 'Added a new API node for Service Namespace: ' + namespace);\n\t                return true;\n\t            }\n\t            global.Logger.log('Api:addApiNode', 400, 'Unable to create new api node. A node by for this service namespace already exists - Service Namespace: ' + namespace);\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'getApiNode',\n\t        value: function getApiNode(namespace) {\n\t            var pos = this._getNodePos(namespace);\n\t            if (pos > -1) return this.api[pos];\n\t            return false;\n\t        }\n\t    }, {\n\t        key: '_getNodePos',\n\t        value: function _getNodePos(namespace) {\n\t            var pos = this.apiMap.indexOf(namespace);\n\t            if (pos == -1) return false;\n\t            return this.apiMap[pos];\n\t        }\n\t    }, {\n\t        key: 'callApiNode',\n\t        value: function callApiNode(namespace, method, data) {\n\t            node = this.getApiNode(namespace);\n\t            if (node !== false) {\n\t                var apiCall = new ApiCall(method, data);\n\t                this.middleware.callChannel('PRE_API_CALL', apiCall);\n\t                data = apiCall.callApi(node, mehod);\n\t                this.middleware.callChannel('POST_API_CALL', data);\n\t                data.returned = (0, _moment2.default)();\n\t                return data;\n\t            }\n\t            this.Logger.log('Api:callApiNode', 400, 'Failed to call node service with namespace: ' + namespace + ' - no api node exists for this namespace.');\n\t            return false;\n\t        }\n\t    }]);\n\t\n\t    return Api;\n\t}();\n\t\n\t/**\r\n\t * This API call class\r\n\t *\r\n\t * @note This is the packaged call and its related data\r\n\t *\r\n\t */\n\t\n\t\n\tvar ApiCall = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function ApiCall(method, data) {\n\t        _classCallCheck(this, ApiCall);\n\t\n\t        this.method = method;\n\t        this.error = false;\n\t        this.errors = [];\n\t        this.data = data;\n\t        this.created = (0, _moment2.default)();\n\t        this.updated = null;\n\t        this.returned = null;\n\t    }\n\t\n\t    /**\r\n\t     * Calls the api for the call\r\n\t     *\r\n\t     * @param node\r\n\t     * @returns {*}\r\n\t     */\n\t\n\t\n\t    _createClass(ApiCall, [{\n\t        key: 'callApi',\n\t        value: function callApi(node) {\n\t            node(this);\n\t            this.updated = (0, _moment2.default)();\n\t            return this;\n\t        }\n\t    }]);\n\n\t    return ApiCall;\n\t}();\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"moment\");\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"http\");\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"socket.io\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"compression\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express\");\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Logger = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n\torgon the scripting capable network server for Node JS\r\n\tr\n\tpackage Gorgon\r\n\tauthor Ryan Rentfro\r\n\tlicense MIT\r\n\turl https://github.com/manufacturing-industry\r\n\tn\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar _fs = __webpack_require__(16);\n\t\n\tvar fs = _interopRequireWildcard(_fs);\n\t\n\tvar _moment = __webpack_require__(10);\n\t\n\tvar _moment2 = _interopRequireDefault(_moment);\n\t\n\tvar _os = __webpack_require__(17);\n\t\n\tvar os = _interopRequireWildcard(_os);\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _sanitizeFilename = __webpack_require__(18);\n\t\n\tvar _sanitizeFilename2 = _interopRequireDefault(_sanitizeFilename);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * The server logging class\r\n\t */\n\tvar Logger = exports.Logger = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function Logger() {\n\t        _classCallCheck(this, Logger);\n\t\n\t        this.fs = fs;\n\t        this.GorgonConfig = new _config.GorgonConfig();\n\t        this.sanitize = _sanitizeFilename2.default;\n\t        this.topicMap = [];\n\t        this.subscribers = [];\n\t        this.subscriberMap = [];\n\t        this.level = ['Debug', 'Info', 'Warn', 'Error', 'Critical', 'Fatal'];\n\t        this.levelKey = [100, 200, 300, 400, 500, 600];\n\t    }\n\t\n\t    /**\r\n\t     * Creates a new log and writes it to the corresponding file\r\n\t     *\r\n\t     * @param {string} location The location the log originated from\r\n\t     * @param {number} level The level of the log (from levelKey)\r\n\t     * @param {string} message The message for the log\r\n\t     * @param {*} values The values to include with the log\r\n\t     * @param {string} type The type for the log\r\n\t     * @return {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(Logger, [{\n\t        key: 'log',\n\t        value: function log(location, level, message, values, type) {\n\t            var logItem = new Log(location, level, message, values, type);\n\t            var logValues = logItem.values == null || logItem.values == undefined ? null : JSON.stringify(logItem.values);\n\t            var filename = logItem.created.format('YYYYMMDD') + '.log';\n\t\n\t            switch (logItem.type) {\n\t                default:\n\t                    filename = this.sanitize(logItem.type) + '-' + filename;\n\t                    break;\n\t                case undefined:\n\t                case true:\n\t                case 'sys':\n\t                    filename = 'sys-' + filename;\n\t                    break;\n\t                case 'error':\n\t                    filename = 'error-' + filename;\n\t                    break;\n\t            }\n\t\n\t            var logEntry = logItem.created.format() + ' ' + logItem.level + ' ' + logItem.location + ' [message=' + logItem.message + ']' + ' [values=' + logValues + ']' + os.EOL;\n\t\n\t            if (!this.fs.existsSync(this.GorgonConfig.storage.logs)) {\n\t                fs.mkdirSync(this.GorgonConfig.storage.logs);\n\t            }\n\t\n\t            this.fs.appendFile(this.GorgonConfig.storage.logs + filename, logEntry, 'utf8', function (err) {\n\t                if (err) {\n\t                    console.error(err);\n\t                    return false;\n\t                }\n\t            });\n\t            return true;\n\t        }\n\t    }]);\n\t\n\t    return Logger;\n\t}();\n\t\n\t/**\r\n\t * The server log class\r\n\t */\n\t\n\t\n\tvar Log =\n\t/**\r\n\t * Constructs the class\r\n\t *\r\n\t * @param {string} location The location the log originated from\r\n\t * @param {number} level The level of the log (from levelKey)\r\n\t * @param {string} message The message for the log\r\n\t * @param {*} values The values to include with the log\r\n\t * @param {string} type The type for the log\r\n\t */\n\tfunction Log(location, level, message, values, type) {\n\t    _classCallCheck(this, Log);\n\t\n\t    this.location = location;\n\t    this.level = level == null || level == undefined ? 100 : level;\n\t    this.message = message;\n\t    this.type = type == null || type == undefined ? 'sys' : type;\n\t    this.values = values == null || values == undefined ? null : values;\n\t    this.created = (0, _moment2.default)();\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"fs\");\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"os\");\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"sanitize-filename\");\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"colog\");\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** gorgon.min.js\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"moment\"), require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"os\"), require(\"sanitize-filename\"), require(\"colog\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gorgon\", [\"lodash\", \"moment\", \"http\", \"socket.io\", \"compression\", \"express\", \"fs\", \"os\", \"sanitize-filename\", \"colog\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gorgon\"] = factory(require(\"lodash\"), require(\"moment\"), require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"os\"), require(\"sanitize-filename\"), require(\"colog\"));\n\telse\n\t\troot[\"gorgon\"] = factory(root[\"lodash\"], root[\"moment\"], root[\"http\"], root[\"socket.io\"], root[\"compression\"], root[\"express\"], root[\"fs\"], root[\"os\"], root[\"sanitize-filename\"], root[\"colog\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_19__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 8b642b969a39190d691d\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport {GorgonConfig} from \"config/config\";\r\nimport {GorgonEnv} from \"config/env\";\r\nimport {GorgonContainerService} from 'service/index';\r\nimport {Logger} from 'component/log'\r\nimport _ from 'lodash'\r\nimport colog from 'colog'\r\n\r\n/*\r\n * Configure globals\r\n */\r\n\r\n/**\r\n * The global logger class\r\n *\r\n * @type {Logger}\r\n */\r\nglobal.Logger = new Logger();\r\n\r\n/**\r\n * The global console class\r\n *\r\n * @type {object} The colog instance\r\n */\r\nglobal.Console = colog;\r\n\r\n/**\r\n * The Gorgon class\r\n */\r\nclass Gorgon {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * The gorgon config for the server\r\n         * @type {GorgonConfig}\r\n         */\r\n        this.GorgonConfig = new GorgonConfig();\r\n\r\n        /**\r\n         * The gorgon server logger\r\n         * @type {Logger}\r\n         */\r\n        this.Logger = global.Logger;\r\n        this.Logger.log('Gorgon:initServer', 200, 'The Gorgon has been summoned - GORGON SERVER STARTING...');\r\n\r\n        /**\r\n         * The gorgon environment for the server\r\n         * @type {GorgonEnv}\r\n         */\r\n        this.GorgonEnv = new GorgonEnv();\r\n\r\n        /**\r\n         * The container service\r\n         * @type {GorgonContainerService}\r\n         */\r\n        this.GorgonContainerService = new GorgonContainerService();\r\n\r\n\r\n        /**\r\n         * The first style of CLI separator\r\n         * @type {string}\r\n         */\r\n        this.separator1 = '================================================';\r\n\r\n        /**\r\n         * The second style of CLI separator\r\n         * @type {string}\r\n         */\r\n        this.separator2 = '------------------------------------------------';\r\n    }\r\n\r\n    /**\r\n     * Initializes the server and loads the configured services from the environment\r\n     */\r\n    initServer()\r\n    {\r\n        this._bootstrap();\r\n        global.Console.log(this.separator2);\r\n        global.Console.question('Loading Services');\r\n        global.Console.log(this.separator2);\r\n        this.Logger.log('Gorgon:initServer', 200, 'The server was started successfully');\r\n\r\n        this.GorgonEnv.service.forEach(function(value){\r\n            let consoleWidth = 48;\r\n            let loaded = this.GorgonContainerService.add(value.service);\r\n            let status = loaded !== false;\r\n            //global.Console.log(value.namespace + ' - [ ' + loaded === false ? global.Console.error(status) : global.Console.success(status) + ' ]');\r\n            if (loaded)\r\n            {\r\n                let logExtLen = 6;\r\n                let spaceLength = consoleWidth - logExtLen - value.namespace.length - 2;\r\n                let spaceChar = _.repeat('.', spaceLength);\r\n                this.Logger.log('Gorgon:initServer', 200, 'Loaded service namespace: ' + value.namespace);\r\n                global.Console.log(value.namespace +' ' + spaceChar + ' [ ' + global.Console.color('OK', 'green') + ' ]');\r\n            } else {\r\n                let logExtLen = 10;\r\n                let spaceLength = consoleWidth - logExtLen - value.namespace.length - 2;\r\n                let spaceChar = _.repeat('.', spaceLength);\r\n                this.Logger.log('Gorgon:initServer', 400, 'Failed to load service with namespace: ' + value.namespace);\r\n                global.Console.log(value.namespace +' ' + spaceChar + ' [ ' + global.Console.color('FAILED', 'red') + ' ]');\r\n            }\r\n        }, this);\r\n\r\n        this.Logger.log('Gorgon:initServer', 200, 'Service Loading Completed');\r\n        global.Console.log(this.separator2);\r\n        global.Console.log('Server is now online...');\r\n    }\r\n\r\n    /**\r\n     * The CLI server bootstrap\r\n     *\r\n     * @private\r\n     */\r\n    _bootstrap()\r\n    {\r\n        global.Console.log('Gorgon Server - v' + this.GorgonConfig.data.version);\r\n        global.Console.log('Author: Ryan Rentfro <rrentfro at gmail dot com>');\r\n        global.Console.log('Project: https://github.com/manufacturing-industry/gorgon');\r\n        this._motd();\r\n        global.Console.log('Press cntrl+c to exit the server');\r\n    }\r\n\r\n    /**\r\n     * The server message of the day display\r\n     *\r\n     * @private\r\n     */\r\n    _motd()\r\n    {\r\n        global.Console.log(this.separator1);\r\n        global.Console.log(this.GorgonConfig.data.motd);\r\n        global.Console.log(this.separator1);\r\n    }\r\n}\r\n\r\n/*\r\n * Run the Gorgon Server\r\n */\r\nvar GorgonServer = new Gorgon();\r\nGorgonServer.initServer();\n\n\n/** WEBPACK FOOTER **\n ** ./src/gorgon.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/**\r\n * The Gorgon config class\r\n */\r\nexport class GorgonConfig\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * The servers default config data\r\n         * @type {{name: string, version: string}}\r\n         */\r\n        this.data = {\r\n            name: 'Gorgon Server',\r\n            version: '0.0.1 Pre-Alpha',\r\n            motd: 'This is the message of the day.'\r\n        };\r\n\r\n        /**\r\n         * The servers default storage config\r\n         *\r\n         * @note Contains the path pointers for base storage components\r\n         *\r\n         * @type {{logs: string}}\r\n         */\r\n        this.storage = {\r\n            logs: 'logs/'\r\n        };\r\n\r\n        /**\r\n         * The servers default layers controls\r\n         * @type {{server: boolean, cli: boolean, services: boolean}}\r\n         */\r\n        this.load = {\r\n            server: true,\r\n            cli: true,\r\n            services: true\r\n        };\r\n\r\n        /**\r\n         * Controls debugging\r\n         * @type {{enable: boolean}}\r\n         */\r\n        this.debug = {\r\n            enable: true\r\n        };\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/config/config.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nimport StatusService from '../service/status/index'\r\n\r\n/**\r\n * The Gorgon env class\r\n */\r\nexport class GorgonEnv\r\n{\r\n    constructor()\r\n    {\r\n        this.service = new StatusService();\r\n        this.service = [\r\n            {\r\n                sid: 0,\r\n                name: 'Status',\r\n                namespace: 'StatusService',\r\n                enable: true,\r\n                service: this.service }\r\n        ];\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/config/env.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport {Routes} from '../../component/routes'\r\nimport {GorgonService} from '../index';\r\nimport {StatusServiceConfig} from 'config/config';\r\nimport {Network} from '../../component/network'\r\n\r\nvar NetworkStack = new Network();\r\n\r\n/**\r\n * The status service\r\n *\r\n * @note Provides status on server configuration\r\n */\r\nclass StatusService extends GorgonService {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        /**\r\n         * The status service configuration\r\n         * @type {StatusServiceConfig}\r\n         */\r\n        this.config = StatusServiceConfig;\r\n\r\n        /**\r\n         * The service name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Status Service';\r\n\r\n        /**\r\n         * The service namespace\r\n         * @type {string}\r\n         */\r\n        this.namespace = 'StatusService';\r\n\r\n        /**\r\n         * The service description\r\n         * @type {string}\r\n         */\r\n        this.description = 'Provides service status';\r\n\r\n        /**\r\n         * The service type\r\n         * @type {string}\r\n         */\r\n        this.type = 'Service';\r\n\r\n        /**\r\n         * The service https control - controls how https works for the services exposed http endpoints\r\n         * @type {string|boolean} Can be enable, disable, true, false, or enforce\r\n         */\r\n        this.https = true;\r\n\r\n        /**\r\n         * The inbound types supported by the service\r\n         * @type {string[]}\r\n         */\r\n        this.inboundTypes = ['rest', 'socket', 'http', 'webSocket', 'api'];\r\n\r\n        /**\r\n         * The ports that map to the inbound types 1:1\r\n         * @type {number|null[]}\r\n         */\r\n        this.ports = [2600, null, 2680, 2688, null];\r\n\r\n        /**\r\n         * The router for the service\r\n         * @type {Routes}\r\n         */\r\n        this.router = new Routes(this.namepsace);\r\n\r\n        /**\r\n         * The permissions for the service\r\n         * @type {string[]} Can be internal and/or external\r\n         */\r\n        this.permissions = ['internal'];\r\n\r\n        /**\r\n         * Binds the services routes and networking\r\n         */\r\n        this.serviceBind();\r\n    }\r\n\r\n    /**\r\n     * The routes configuration for the service\r\n     *\r\n     * @note This is loaded into the classes router and the network stack\r\n     */\r\n    routes()\r\n    {\r\n        return {\r\n            'ServiceRequest':\r\n            {\r\n                inboundTypes: this.inboundTypes,\r\n                method: '/StatusServiceRequest',\r\n                callback: this.serviceRequest()\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    /**\r\n     * The service request method for http and rest services\r\n     *\r\n     * @note Provides the service request for the server\r\n     *\r\n     * @param {Request} req A request object\r\n     * @param {Object} res A response object\r\n     * @param {string} mode Controls if the call is http or rest\r\n     * @todo Add routing for handling inbound requests\r\n     */\r\n    serviceRequest(req, res, mode)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * The service api call method\r\n     *\r\n     *\r\n     * @param data\r\n     * @todo Add routing for handling inbound requests\r\n     */\r\n    apiRequest(data)\r\n    {\r\n\r\n    }\r\n\r\n    setWebSocketEvents(socket)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Binds the services routes and networking components\r\n     *\r\n     * @return {boolean} Returns true on completion\r\n     */\r\n    serviceBind()\r\n    {\r\n        /*\r\n         * Imports the routers routes from the class\r\n         */\r\n        this.router.importRoutes(this.routes());\r\n\r\n        /*\r\n         * Set the networking configuration for the class\r\n         */\r\n        this._setNetworking();\r\n\r\n        /*\r\n         * Add the service to the network\r\n         */\r\n        NetworkStack.addService(this);\r\n\r\n        return true;\r\n    }\r\n\r\n    serviceUnbind()\r\n    {\r\n        NetworkStack.removeService(this.namespace);\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * Exports\r\n */\r\nexport default StatusService;\n\n\n/** WEBPACK FOOTER **\n ** ./src/service/status/index.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nexport class Routes {\r\n    constructor(serviceNamespace) {\r\n        this.service = serviceNamespace;\r\n        this.inboundTypes = ['rest', 'socket', 'http', 'https', 'webSocket', 'api'];\r\n        this.routes = [];\r\n        this.routeCallbacks = [];\r\n        this.permissionMap = [];\r\n    }\r\n\r\n    add(inboundTypes, method, callback)\r\n    {\r\n        this.routes.push(method);\r\n        this.routeCallbacks(callback);\r\n        var pos = this.routeCallbacks.length - 1;\r\n\r\n        inboundTypes.forEach(function(value){\r\n            if (this.inboundTypes.indexOf(value) > -1) this.permissionMap[value].push(pos);\r\n            else console.log('ERROR - Invalid Permission Encountered in Service: [' + this.service + '] Method: [' + method + ']');\r\n        });\r\n    }\r\n\r\n    remove(method)\r\n    {\r\n        let pos = this.routes.indexOf(method);\r\n        if (pos > -1)\r\n        {\r\n            this.routeCallbacks[pos] = null;\r\n            this.routes[pos] = null;\r\n\r\n            this.inboundTypes.forEach(function(value)\r\n            {\r\n                if (this.permissionMap[value] != undefined && this.permissionMap[value] instanceof Array)\r\n                {\r\n                    let keyPos = this.permissionMap[value].indexOf(pos);\r\n                    if (keyPos > -1) this.permissionMap[value].splice(keyPos, 1);\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    importRoutes(routes)\r\n    {\r\n        if (routes instanceof Array)\r\n        {\r\n            for (var key in routes) {\r\n                if (routes.hasOwnProperty(key)) {\r\n                    this.add(routes[key]['inboundTypes'], routes[key]['method'], routes[key]['callback']);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    route(inboundType, method, payload)\r\n    {\r\n        let pos = this.routes.indexOf(method);\r\n        if (pos > -1)\r\n        {\r\n            if (this.permissionMap[inboundType] != undefined && this.permissionMap[inboundType].length > 0 && this.permissionMap[inboundType].indexOf(pos) > -1)\r\n            {\r\n                //callback exists for method\r\n                return this.routeCallbacks[pos](method, inboundType, ...payload);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/routes.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/**\r\n * The Gorgon Container Service Class\r\n *\r\n * @note This class provides containers for services\r\n */\r\nexport class GorgonContainerService {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        this.containers = [];\r\n        this.containerMap = [];\r\n        this.name = \"Gorgon Container Service\";\r\n        this.type = \"Service\";\r\n    }\r\n\r\n    /**\r\n     * Adds a new service by creating a container and injecting the service and its location to the service map\r\n     *\r\n     * @param {object} service The service to tbe added\r\n     * @returns {boolean} Returns true on completion and false on failure\r\n     */\r\n    add(service)\r\n    {\r\n        if (service.namespace != null && service.namespace != '' && this.containerMap.indexOf(service.namespace) == -1)\r\n        {\r\n            this.containers.push(service);\r\n            this.containerMap.push(service.namespace);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Removes a service container by the service namespace\r\n     *\r\n     * @param {string} serviceNamespace The service namespace to be removed\r\n     * @returns {boolean} Returns true on completion and false on failure\r\n     */\r\n    remove(serviceNamespace)\r\n    {\r\n        if (this.containerMap.indexOf(serviceNamespace) > -1)\r\n        {\r\n            let pos = this.containerMap.indexOf(serviceNamespace);\r\n            this.containers.splice(pos, 1);\r\n            this.containerMap.splice(pos, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a service container by its namespace\r\n     *\r\n     * @param {string} serviceNamespace The service namespace\r\n     * @returns {*} Returns the service when located or false when not located\r\n     */\r\n    get(serviceNamespace)\r\n    {\r\n        if (this.containerMap.indexOf(serviceNamespace) > -1) return this.containers[this.containerMap.indexOf(serviceNamespace)];\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * The gorgon service object\r\n *\r\n * @note Provides the service, default properties/methods used for constructing containers\r\n */\r\nexport class GorgonService\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * The service id for the service\r\n         *\r\n         * @note The service Id is set when a service is added to the network layer and its service id is returned\r\n         *\r\n         * @type {null|number}\r\n         */\r\n        this.serviceId = null;\r\n\r\n        /**\r\n         * The service name\r\n         * @type {null|string}\r\n         */\r\n        this.name = null;\r\n\r\n        /**\r\n         * The service description\r\n         * @type {null|string}\r\n         */\r\n        this.description = null;\r\n\r\n        /**\r\n         * The service type\r\n         * @type {string}\r\n         */\r\n        this.type = 'Service';\r\n\r\n        /**\r\n         * The service router\r\n         * @type {null|Router}\r\n         */\r\n        this.router = null;\r\n\r\n        /**\r\n         * The list of inbound service types to connect\r\n         *\r\n         * @note These map 1:1 with this.ports\r\n         *\r\n         * @type {Array}\r\n         */\r\n        this.inboundTypes = [];\r\n\r\n        /**\r\n         * The list of inbound ports types to\r\n         *\r\n         * @note These map 1:1 with this.inboundTypes\r\n         *\r\n         * @type {Array}\r\n         */\r\n        this.ports = [];\r\n\r\n        /**\r\n         * The service permissions list\r\n         * @type {Array}\r\n         */\r\n        this.permissions = [];\r\n\r\n        /**\r\n         * The service networking configuration\r\n         *\r\n         * @note Most object will build this via this._setNetworking\r\n         *\r\n         * @type {Array}\r\n         */\r\n        this.networking = [];\r\n    }\r\n\r\n    /**\r\n     * Sets the networking property via the inboundTypes and ports properties\r\n     * @private\r\n     */\r\n    _setNetworking()\r\n    {\r\n        if (this.inboundTypes instanceof Array && this.ports instanceof Array && this.inboundTypes.length == this.ports.length)\r\n        {\r\n            for(var i = 0; i < this.inboundTypes.length; i++)\r\n            {\r\n                this.networking.push({ name: this.inboundTypes[i], port: this.ports[i] })\r\n            }\r\n        } else {\r\n            console.warn('GorgonService:_setNetworking - Missing or invalid networking for service ' + this.name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the serviceId for the service\r\n     * @param {number} serviceId\r\n     * @return {boolean} Returns true on completion\r\n     */\r\n    setServiceId(serviceId)\r\n    {\r\n        this.serviceId = serviceId;\r\n        return true;\r\n    }\r\n\r\n    apiRequest(req, res, isRest)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    setWebSocketEvents(socket)\r\n    {\r\n        return null;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/service/index.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nlet instance = null;\r\nimport _ from 'lodash'\r\nimport Middleware from './middleware'\r\nimport Api from './api';\r\nimport http from 'http';\r\nimport SocketIO from 'socket.io';\r\nimport compression from 'compression';\r\nimport express from 'express';\r\n\r\n/**\r\n * The network controls singleton class\r\n *\r\n * @note Creates and maps the network components for services\r\n */\r\nexport class Network {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        if(!instance)\r\n        {\r\n            this.middleware = new Middleware();\r\n            this.services = [];\r\n            this.serviceMap = [];\r\n            this.components = [];\r\n            this.componentMap = [];\r\n            this.componentTypeMap = {\r\n                rest: [],\r\n                socket: [],\r\n                webSocket: [],\r\n                http: [],\r\n                api: []\r\n            };\r\n            this.portReservations = [];\r\n            this.portReservationNamespace = [];\r\n            this.activeServices = [];\r\n            instance = this;\r\n        } else return instance;\r\n    }\r\n\r\n    /**\r\n     * Adds a service to the network layer\r\n     *\r\n     * @param {object} service The service to be added\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    addService(service)\r\n    {\r\n        if (this.activeServices.indexOf(service.namespace) == -1)\r\n        {\r\n            this.services.push(service);\r\n            this.serviceMap.push(service.namespace);\r\n            let serviceId = this.serviceMap.length - 1;\r\n            service.setServiceId(service);\r\n\r\n            /*\r\n             * Add networking components\r\n             */\r\n            if (service.networking instanceof Array)\r\n            {\r\n                for(var i=0; i < service.networking.length; i++)\r\n                {\r\n                    /**\r\n                     * @todo RESUME HERE\r\n                     */\r\n                    this.add(serviceId, service.namespace, service.networking[i].name, 'label', service.networking[i].port);\r\n                }\r\n                global.Logger.log('Network:addService', 200, 'Added services components: ' + service.name + ' for Service Namespace: ' + service.namespace + ' - ServiceId: ' + serviceId);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Removes the services network components\r\n     *\r\n     * @param {string} serviceNamespace The namespace of the service to be removed\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    removeService(serviceNamespace)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds a service network component\r\n     *\r\n     * @param {number} serviceId The serviceId for the service\r\n     * @param {string} serviceNamespace The service namespace for the component\r\n     * @param {string} type The network component type\r\n     * @param {string} label The label for the component\r\n     * @param {string|null} port The optional port for the network component\r\n     * @param {function} middleware The middleware to call for this service\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    add(serviceId, serviceNamespace, type, label, port, middleware)\r\n    {\r\n        let created = false;\r\n        if (this.portReservations.indexOf(port) == -1 || port == null || port == undefined)\r\n        {\r\n            switch(type)\r\n            {\r\n                default:\r\n                    global.Logger.log('Network:add', 400, 'Unable to load component type of: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\r\n                    return false;\r\n                    break;\r\n                case 'rest':\r\n                    created = this._createRestComponent(serviceId, serviceNamespace, port, middleware);\r\n                    break;\r\n                case 'http':\r\n                    created = this._createHttpComponent(serviceId, serviceNamespace, port, middleware);\r\n                    break;\r\n                case 'socket':\r\n                    break;\r\n                case 'webSocket':\r\n                    created = this._createWebSocketComponent(serviceId, serviceNamespace, port, middleware);\r\n                    break;\r\n                case 'api':\r\n                    break;\r\n            }\r\n\r\n            this.componentMap.push(serviceNamespace + '-' + type + '-' + label + '-' + port);\r\n            //this.componentTypeMap[type].push(serviceNamespace + '-' + type + '-' + label + '-' + port);\r\n            global.Logger.log('Network:add', 200, 'Added network component: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Creates a REST network component\r\n     *\r\n     * @note A REST network component uses the http 1.1 stack\r\n     *\r\n     * @param {number} serviceId The services id from the service stack\r\n     * @param {string} namespace The namespace for the service\r\n     * @param {null|number} port The port for the service or null.\r\n     * @param {function} middleware The middleware to call for this service\r\n     * @returns {*} Returns true io the component is created\r\n     * @private\r\n     */\r\n    _createRestComponent(serviceId, namespace, port, middleware)\r\n    {\r\n        return this._createHttpComponent(serviceId, namespace, port, middleware, true)\r\n    }\r\n\r\n    /**\r\n     * Creates a http network component\r\n     *\r\n     * @note When a port is set for null if the component requires a port to be created the service will assign a random port.  The service will need to retrieve this information as needed.\r\n     * @note A http network component uses the http stack\r\n     *\r\n     * @param {number} serviceId The services id from the service stack\r\n     * @param {string} namespace The namespace for the service\r\n     * @param {null|number} port The port for the service or null.\r\n     * @param {function} middleware The middleware to call for this service\r\n     * @param {boolean|undefined} isRest Controls the rest interface flag when creating the http instance\r\n     * @returns {*} Returns true io the component is created\r\n     * @private\r\n     */\r\n    _createHttpComponent(serviceId, namespace, port, middleware, isRest)\r\n    {\r\n        let setListener = true;\r\n        if (isRest == undefined) isRest = false;\r\n\r\n\r\n        var server = express();\r\n        server.use(compression({}));\r\n\r\n        var component = server.all('/', function (req, res) {\r\n            this.middleware.callChannel('PRE_REQUEST', req);\r\n            this.middleware.callChannel('PRE_RESPONSE', res);\r\n            this.services[serviceId].serviceRequest(req, res, isRest === false ? 'http' : 'rest');\r\n        });\r\n\r\n        if (this.isPortReserved(port))\r\n        {\r\n            setListener = false;\r\n            let pos = this.portReservations.indexOf(port);\r\n            let serviceNamespace = this.portReservationNamespace[pos];\r\n            if (serviceNamespace != namespace)\r\n            {\r\n                global.Logger.log('Network:_createHttpComponent', 400, 'Unable to create new http component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace,\r\n                    { type: isRest === false ? 'http' : 'rest' });\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (_.isFunction(middleware)) component.use(middleware);\r\n\r\n        if (setListener)\r\n        {\r\n            component.listen(port, function () {\r\n                global.Logger.log('Network:_createHttpComponent', 200, 'Created new http component - Mounted: ' + namespace + ' / ServiceId: ' + serviceId + ' - listening on port: ' + port,\r\n                    { type: isRest === false ? 'http' : 'rest' });\r\n            });\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    _createWebSocketComponent(serviceId, namespace, port, middleware)\r\n    {\r\n        let setListener = true;\r\n        if (this.isPortReserved(port))\r\n        {\r\n            setListener = false;\r\n            let pos = this.portReservations.indexOf(port);\r\n            let serviceNamespace = this.portReservationNamespace[pos];\r\n            if (serviceNamespace != namespace)\r\n            {\r\n                global.Logger.log('Network:_createRestComponent', 400, 'Unable to create component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //create webSocket component\r\n        var server = express();\r\n        server.use(compression({}));\r\n\r\n        var httpServer = http.Server(server);\r\n        var webSocket = new SocketIO(httpServer);\r\n\r\n        let users = [];\r\n        let sockets = {};\r\n\r\n        webSocket.use(compression({}));\r\n        //app.use(express['static'](__dirname + '/../../client'));\r\n\r\n        webSocket.on('connection', (socket) => {\r\n            let userId = socket.handshake.query.userId;\r\n            let currentUser = {\r\n                id: socket.id,\r\n                userId: userId\r\n            };\r\n\r\n            if (findIndex(users, currentUser.id) > -1) {\r\n                console.log('[INFO] User ID is already connected, kicking.');\r\n                socket.disconnect();\r\n            }  /*else if (!validNick(currentUser.nick)) {\r\n                socket.disconnect();\r\n            }*/ else {\r\n                console.log('[INFO] User ID: ' + currentUser.userId + ' connected!');\r\n                sockets[currentUser.id] = socket;\r\n                users.push(currentUser);\r\n                webSocket.emit('User Join', { userId: currentUser.userId });\r\n                console.log('[INFO] Total users: ' + users.length);\r\n            }\r\n\r\n            socket.on('ding', () => {\r\n                socket.emit('dong');\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n                if (findIndex(users, currentUser.id) > -1) users.splice(findIndex(users, currentUser.id), 1);\r\n                console.log('[INFO] User ' + currentUser.userId + ' disconnected!');\r\n                socket.broadcast.emit('userDisconnect', { userId: currentUser.userId });\r\n            });\r\n\r\n            //Bind the events contained within the service to this socket\r\n            this.services[serviceId].setWebSocketEvents(socket);\r\n\r\n            /*\r\n            socket.on('action', (data) => {\r\n                let _nick = sanitizeString(data.nick);\r\n                let _message = sanitizeString(data.message);\r\n                let date = new Date();\r\n                let time = (\"0\" + date.getHours()).slice(-2) + (\"0\" + date.getMinutes()).slice(-2);\r\n\r\n                console.log('[CHAT] [' + time + '] ' + _nick + ': ' + _message);\r\n                socket.broadcast.emit('serverSendUserChat', {nick: _nick, message: _message});\r\n            });*/\r\n        });\r\n\r\n        httpServer.listen(port, () => {\r\n            console.log('[INFO] ' + namespace + ' Listening on *:' + port);\r\n        });\r\n\r\n\r\n\r\n        return true;\r\n    }\r\n\r\n    _createSocketComponent(serviceId, namespace)\r\n    {\r\n\r\n    }\r\n\r\n    _createApiComponent(serviceId, namespace)\r\n    {\r\n        return Api.addApiNode(serviceId, namespace, this.services[serviceId].apiRequest);\r\n    }\r\n\r\n    /**\r\n     * Removes a service network component\r\n     *\r\n     * @param {string} serviceNamespace The service namespace for the component\r\n     * @param {string} type The network component type\r\n     * @param {string} label The label for the component\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    remove(serviceNamespace, type, label)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Checks if the port is reserved\r\n     *\r\n     * @param {number} port The port number\r\n     * @returns {boolean} Returns true if the port is reserved false if it is not\r\n     */\r\n    isPortReserved(port)\r\n    {\r\n        return this.portReservations.indexOf(port) > -1;\r\n    }\r\n}\r\n\r\nclass NetworkComponent\r\n{\r\n    constructor(type, label, port, service)\r\n    {\r\n        this.type = type;\r\n        this.label = label;\r\n        this.port = port;\r\n        this.service = service;\r\n        this.attr = {};\r\n    }\r\n\r\n    addAttribute(name, value)\r\n    {\r\n        this.attr[name] = value;\r\n    }\r\n\r\n    removeAttribute(name)\r\n    {\r\n        delete this.attr[name];\r\n    }\r\n}\r\n\r\n/*\r\n * Exports\r\n */\r\nvar NetworkStack = new Network();\r\nexport default NetworkStack;\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/network.js\n **/","module.exports = require(\"lodash\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"lodash\"\n ** module id = 7\n ** module chunks = 0\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * The middleware class\r\n *\r\n * Manages middleware for the system for specific system interactions\r\n *\r\n * @note Middleware are limited to 1 middleware assigned to a channel->service namespace->middleware\r\n * @note This means that you have 1 method assignable to a channel per service per middleware\r\n */\r\nexport class Middleware {\r\n    constructor()\r\n    {\r\n        this.data = [];\r\n        this.serviceRegister = [];\r\n        this.dataMap = [];\r\n        this.channels = ['PRE_REQUEST', 'PRE_RESPONSE', 'PRE_API_CALL', 'POST_API_CALL'];\r\n        this.channels.forEach(function(value){\r\n            this.data.push([]);\r\n            this.dataMap.push(value);\r\n        }, this);\r\n    }\r\n\r\n    /**\r\n     * Adds a middleware to the server based on a middleware channel\r\n     *\r\n     * @param {string} channel The label for the channel\r\n     * @param {string} serviceNamespace The service namespace for the middleware\r\n     * @param {string} middleware The class name of the middleware to be used\r\n     * @param {function} method The method to be called with the object when a channel call is made\r\n     * @returns {boolean}\r\n     */\r\n    addMiddleware(channel, serviceNamespace, middleware, method)\r\n    {\r\n        let pos = this._getChannelId(channel);\r\n        if (pos > -1)\r\n        {\r\n            let middleware = this._getExistingMiddleware(channel[pos], serviceNamespace, middleware, method);\r\n            if (middleware === false)\r\n            {\r\n                this.channels[pos].push({ service: serviceNamespace, middleware: middleware, method: method });\r\n                global.Logger.log('Middleware:addMiddleware', 200, 'A new middleware was added for Service Namespace: ' + serviceNamespace + ' on Channel: ' + channel);\r\n                return true;\r\n            } else {\r\n                global.Logger.log('Middleware:addMiddleware', 300, 'Attempted to add duplicate middleware for Service Namespace: ' + serviceNamespace + ' on Channel: ' + channel + ' for middleware: ' + middleware + ' with method: ' + method);\r\n            }\r\n        }\r\n        global.Logger.log('Middleware:addMiddleware', 400, 'Attempted to add a middleware for non-existent channel: ' + channel + ' - for Service Namespace: ' + serviceNamespace);\r\n    }\r\n\r\n    /**\r\n     * Removes a registered middleware from the server\r\n     *\r\n     * @param {string} channel\r\n     * @param {string} serviceNamespace\r\n     * @param {string} middleware\r\n     */\r\n    removeMiddleware(channel, serviceNamespace, middleware)\r\n    {\r\n        let pos = this._getChannelId(channel);\r\n        if (pos > -1)\r\n        {\r\n            /**\r\n             * @todo Add Remove middleware code\r\n             */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls a channels assigned middleware with the data and returns the data\r\n     *\r\n     * @param {string} channel The name of the channel\r\n     * @param {*} data The object or data to be passed to the middleware\r\n     * @returns {*|boolean} Returns the data from the middleware call for the data sent\r\n     */\r\n    callChannel(channel, data)\r\n    {\r\n        let pos = this._getChannelId(channel);\r\n        if (pos > -1)\r\n        {\r\n            let middlewareList = this.channels[pos];\r\n            if (middlewareList instanceof Array)\r\n            {\r\n                middlewareList.foreach(function(value){\r\n                    data = value.method(data);\r\n                });\r\n            }\r\n        } else global.Logger.log('Middleware:callChannel', 400, 'Attempted to call a non-existent channel: ' + channel + ' - for Service Namespace: ' + serviceNamespace);\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Checks for an existing middleware for a given channelObject, serviceNamespace, and middleware\r\n     *\r\n     * @note This method ensures we lock the assigned middleware for a given channel/service namespace/middleware\r\n     * @param {object} channelObject The channel object from the middleware data stack\r\n     * @param {string} serviceNamespace The service namespace for the middleware\r\n     * @param {string} middleware The class name of the middleware to be used\r\n     * @returns {boolean|array} Returns false if channel doesn't exist or the channel datas array if it does\r\n     * @private\r\n     */\r\n    _getExistingMiddleware(channelObject, serviceNamespace, middleware)\r\n    {\r\n        let existing = _.find(channelObject, { 'serviceNamespace': serviceNamespace, 'middleware': middleware });\r\n        if (existing != undefined) return false;\r\n        return existing;\r\n    }\r\n\r\n    /**\r\n     * Locates a channel id from the channels name\r\n     *\r\n     * @param {string} name The name of the channel\r\n     * @returns {number} Returns the index of the channel (-1 if channel does not exist)\r\n     * @private\r\n     */\r\n    _getChannelId(name)\r\n    {\r\n        return this.channels.indexOf(name.toUpper);\r\n    }\r\n}\r\n\r\n/**\r\n * Export the middleware class as default\r\n */\r\nexport default Middleware;\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/middleware.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nlet instance = null;\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport Middleware from './middleware';\r\n\r\n/**\r\n * The api class\r\n *\r\n * @note This powers the extensible internal API\r\n */\r\nexport class Api\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        if(!instance)\r\n        {\r\n            this.middleware = new Middleware();\r\n            this.api = [];\r\n            this.apiMap = [];\r\n            this.serviceIdMap = [];\r\n            instance = this;\r\n        } else return instance;\r\n    }\r\n\r\n    addApiNode(serviceId, namespace, node)\r\n    {\r\n        if (this._getNodePos(namespace) === false)\r\n        {\r\n            this.api.push(node);\r\n            this.apiMap.push(namespace);\r\n            this.serviceIdMap.push(serviceId);\r\n            global.Logger.log('Api:addApiNode', 200, 'Added a new API node for Service Namespace: ' + namespace);\r\n            return true;\r\n        }\r\n        global.Logger.log('Api:addApiNode', 400, 'Unable to create new api node. A node by for this service namespace already exists - Service Namespace: ' + namespace);\r\n        return false;\r\n    }\r\n\r\n    getApiNode(namespace)\r\n    {\r\n        let pos = this._getNodePos(namespace);\r\n        if (pos > -1) return this.api[pos];\r\n        return false;\r\n    }\r\n\r\n    _getNodePos(namespace)\r\n    {\r\n        let pos = this.apiMap.indexOf(namespace);\r\n        if (pos == -1) return false;\r\n        return this.apiMap[pos];\r\n    }\r\n\r\n    callApiNode(namespace, method, data)\r\n    {\r\n        node = this.getApiNode(namespace);\r\n        if (node !== false)\r\n        {\r\n            let apiCall = new ApiCall(method, data);\r\n            this.middleware.callChannel('PRE_API_CALL', apiCall);\r\n            data = apiCall.callApi(node, mehod);\r\n            this.middleware.callChannel('POST_API_CALL', data);\r\n            data.returned = moment();\r\n            return data;\r\n        }\r\n        this.Logger.log('Api:callApiNode', 400, 'Failed to call node service with namespace: ' + namespace + ' - no api node exists for this namespace.');\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * This API call class\r\n *\r\n * @note This is the packaged call and its related data\r\n *\r\n */\r\nclass ApiCall\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor(method, data)\r\n    {\r\n        this.method = method;\r\n        this.error = false;\r\n        this.errors = [];\r\n        this.data = data;\r\n        this.created = moment();\r\n        this.updated = null;\r\n        this.returned = null;\r\n    }\r\n\r\n    /**\r\n     * Calls the api for the call\r\n     *\r\n     * @param node\r\n     * @returns {*}\r\n     */\r\n    callApi(node)\r\n    {\r\n        node(this);\r\n        this.updated = moment();\r\n        return this;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/api.js\n **/","module.exports = require(\"moment\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"moment\"\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = require(\"http\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"http\"\n ** module id = 11\n ** module chunks = 0\n **/","module.exports = require(\"socket.io\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"socket.io\"\n ** module id = 12\n ** module chunks = 0\n **/","module.exports = require(\"compression\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"compression\"\n ** module id = 13\n ** module chunks = 0\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 14\n ** module chunks = 0\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport * as fs from 'fs';\r\nimport moment from 'moment';\r\nimport * as os from 'os';\r\nimport {GorgonConfig} from '../config/config'\r\nimport sanitize from 'sanitize-filename';\r\n\r\n/**\r\n * The server logging class\r\n */\r\nexport class Logger {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        this.fs = fs;\r\n        this.GorgonConfig = new GorgonConfig();\r\n        this.sanitize = sanitize;\r\n        this.topicMap = [];\r\n        this.subscribers = [];\r\n        this.subscriberMap = [];\r\n        this.level = ['Debug', 'Info', 'Warn', 'Error', 'Critical', 'Fatal'];\r\n        this.levelKey = [100, 200, 300, 400, 500, 600];\r\n    }\r\n\r\n    /**\r\n     * Creates a new log and writes it to the corresponding file\r\n     *\r\n     * @param {string} location The location the log originated from\r\n     * @param {number} level The level of the log (from levelKey)\r\n     * @param {string} message The message for the log\r\n     * @param {*} values The values to include with the log\r\n     * @param {string} type The type for the log\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    log(location, level, message, values, type)\r\n    {\r\n        var logItem = new Log(location, level, message, values, type);\r\n        var logValues = logItem.values == null || logItem.values == undefined ? null : JSON.stringify(logItem.values);\r\n        var filename = logItem.created.format('YYYYMMDD') + '.log';\r\n\r\n        switch(logItem.type)\r\n        {\r\n            default:\r\n                filename = this.sanitize(logItem.type) + '-' + filename;\r\n                break;\r\n            case undefined:\r\n            case true:\r\n            case 'sys':\r\n                filename = 'sys-' + filename;\r\n                break;\r\n            case 'error':\r\n                filename = 'error-' + filename;\r\n                break;\r\n        }\r\n\r\n        var logEntry = logItem.created.format() + ' ' + logItem.level + ' ' + logItem.location + ' [message=' + logItem.message + ']' + ' [values=' + logValues + ']' + os.EOL;\r\n\r\n        if (!this.fs.existsSync(this.GorgonConfig.storage.logs)){\r\n            fs.mkdirSync(this.GorgonConfig.storage.logs);\r\n        }\r\n\r\n        this.fs.appendFile(this.GorgonConfig.storage.logs + filename, logEntry, 'utf8',  function (err)\r\n        {\r\n            if (err) {\r\n                console.error(err);\r\n                return false;\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * The server log class\r\n */\r\nclass Log {\r\n    /**\r\n     * Constructs the class\r\n     *\r\n     * @param {string} location The location the log originated from\r\n     * @param {number} level The level of the log (from levelKey)\r\n     * @param {string} message The message for the log\r\n     * @param {*} values The values to include with the log\r\n     * @param {string} type The type for the log\r\n     */\r\n    constructor(location, level, message, values, type)\r\n    {\r\n        this.location = location;\r\n        this.level = level == null || level == undefined ? 100 : level;\r\n        this.message = message;\r\n        this.type = type == null || type == undefined ? 'sys' : type;\r\n        this.values = values == null || values == undefined ? null : values;\r\n        this.created = moment();\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/log.js\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 16\n ** module chunks = 0\n **/","module.exports = require(\"os\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"os\"\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = require(\"sanitize-filename\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"sanitize-filename\"\n ** module id = 18\n ** module chunks = 0\n **/","module.exports = require(\"colog\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"colog\"\n ** module id = 19\n ** module chunks = 0\n **/"],"sourceRoot":""}
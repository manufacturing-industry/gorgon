{"version":3,"sources":["webpack:///gorgon.min.js","webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 7a308837fd1b7cb72c10","webpack:///./src/gorgon.js","webpack:///./src/config/config.js","webpack:///./src/config/env.js","webpack:///./src/service/status/index.js","webpack:///./src/component/routes.js","webpack:///./src/service/index.js","webpack:///./src/component/network.js","webpack:///external \"lodash\"","webpack:///./src/component/middleware.js","webpack:///./src/component/api.js","webpack:///external \"moment\"","webpack:///external \"net\"","webpack:///external \"http\"","webpack:///external \"socket.io\"","webpack:///external \"compression\"","webpack:///external \"express\"","webpack:///./src/component/log.js","webpack:///external \"fs\"","webpack:///external \"os\"","webpack:///external \"sanitize-filename\"","webpack:///external \"colog\""],"names":["require","install","root","factory","exports","module","define","amd","this","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_10__","__WEBPACK_EXTERNAL_MODULE_11__","__WEBPACK_EXTERNAL_MODULE_12__","__WEBPACK_EXTERNAL_MODULE_13__","__WEBPACK_EXTERNAL_MODULE_14__","__WEBPACK_EXTERNAL_MODULE_15__","__WEBPACK_EXTERNAL_MODULE_17__","__WEBPACK_EXTERNAL_MODULE_18__","__WEBPACK_EXTERNAL_MODULE_19__","__WEBPACK_EXTERNAL_MODULE_20__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_config","_env","_index","_log","_lodash","_lodash2","_colog","_colog2","global","Logger","Console","status","type","message","log","color","Gorgon","GorgonConfig","GorgonEnv","GorgonContainerService","separator1","separator2","value","_bootstrap","question","service","forEach","consoleWidth","add","logExtLen","spaceLength","namespace","spaceChar","repeat","_logExtLen","_spaceLength","_spaceChar","data","version","_motd","motd","GorgonServer","initServer","name","storage","logs","load","server","cli","services","debug","enable","undefined","_index2","sid","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_routes","_network","NetworkStack","Network","StatusService","_GorgonService","_this","getPrototypeOf","config","StatusServiceConfig","description","https","inboundTypes","ports","router","Routes","namepsace","permissions","serviceBind","ServiceRequest","method","callback","serviceRequest","req","res","mode","socket","importRoutes","routes","_setNetworking","addService","removeService","GorgonService","_toConsumableArray","arr","Array","isArray","arr2","from","serviceNamespace","routeCallbacks","permissionMap","push","pos","indexOf","console","keyPos","splice","hasOwnProperty","inboundType","payload","_routeCallbacks","apply","concat","containers","containerMap","serviceId","networking","port","warn","isRest","_middleware","_middleware2","_api","_net","_net2","_http","_http2","_socket","_socket2","_compression","_compression2","_express","_express2","middleware","serviceMap","components","componentMap","componentTypeMap","rest","webSocket","http","api","Api","portReservations","portReservationNamespace","activeServices","setServiceId","label","created","_createRestComponent","_createHttpComponent","_createSocketComponent","_createWebSocketComponent","_createApiComponent","setListener","use","component","all","callChannel","isPortReserved","isFunction","listen","address","httpServer","Server","users","sockets","on","userId","handshake","query","currentUser","findIndex","disconnect","emit","broadcast","setWebSocketEvents","createServer","write","pipe","err","addApiNode","apiRequest","Middleware","serviceRegister","dataMap","channels","channel","_getChannelId","_getExistingMiddleware","middlewareList","foreach","channelObject","existing","find","toUpper","_moment","_moment2","ApiCall","apiMap","serviceIdMap","reserved","node","_getNodePos","_isReservedNamespace","getApiNode","apiCall","callApi","mehod","returned","error","errors","updated","_interopRequireWildcard","newObj","_fs","fs","_os","os","_sanitizeFilename","_sanitizeFilename2","Log","sanitize","topicMap","subscribers","subscriberMap","level","levelKey","location","values","logItem","logValues","JSON","stringify","filename","format","logEntry","EOL","existsSync","mkdirSync","appendFile"],"mappings":"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","file":"gorgon.min.js","sourcesContent":["require(\"source-map-support\").install();\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"moment\"), require(\"net\"), require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"os\"), require(\"sanitize-filename\"), require(\"colog\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gorgon\", [\"lodash\", \"moment\", \"net\", \"http\", \"socket.io\", \"compression\", \"express\", \"fs\", \"os\", \"sanitize-filename\", \"colog\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gorgon\"] = factory(require(\"lodash\"), require(\"moment\"), require(\"net\"), require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"os\"), require(\"sanitize-filename\"), require(\"colog\"));\n\telse\n\t\troot[\"gorgon\"] = factory(root[\"lodash\"], root[\"moment\"], root[\"net\"], root[\"http\"], root[\"socket.io\"], root[\"compression\"], root[\"express\"], root[\"fs\"], root[\"os\"], root[\"sanitize-filename\"], root[\"colog\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_20__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n\torgon the scripting capable network server for Node JS\r\n\tr\n\tpackage Gorgon\r\n\tauthor Ryan Rentfro\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * @license MIT\r\n\turl https://github.com/manufacturing-industry\r\n\tn\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _env = __webpack_require__(2);\n\t\n\tvar _index = __webpack_require__(5);\n\t\n\tvar _log = __webpack_require__(16);\n\t\n\tvar _lodash = __webpack_require__(7);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tvar _colog = __webpack_require__(20);\n\t\n\tvar _colog2 = _interopRequireDefault(_colog);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*\r\n\t * Configure globals\r\n\t */\n\t\n\t/**\r\n\t * The global logger class\r\n\t *\r\n\t * @type {Logger}\r\n\t */\n\tglobal.Logger = new _log.Logger();\n\t\n\t/**\r\n\t * The global console class\r\n\t *\r\n\t * @type {object} The colog instance\r\n\t */\n\tglobal.Console = _colog2.default;\n\t\n\tglobal.Console.status = function (type, message) {\n\t  switch (type) {\n\t    default:\n\t    case 'info':\n\t      global.Console.log('[ ' + global.Console.color('INFO', 'yellow') + ' ] ' + message);\n\t      break;\n\t    case 'notice':\n\t      global.Console.log('[ ' + global.Console.color('NOTICE', 'cyan') + ' ] ' + message);\n\t      break;\n\t    case 'error':\n\t      global.Console.log('[ ' + global.Console.color('ERROR', 'red') + ' ] ' + message);\n\t      break;\n\t  }\n\t};\n\t\n\t/**\r\n\t * The Gorgon class\r\n\t */\n\t\n\tvar Gorgon = function () {\n\t  /**\r\n\t   * Constructs the class\r\n\t   */\n\t  function Gorgon() {\n\t    _classCallCheck(this, Gorgon);\n\t\n\t    /**\r\n\t     * The gorgon config for the server\r\n\t     * @type {GorgonConfig}\r\n\t     */\n\t    this.GorgonConfig = new _config.GorgonConfig();\n\t\n\t    /**\r\n\t     * The gorgon server logger\r\n\t     * @type {Logger}\r\n\t     */\n\t    this.Logger = global.Logger;\n\t    this.Logger.log('Gorgon:initServer', 200, 'The Gorgon has been summoned - GORGON SERVER STARTING...');\n\t\n\t    /**\r\n\t     * The gorgon environment for the server\r\n\t     * @type {GorgonEnv}\r\n\t     */\n\t    this.GorgonEnv = new _env.GorgonEnv();\n\t\n\t    /**\r\n\t     * The container service\r\n\t     * @type {GorgonContainerService}\r\n\t     */\n\t    this.GorgonContainerService = new _index.GorgonContainerService();\n\t\n\t    /**\r\n\t     * The first style of CLI separator\r\n\t     * @type {string}\r\n\t     */\n\t    this.separator1 = '================================================';\n\t\n\t    /**\r\n\t     * The second style of CLI separator\r\n\t     * @type {string}\r\n\t     */\n\t    this.separator2 = '------------------------------------------------';\n\t  }\n\t\n\t  /**\r\n\t   * Initializes the server and loads the configured services from the environment\r\n\t   */\n\t\n\t\n\t  _createClass(Gorgon, [{\n\t    key: \"initServer\",\n\t    value: function initServer() {\n\t      this._bootstrap();\n\t      global.Console.log(this.separator2);\n\t      global.Console.question('Loading Services');\n\t      global.Console.log(this.separator2);\n\t      this.Logger.log('Gorgon:initServer', 200, 'The server was started successfully');\n\t\n\t      this.GorgonEnv.service.forEach(function (value) {\n\t        var consoleWidth = 48;\n\t        var loaded = this.GorgonContainerService.add(value.service);\n\t        if (loaded) {\n\t          var logExtLen = 6;\n\t          var spaceLength = consoleWidth - logExtLen - value.namespace.length - 2;\n\t          var spaceChar = _lodash2.default.repeat('.', spaceLength);\n\t          this.Logger.log('Gorgon:initServer', 200, 'Loaded service namespace: ' + value.namespace);\n\t          global.Console.log(value.namespace + ' ' + spaceChar + ' [ ' + global.Console.color('OK', 'green') + ' ]');\n\t        } else {\n\t          var _logExtLen = 10;\n\t          var _spaceLength = consoleWidth - _logExtLen - value.namespace.length - 2;\n\t          var _spaceChar = _lodash2.default.repeat('.', _spaceLength);\n\t          this.Logger.log('Gorgon:initServer', 400, 'Failed to load service with namespace: ' + value.namespace);\n\t          global.Console.log(value.namespace + ' ' + _spaceChar + ' [ ' + global.Console.color('FAILED', 'red') + ' ]');\n\t        }\n\t      }, this);\n\t\n\t      this.Logger.log('Gorgon:initServer', 200, 'Service Loading Completed');\n\t      global.Console.log(this.separator2);\n\t      global.Console.log('Server is now online...');\n\t    }\n\t\n\t    /**\r\n\t     * The CLI server bootstrap\r\n\t     *\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: \"_bootstrap\",\n\t    value: function _bootstrap() {\n\t      global.Console.log(global.Console.color('Gorgon Server - v' + this.GorgonConfig.data.version, 'green'));\n\t      global.Console.log('Author: Ryan Rentfro <rrentfro at gmail dot com>');\n\t      global.Console.log('Project: https://github.com/manufacturing-industry/gorgon');\n\t      this._motd();\n\t      global.Console.log('Press ' + global.Console.color('cntrl+c', 'yellow') + ' to exit the server');\n\t    }\n\t\n\t    /**\r\n\t     * The server message of the day display\r\n\t     *\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: \"_motd\",\n\t    value: function _motd() {\n\t      global.Console.log(this.separator1);\n\t      global.Console.log(global.Console.color(this.GorgonConfig.data.motd, 'yellow'));\n\t      global.Console.log(this.separator1);\n\t    }\n\t  }]);\n\t\n\t  return Gorgon;\n\t}();\n\t\n\t/*\r\n\t * Run the Gorgon Server\r\n\t */\n\t\n\t\n\tvar GorgonServer = new Gorgon();\n\tGorgonServer.initServer();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\t/**\r\n\t * The Gorgon config class\r\n\t */\n\tvar GorgonConfig =\n\t/**\r\n\t * Constructs the class\r\n\t */\n\texports.GorgonConfig = function GorgonConfig() {\n\t  _classCallCheck(this, GorgonConfig);\n\t\n\t  /**\r\n\t   * The servers default config data\r\n\t   * @type {{name: string, version: string}}\r\n\t   */\n\t  this.data = {\n\t    name: 'Gorgon Server',\n\t    version: '0.0.1 Pre-Alpha',\n\t    motd: 'This is the message of the day.'\n\t  };\n\t\n\t  /**\r\n\t   * The servers default storage config\r\n\t   *\r\n\t   * @note Contains the path pointers for base storage components\r\n\t   *\r\n\t   * @type {{logs: string}}\r\n\t   */\n\t  this.storage = {\n\t    logs: 'logs/'\n\t  };\n\t\n\t  /**\r\n\t   * The servers default layers controls\r\n\t   * @type {{server: boolean, cli: boolean, services: boolean}}\r\n\t   */\n\t  this.load = {\n\t    server: true,\n\t    cli: true,\n\t    services: true\n\t  };\n\t\n\t  /**\r\n\t   * Controls debugging\r\n\t   * @type {{enable: boolean}}\r\n\t   */\n\t  this.debug = {\n\t    enable: true\n\t  };\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.GorgonEnv = undefined;\n\t\n\tvar _index = __webpack_require__(3);\n\t\n\tvar _index2 = _interopRequireDefault(_index);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\r\n\t                                                                                                                                                           * Gorgon the scripting capable network server for Node JS\r\n\t                                                                                                                                                           *\r\n\t                                                                                                                                                           * @package Gorgon\r\n\t                                                                                                                                                           * @author Ryan Rentfro\r\n\t                                                                                                                                                           * @license MIT\r\n\t                                                                                                                                                           * @url https://github.com/manufacturing-industry\r\n\t                                                                                                                                                           */\n\t\n\t/**\r\n\t * The Gorgon env class\r\n\t */\n\tvar GorgonEnv = exports.GorgonEnv = function GorgonEnv() {\n\t    _classCallCheck(this, GorgonEnv);\n\t\n\t    this.service = new _index2.default();\n\t    this.service = [{\n\t        sid: 0,\n\t        name: 'Status',\n\t        namespace: 'StatusService',\n\t        enable: true,\n\t        service: this.service }];\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _routes = __webpack_require__(4);\n\t\n\tvar _index = __webpack_require__(5);\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _network = __webpack_require__(6);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Gorgon the scripting capable network server for Node JS\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @package Gorgon\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Ryan Rentfro\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license MIT\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @url https://github.com/manufacturing-industry\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar NetworkStack = new _network.Network();\n\t\n\t/**\r\n\t * The status service\r\n\t *\r\n\t * @note Provides status on server configuration\r\n\t */\n\t\n\tvar StatusService = function (_GorgonService) {\n\t  _inherits(StatusService, _GorgonService);\n\t\n\t  /**\r\n\t   * Constructs the class\r\n\t   */\n\t  function StatusService() {\n\t    _classCallCheck(this, StatusService);\n\t\n\t    /**\r\n\t     * The status service configuration\r\n\t     * @type {StatusServiceConfig}\r\n\t     */\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(StatusService).call(this));\n\t\n\t    _this.config = _config.StatusServiceConfig;\n\t\n\t    /**\r\n\t     * The service name\r\n\t     * @type {string}\r\n\t     */\n\t    _this.name = 'Status Service';\n\t\n\t    /**\r\n\t     * The service namespace\r\n\t     * @type {string}\r\n\t     */\n\t    _this.namespace = 'StatusService';\n\t\n\t    /**\r\n\t     * The service description\r\n\t     * @type {string}\r\n\t     */\n\t    _this.description = 'Provides service status';\n\t\n\t    /**\r\n\t     * The service type\r\n\t     * @type {string}\r\n\t     */\n\t    _this.type = 'Service';\n\t\n\t    /**\r\n\t     * The service https control - controls how https works for the services exposed http endpoints\r\n\t     * @type {string|boolean} Can be enable, disable, true, false, or enforce\r\n\t     */\n\t    _this.https = true;\n\t\n\t    /**\r\n\t     * The inbound types supported by the service\r\n\t     * @type {string[]}\r\n\t     */\n\t    _this.inboundTypes = ['rest', 'socket', 'http', 'webSocket', 'api'];\n\t\n\t    /**\r\n\t     * The ports that map to the inbound types 1:1\r\n\t     * @type {number|null[]}\r\n\t     */\n\t    _this.ports = [2600, null, 2680, 2688, null];\n\t\n\t    /**\r\n\t     * The router for the service\r\n\t     * @type {Routes}\r\n\t     */\n\t    _this.router = new _routes.Routes(_this.namepsace);\n\t\n\t    /**\r\n\t     * The permissions for the service\r\n\t     * @type {string[]} Can be internal and/or external\r\n\t     */\n\t    _this.permissions = ['internal'];\n\t\n\t    /**\r\n\t     * Binds the services routes and networking\r\n\t     */\n\t    _this.serviceBind();\n\t    return _this;\n\t  }\n\t\n\t  /**\r\n\t   * The routes configuration for the service\r\n\t   *\r\n\t   * @note This is loaded into the classes router and the network stack\r\n\t   */\n\t\n\t\n\t  _createClass(StatusService, [{\n\t    key: 'routes',\n\t    value: function routes() {\n\t      return {\n\t        'ServiceRequest': {\n\t          inboundTypes: this.inboundTypes,\n\t          method: '/StatusServiceRequest',\n\t          callback: this.serviceRequest()\n\t        }\n\t      };\n\t    }\n\t\n\t    /**\r\n\t     * The service request method for http and rest services\r\n\t     *\r\n\t     * @note Provides the service request for the server\r\n\t     *\r\n\t     * @param {Request} req A request object\r\n\t     * @param {Object} res A response object\r\n\t     * @param {string} mode Controls if the call is http or rest\r\n\t     * @todo Add routing for handling inbound requests\r\n\t     */\n\t\n\t  }, {\n\t    key: 'serviceRequest',\n\t    value: function serviceRequest(req, res, mode) {}\n\t\n\t    /**\r\n\t     * The service api call method\r\n\t     *\r\n\t     *\r\n\t     * @param data\r\n\t     * @todo Add routing for handling inbound requests\r\n\t     */\n\t\n\t  }, {\n\t    key: 'apiRequest',\n\t    value: function apiRequest(data) {}\n\t  }, {\n\t    key: 'setWebSocketEvents',\n\t    value: function setWebSocketEvents(socket) {}\n\t\n\t    /**\r\n\t     * Binds the services routes and networking components\r\n\t     *\r\n\t     * @return {boolean} Returns true on completion\r\n\t     */\n\t\n\t  }, {\n\t    key: 'serviceBind',\n\t    value: function serviceBind() {\n\t      /*\r\n\t       * Imports the routers routes from the class\r\n\t       */\n\t      this.router.importRoutes(this.routes());\n\t\n\t      /*\r\n\t       * Set the networking configuration for the class\r\n\t       */\n\t      this._setNetworking();\n\t\n\t      /*\r\n\t       * Add the service to the network\r\n\t       */\n\t      NetworkStack.addService(this);\n\t\n\t      return true;\n\t    }\n\t  }, {\n\t    key: 'serviceUnbind',\n\t    value: function serviceUnbind() {\n\t      NetworkStack.removeService(this.namespace);\n\t    }\n\t  }]);\n\t\n\t  return StatusService;\n\t}(_index.GorgonService);\n\t\n\t/*\r\n\t * Exports\r\n\t */\n\t\n\t\n\texports.default = StatusService;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\tvar Routes = exports.Routes = function () {\n\t    function Routes(serviceNamespace) {\n\t        _classCallCheck(this, Routes);\n\t\n\t        this.service = serviceNamespace;\n\t        this.inboundTypes = ['rest', 'socket', 'http', 'https', 'webSocket', 'api'];\n\t        this.routes = [];\n\t        this.routeCallbacks = [];\n\t        this.permissionMap = [];\n\t    }\n\t\n\t    _createClass(Routes, [{\n\t        key: 'add',\n\t        value: function add(inboundTypes, method, callback) {\n\t            this.routes.push(method);\n\t            this.routeCallbacks(callback);\n\t            var pos = this.routeCallbacks.length - 1;\n\t\n\t            inboundTypes.forEach(function (value) {\n\t                if (this.inboundTypes.indexOf(value) > -1) this.permissionMap[value].push(pos);else console.log('ERROR - Invalid Permission Encountered in Service: [' + this.service + '] Method: [' + method + ']');\n\t            });\n\t        }\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(method) {\n\t            var pos = this.routes.indexOf(method);\n\t            if (pos > -1) {\n\t                this.routeCallbacks[pos] = null;\n\t                this.routes[pos] = null;\n\t\n\t                this.inboundTypes.forEach(function (value) {\n\t                    if (this.permissionMap[value] != undefined && this.permissionMap[value] instanceof Array) {\n\t                        var keyPos = this.permissionMap[value].indexOf(pos);\n\t                        if (keyPos > -1) this.permissionMap[value].splice(keyPos, 1);\n\t                    }\n\t                });\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'importRoutes',\n\t        value: function importRoutes(routes) {\n\t            if (routes instanceof Array) {\n\t                for (var key in routes) {\n\t                    if (routes.hasOwnProperty(key)) {\n\t                        this.add(routes[key]['inboundTypes'], routes[key]['method'], routes[key]['callback']);\n\t                    }\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'route',\n\t        value: function route(inboundType, method, payload) {\n\t            var pos = this.routes.indexOf(method);\n\t            if (pos > -1) {\n\t                if (this.permissionMap[inboundType] != undefined && this.permissionMap[inboundType].length > 0 && this.permissionMap[inboundType].indexOf(pos) > -1) {\n\t                    var _routeCallbacks;\n\t\n\t                    //callback exists for method\n\t                    return (_routeCallbacks = this.routeCallbacks)[pos].apply(_routeCallbacks, [method, inboundType].concat(_toConsumableArray(payload)));\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t    }]);\n\n\t    return Routes;\n\t}();\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\t/**\r\n\t * The Gorgon Container Service Class\r\n\t *\r\n\t * @note This class provides containers for services\r\n\t */\n\tvar GorgonContainerService = exports.GorgonContainerService = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function GorgonContainerService() {\n\t        _classCallCheck(this, GorgonContainerService);\n\t\n\t        this.containers = [];\n\t        this.containerMap = [];\n\t        this.name = \"Gorgon Container Service\";\n\t        this.type = \"Service\";\n\t    }\n\t\n\t    /**\r\n\t     * Adds a new service by creating a container and injecting the service and its location to the service map\r\n\t     *\r\n\t     * @param {object} service The service to tbe added\r\n\t     * @returns {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(GorgonContainerService, [{\n\t        key: \"add\",\n\t        value: function add(service) {\n\t            if (service.namespace != null && service.namespace != '' && this.containerMap.indexOf(service.namespace) == -1) {\n\t                this.containers.push(service);\n\t                this.containerMap.push(service.namespace);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Removes a service container by the service namespace\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace to be removed\r\n\t         * @returns {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: \"remove\",\n\t        value: function remove(serviceNamespace) {\n\t            if (this.containerMap.indexOf(serviceNamespace) > -1) {\n\t                var pos = this.containerMap.indexOf(serviceNamespace);\n\t                this.containers.splice(pos, 1);\n\t                this.containerMap.splice(pos, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Retrieves a service container by its namespace\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace\r\n\t         * @returns {*} Returns the service when located or false when not located\r\n\t         */\n\t\n\t    }, {\n\t        key: \"get\",\n\t        value: function get(serviceNamespace) {\n\t            if (this.containerMap.indexOf(serviceNamespace) > -1) return this.containers[this.containerMap.indexOf(serviceNamespace)];\n\t            return false;\n\t        }\n\t    }]);\n\t\n\t    return GorgonContainerService;\n\t}();\n\t\n\t/**\r\n\t * The gorgon service object\r\n\t *\r\n\t * @note Provides the service, default properties/methods used for constructing containers\r\n\t */\n\t\n\t\n\tvar GorgonService = exports.GorgonService = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function GorgonService() {\n\t        _classCallCheck(this, GorgonService);\n\t\n\t        /**\r\n\t         * The service id for the service\r\n\t         *\r\n\t         * @note The service Id is set when a service is added to the network layer and its service id is returned\r\n\t         *\r\n\t         * @type {null|number}\r\n\t         */\n\t        this.serviceId = null;\n\t\n\t        /**\r\n\t         * The service name\r\n\t         * @type {null|string}\r\n\t         */\n\t        this.name = null;\n\t\n\t        /**\r\n\t         * The service description\r\n\t         * @type {null|string}\r\n\t         */\n\t        this.description = null;\n\t\n\t        /**\r\n\t         * The service type\r\n\t         * @type {string}\r\n\t         */\n\t        this.type = 'Service';\n\t\n\t        /**\r\n\t         * The service router\r\n\t         * @type {null|Router}\r\n\t         */\n\t        this.router = null;\n\t\n\t        /**\r\n\t         * The list of inbound service types to connect\r\n\t         *\r\n\t         * @note These map 1:1 with this.ports\r\n\t         *\r\n\t         * @type {Array}\r\n\t         */\n\t        this.inboundTypes = [];\n\t\n\t        /**\r\n\t         * The list of inbound ports types to\r\n\t         *\r\n\t         * @note These map 1:1 with this.inboundTypes\r\n\t         *\r\n\t         * @type {Array}\r\n\t         */\n\t        this.ports = [];\n\t\n\t        /**\r\n\t         * The service permissions list\r\n\t         * @type {Array}\r\n\t         */\n\t        this.permissions = [];\n\t\n\t        /**\r\n\t         * The service networking configuration\r\n\t         *\r\n\t         * @note Most object will build this via this._setNetworking\r\n\t         *\r\n\t         * @type {Array}\r\n\t         */\n\t        this.networking = [];\n\t    }\n\t\n\t    /**\r\n\t     * Sets the networking property via the inboundTypes and ports properties\r\n\t     * @private\r\n\t     */\n\t\n\t\n\t    _createClass(GorgonService, [{\n\t        key: \"_setNetworking\",\n\t        value: function _setNetworking() {\n\t            if (this.inboundTypes instanceof Array && this.ports instanceof Array && this.inboundTypes.length == this.ports.length) {\n\t                for (var i = 0; i < this.inboundTypes.length; i++) {\n\t                    this.networking.push({ name: this.inboundTypes[i], port: this.ports[i] });\n\t                }\n\t            } else {\n\t                console.warn('GorgonService:_setNetworking - Missing or invalid networking for service ' + this.name);\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * Sets the serviceId for the service\r\n\t         * @param {number} serviceId\r\n\t         * @return {boolean} Returns true on completion\r\n\t         */\n\t\n\t    }, {\n\t        key: \"setServiceId\",\n\t        value: function setServiceId(serviceId) {\n\t            this.serviceId = serviceId;\n\t            return true;\n\t        }\n\t    }, {\n\t        key: \"apiRequest\",\n\t        value: function apiRequest(req, res, isRest) {\n\t            return null;\n\t        }\n\t    }, {\n\t        key: \"setWebSocketEvents\",\n\t        value: function setWebSocketEvents(socket) {\n\t            return null;\n\t        }\n\t    }]);\n\n\t    return GorgonService;\n\t}();\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Network = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _lodash = __webpack_require__(7);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tvar _middleware = __webpack_require__(8);\n\t\n\tvar _middleware2 = _interopRequireDefault(_middleware);\n\t\n\tvar _api = __webpack_require__(9);\n\t\n\tvar _net = __webpack_require__(11);\n\t\n\tvar _net2 = _interopRequireDefault(_net);\n\t\n\tvar _http = __webpack_require__(12);\n\t\n\tvar _http2 = _interopRequireDefault(_http);\n\t\n\tvar _socket = __webpack_require__(13);\n\t\n\tvar _socket2 = _interopRequireDefault(_socket);\n\t\n\tvar _compression = __webpack_require__(14);\n\t\n\tvar _compression2 = _interopRequireDefault(_compression);\n\t\n\tvar _express = __webpack_require__(15);\n\t\n\tvar _express2 = _interopRequireDefault(_express);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\tvar instance = null;\n\t\n\t/**\r\n\t * The network controls singleton class\r\n\t *\r\n\t * @note Creates and maps the network components for services\r\n\t */\n\tvar Network = exports.Network = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function Network() {\n\t        _classCallCheck(this, Network);\n\t\n\t        if (!instance) {\n\t            /**\r\n\t             * The middleware for the class\r\n\t             * @type {Middleware}\r\n\t             */\n\t            this.middleware = new _middleware2.default();\n\t\n\t            /**\r\n\t             * The services stack\r\n\t             * @type {Array}\r\n\t             */\n\t            this.services = [];\n\t\n\t            /**\r\n\t             * The service stack map\r\n\t             * @type {Array}\r\n\t             */\n\t            this.serviceMap = [];\n\t\n\t            /**\r\n\t             * The component collection\r\n\t             * @type {Array}\r\n\t             */\n\t            this.components = [];\n\t\n\t            /**\r\n\t             * The component collection map\r\n\t             * @type {Array}\r\n\t             */\n\t            this.componentMap = [];\n\t\n\t            /**\r\n\t             * The component collection type map\r\n\t             * @type {{rest: Array, socket: Array, webSocket: Array, http: Array, api: Array}}\r\n\t             */\n\t            this.componentTypeMap = {\n\t                rest: [],\n\t                socket: [],\n\t                webSocket: [],\n\t                http: [],\n\t                api: []\n\t            };\n\t\n\t            /**\r\n\t             * The network API control\r\n\t             * @type {Api}\r\n\t             */\n\t            this.api = new _api.Api();\n\t\n\t            /**\r\n\t             * The port reservation list\r\n\t             * @type {Array}\r\n\t             */\n\t            this.portReservations = [];\n\t\n\t            /**\r\n\t             * The port reservation namespace list\r\n\t             * @type {Array}\r\n\t             */\n\t            this.portReservationNamespace = [];\n\t\n\t            /**\r\n\t             * The active service in the network stack\r\n\t             * @type {Array}\r\n\t             */\n\t            this.activeServices = [];\n\t\n\t            instance = this;\n\t        } else return instance;\n\t    }\n\t\n\t    /**\r\n\t     * Adds a service to the network layer\r\n\t     *\r\n\t     * @param {object} service The service to be added\r\n\t     * @return {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(Network, [{\n\t        key: 'addService',\n\t        value: function addService(service) {\n\t            if (this.activeServices.indexOf(service.namespace) == -1) {\n\t                this.services.push(service);\n\t                this.serviceMap.push(service.namespace);\n\t                var serviceId = this.serviceMap.length - 1;\n\t                service.setServiceId(service);\n\t\n\t                /*\r\n\t                 * Add networking components\r\n\t                 */\n\t                if (service.networking instanceof Array) {\n\t                    for (var i = 0; i < service.networking.length; i++) {\n\t                        /**\r\n\t                         * @todo RESUME HERE\r\n\t                         */\n\t                        this.add(serviceId, service.namespace, service.networking[i].name, 'label', service.networking[i].port);\n\t                    }\n\t                    global.Logger.log('Network:addService', 200, 'Added services components: ' + service.name + ' for Service Namespace: ' + service.namespace + ' - ServiceId: ' + serviceId);\n\t                    return true;\n\t                }\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Removes the services network components\r\n\t         *\r\n\t         * @param {string} serviceNamespace The namespace of the service to be removed\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: 'removeService',\n\t        value: function removeService(serviceNamespace) {}\n\t\n\t        /**\r\n\t         * Adds a service network component\r\n\t         *\r\n\t         * @param {number} serviceId The serviceId for the service\r\n\t         * @param {string} serviceNamespace The service namespace for the component\r\n\t         * @param {string} type The network component type\r\n\t         * @param {string} label The label for the component\r\n\t         * @param {string|null} port The optional port for the network component\r\n\t         * @param {function} middleware The middleware to call for this service\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         */\n\t\n\t    }, {\n\t        key: 'add',\n\t        value: function add(serviceId, serviceNamespace, type, label, port, middleware) {\n\t            var created = false;\n\t            var createPort = null;\n\t            if (this.portReservations.indexOf(port) == -1 || port == null || port == undefined) {\n\t                if (port == undefined || port == null) port = 0;\n\t                switch (type) {\n\t                    default:\n\t                        global.Logger.log('Network:add', 400, 'Unable to load component type of: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\n\t                        return false;\n\t                        break;\n\t                    case 'rest':\n\t                        created = this._createRestComponent(serviceId, serviceNamespace, port, middleware);\n\t                        break;\n\t                    case 'http':\n\t                        created = this._createHttpComponent(serviceId, serviceNamespace, port, middleware);\n\t                        break;\n\t                    case 'socket':\n\t                        created = this._createSocketComponent(serviceId, serviceNamespace, port);\n\t                        break;\n\t                    case 'webSocket':\n\t                        created = this._createWebSocketComponent(serviceId, serviceNamespace, port, middleware);\n\t                        break;\n\t                    case 'api':\n\t                        created = this._createApiComponent(serviceId, serviceNamespace);\n\t                        break;\n\t                }\n\t\n\t                if (created === false) return false;\n\t                this.components.push(created);\n\t                this.componentMap.push(serviceNamespace + '-' + type + '-' + label + '-' + port);\n\t                this.componentTypeMap[type].push(serviceNamespace + '-' + type + '-' + port);\n\t                global.Logger.log('Network:add', 200, 'Added network component: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        /**\r\n\t         * Creates a REST network component\r\n\t         *\r\n\t         * @note A REST network component uses the http 1.1 stack (express)\r\n\t         *\r\n\t         * @param {number} serviceId The services id from the service stack\r\n\t         * @param {string} namespace The namespace for the service\r\n\t         * @param {null|number} port The port for the service or null.\r\n\t         * @param {function} middleware The middleware to call for this service\r\n\t         * @returns {*} Returns component if created or false on failure\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_createRestComponent',\n\t        value: function _createRestComponent(serviceId, namespace, port, middleware) {\n\t            return this._createHttpComponent(serviceId, namespace, port, middleware, true);\n\t        }\n\t\n\t        /**\r\n\t         * Creates a http network component\r\n\t         *\r\n\t         * @note When a port is set for null if the component requires a port to be created the service will assign a random port.  The service will need to retrieve this information as needed.\r\n\t         * @note A http network component uses the http 1.1 stack (express)\r\n\t         *\r\n\t         * @param {number} serviceId The services id from the service stack\r\n\t         * @param {string} namespace The namespace for the service\r\n\t         * @param {null|number} port The port for the service or null.\r\n\t         * @param {function} middleware The middleware to call for this service\r\n\t         * @param {boolean|undefined} isRest Controls the rest interface flag when creating the http instance\r\n\t         * @returns {*} Returns component if created or false on failure\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_createHttpComponent',\n\t        value: function _createHttpComponent(serviceId, namespace, port, middleware, isRest) {\n\t            var setListener = true;\n\t            if (isRest == undefined) isRest = false;\n\t\n\t            var server = (0, _express2.default)();\n\t            server.use((0, _compression2.default)({}));\n\t\n\t            var component = server.all('/', function (req, res) {\n\t                this.middleware.callChannel('PRE_REQUEST', req);\n\t                this.middleware.callChannel('PRE_RESPONSE', res);\n\t                this.services[serviceId].serviceRequest(req, res, isRest === false ? 'http' : 'rest');\n\t            });\n\t\n\t            if (this.isPortReserved(port)) {\n\t                setListener = false;\n\t                var pos = this.portReservations.indexOf(port);\n\t                var serviceNamespace = this.portReservationNamespace[pos];\n\t                if (serviceNamespace != namespace) {\n\t                    global.Logger.log('Network:_createHttpComponent', 400, 'Unable to create new http component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace, { type: isRest === false ? 'http' : 'rest' });\n\t                    return false;\n\t                }\n\t            }\n\t\n\t            if (_lodash2.default.isFunction(middleware)) component.use(middleware);\n\t\n\t            if (setListener) {\n\t                component.listen(port, function () {\n\t                    global.Console.status('info', 'Http Bound Type: ' + (isRest === false ? 'http' : 'rest') + ' - Service Namespace: ' + namespace + ' - Port: ' + server.address().port);\n\t                    global.Logger.log('Network:_createHttpComponent', 200, 'Created new http component - Mounted: ' + namespace + ' / ServiceId: ' + serviceId + ' - listening on port: ' + server.address().port, { type: isRest === false ? 'http' : 'rest' });\n\t                });\n\t            }\n\t\n\t            return component;\n\t        }\n\t\n\t        /**\r\n\t         * Creates a web socket network component\r\n\t         *\r\n\t         * @note Uses socket io/express for web socket server\r\n\t         *\r\n\t         * @param {number} serviceId The services id from the service stack\r\n\t         * @param {string} namespace The namespace for the service\r\n\t         * @param {number} port The port for the web socket component\r\n\t         * @param {function} middleware The middleware to call for this service\r\n\t         * @returns {*} Returns component if created or false on failure\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_createWebSocketComponent',\n\t        value: function _createWebSocketComponent(serviceId, namespace, port, middleware) {\n\t            var _this = this;\n\t\n\t            var setListener = true;\n\t            if (this.isPortReserved(port)) {\n\t                setListener = false;\n\t                var pos = this.portReservations.indexOf(port);\n\t                var serviceNamespace = this.portReservationNamespace[pos];\n\t                if (serviceNamespace != namespace) {\n\t                    global.Logger.log('Network:_createRestComponent', 400, 'Unable to create component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace);\n\t                    return false;\n\t                }\n\t            }\n\t\n\t            //create webSocket component\n\t            var server = (0, _express2.default)();\n\t            server.use((0, _compression2.default)({}));\n\t\n\t            var httpServer = _http2.default.Server(server);\n\t            var webSocket = new _socket2.default(httpServer);\n\t\n\t            var users = [];\n\t            var sockets = {};\n\t\n\t            webSocket.use((0, _compression2.default)({}));\n\t            //app.use(express['static'](__dirname + '/../../client'));\n\t\n\t            webSocket.on('connection', function (socket) {\n\t                var userId = socket.handshake.query.userId;\n\t                var currentUser = {\n\t                    id: socket.id,\n\t                    userId: userId\n\t                };\n\t\n\t                if (findIndex(users, currentUser.id) > -1) {\n\t                    console.log('[INFO] User ID is already connected, kicking.');\n\t                    socket.disconnect();\n\t                } /*else if (!validNick(currentUser.nick)) {\r\n\t                   socket.disconnect();\r\n\t                  }*/else {\n\t                        console.log('[INFO] User ID: ' + currentUser.userId + ' connected!');\n\t                        sockets[currentUser.id] = socket;\n\t                        users.push(currentUser);\n\t                        webSocket.emit('User Join', { userId: currentUser.userId });\n\t                        console.log('[INFO] Total users: ' + users.length);\n\t                    }\n\t\n\t                socket.on('ding', function () {\n\t                    socket.emit('dong');\n\t                });\n\t\n\t                socket.on('disconnect', function () {\n\t                    if (findIndex(users, currentUser.id) > -1) users.splice(findIndex(users, currentUser.id), 1);\n\t                    console.log('[INFO] User ' + currentUser.userId + ' disconnected!');\n\t                    socket.broadcast.emit('userDisconnect', { userId: currentUser.userId });\n\t                });\n\t\n\t                //Bind the events contained within the service to this socket\n\t                _this.services[serviceId].setWebSocketEvents(socket);\n\t\n\t                /*\r\n\t                socket.on('action', (data) => {\r\n\t                    let _nick = sanitizeString(data.nick);\r\n\t                    let _message = sanitizeString(data.message);\r\n\t                    let date = new Date();\r\n\t                    let time = (\"0\" + date.getHours()).slice(-2) + (\"0\" + date.getMinutes()).slice(-2);\r\n\t                      console.log('[CHAT] [' + time + '] ' + _nick + ': ' + _message);\r\n\t                    socket.broadcast.emit('serverSendUserChat', {nick: _nick, message: _message});\r\n\t                });*/\n\t            });\n\t\n\t            httpServer.listen(port, function () {\n\t                global.Console.status('info', 'Web Socket Bound - Service Namespace: ' + namespace + ' - Port: ' + webSocket.address().port);\n\t            });\n\t\n\t            return webSocket;\n\t        }\n\t\n\t        /**\r\n\t         * Creates a TCP/IP socket network component\r\n\t         *\r\n\t         * @param {number} serviceId The services id from the service stack\r\n\t         * @param {string} namespace The namespace for the service\r\n\t         * @param port The port for the TCP/IP socket component\r\n\t         * @returns {boolean} Returns true on completion and false on error\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_createSocketComponent',\n\t        value: function _createSocketComponent(serviceId, namespace, port) {\n\t            var setListener = true;\n\t            if (this.isPortReserved(port)) {\n\t                setListener = false;\n\t                var pos = this.portReservations.indexOf(port);\n\t                var serviceNamespace = this.portReservationNamespace[pos];\n\t                if (serviceNamespace != namespace) {\n\t                    global.Logger.log('Network:_createSocketComponent', 400, 'Unable to create new socket component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace, { type: isRest === false ? 'http' : 'rest' });\n\t                    return false;\n\t                }\n\t            }\n\t\n\t            var server = _net2.default.createServer(function (socket) {\n\t                // 'connection' listener\n\t                console.log('client connected');\n\t                socket.on('end', function () {\n\t                    console.log('client disconnected');\n\t                });\n\t                socket.write('hello\\r\\n');\n\t                socket.pipe(socket);\n\t            });\n\t\n\t            server.on('error', function (err) {\n\t                //throw err;\n\t                console.log('A socket error has occurred');\n\t                global.Logger.log('Network:_createSocketComponent', 400, 'A socket error has occurred in Service Namespace: ' + namepsace + ' - Service Id: ' + serviceId);\n\t            });\n\t\n\t            if (setListener) {\n\t                server.listen(port, function () {\n\t                    global.Console.status('info', 'TCP/IP Socket Bound - Service Namespace: ' + namespace + ' - Port: ' + server.address().port);\n\t                });\n\t            }\n\t            return server;\n\t        }\n\t\n\t        /**\r\n\t         * Create an API extension component\r\n\t         *\r\n\t         * @param {number} serviceId The services id from the service stack\r\n\t         * @param {string} namespace The namespace for the service\r\n\t         * @returns {boolean} Returns true on completion and false on error\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_createApiComponent',\n\t        value: function _createApiComponent(serviceId, namespace) {\n\t            return this.api.addApiNode(serviceId, namespace, this.services[serviceId].apiRequest);\n\t        }\n\t\n\t        /**\r\n\t         * Removes a service network component\r\n\t         *\r\n\t         * @param {string} serviceNamespace The service namespace for the component\r\n\t         * @param {string} type The network component type\r\n\t         * @param {string} label The label for the component\r\n\t         * @return {boolean} Returns true on completion and false on failure\r\n\t         * @todo Need to complete this\r\n\t         */\n\t\n\t    }, {\n\t        key: 'remove',\n\t        value: function remove(serviceNamespace, type, label) {}\n\t\n\t        /**\r\n\t         * Checks if the port is reserved\r\n\t         *\r\n\t         * @param {number} port The port number\r\n\t         * @returns {boolean} Returns true if the port is reserved false if it is not\r\n\t         */\n\t\n\t    }, {\n\t        key: 'isPortReserved',\n\t        value: function isPortReserved(port) {\n\t            return this.portReservations.indexOf(port) > -1;\n\t        }\n\t    }]);\n\t\n\t    return Network;\n\t}();\n\t\n\t/*\r\n\t * Exports\r\n\t */\n\t\n\t\n\tvar NetworkStack = new Network();\n\texports.default = NetworkStack;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"lodash\");\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Middleware = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n\torgon the scripting capable network server for Node JS\r\n\tr\n\tpackage Gorgon\r\n\tauthor Ryan Rentfro\r\n\tlicense MIT\r\n\turl https://github.com/manufacturing-industry\r\n\tn\t\n\tvar _lodash = __webpack_require__(7);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * The middleware class\r\n\t *\r\n\t * Manages middleware for the system for specific system interactions\r\n\t *\r\n\t * @note Middleware are limited to 1 middleware assigned to a channel->service namespace->middleware\r\n\t * @note This means that you have 1 method assignable to a channel per service per middleware\r\n\t */\n\tvar Middleware = exports.Middleware = function () {\n\t    function Middleware() {\n\t        _classCallCheck(this, Middleware);\n\t\n\t        this.data = [];\n\t        this.serviceRegister = [];\n\t        this.dataMap = [];\n\t        this.channels = ['PRE_REQUEST', 'PRE_RESPONSE', 'PRE_API_CALL', 'POST_API_CALL'];\n\t        this.channels.forEach(function (value) {\n\t            this.data.push([]);\n\t            this.dataMap.push(value);\n\t        }, this);\n\t    }\n\t\n\t    /**\r\n\t     * Adds a middleware to the server based on a middleware channel\r\n\t     *\r\n\t     * @param {string} channel The label for the channel\r\n\t     * @param {string} serviceNamespace The service namespace for the middleware\r\n\t     * @param {string} middleware The class name of the middleware to be used\r\n\t     * @param {function} method The method to be called with the object when a channel call is made\r\n\t     * @returns {boolean}\r\n\t     */\n\t\n\t\n\t    _createClass(Middleware, [{\n\t        key: 'addMiddleware',\n\t        value: function addMiddleware(channel, serviceNamespace, middleware, method) {\n\t            var pos = this._getChannelId(channel);\n\t            if (pos > -1) {\n\t                var _middleware = this._getExistingMiddleware(channel[pos], serviceNamespace, _middleware, method);\n\t                if (_middleware === false) {\n\t                    this.channels[pos].push({ service: serviceNamespace, middleware: _middleware, method: method });\n\t                    global.Logger.log('Middleware:addMiddleware', 200, 'A new middleware was added for Service Namespace: ' + serviceNamespace + ' on Channel: ' + channel);\n\t                    return true;\n\t                } else {\n\t                    global.Logger.log('Middleware:addMiddleware', 300, 'Attempted to add duplicate middleware for Service Namespace: ' + serviceNamespace + ' on Channel: ' + channel + ' for middleware: ' + _middleware + ' with method: ' + method);\n\t                }\n\t            }\n\t            global.Logger.log('Middleware:addMiddleware', 400, 'Attempted to add a middleware for non-existent channel: ' + channel + ' - for Service Namespace: ' + serviceNamespace);\n\t        }\n\t\n\t        /**\r\n\t         * Removes a registered middleware from the server\r\n\t         *\r\n\t         * @param {string} channel\r\n\t         * @param {string} serviceNamespace\r\n\t         * @param {string} middleware\r\n\t         */\n\t\n\t    }, {\n\t        key: 'removeMiddleware',\n\t        value: function removeMiddleware(channel, serviceNamespace, middleware) {\n\t            var pos = this._getChannelId(channel);\n\t            if (pos > -1) {\n\t                /**\r\n\t                 * @todo Add Remove middleware code\r\n\t                 */\n\t            }\n\t        }\n\t\n\t        /**\r\n\t         * Calls a channels assigned middleware with the data and returns the data\r\n\t         *\r\n\t         * @param {string} channel The name of the channel\r\n\t         * @param {*} data The object or data to be passed to the middleware\r\n\t         * @returns {*|boolean} Returns the data from the middleware call for the data sent\r\n\t         */\n\t\n\t    }, {\n\t        key: 'callChannel',\n\t        value: function callChannel(channel, data) {\n\t            var pos = this._getChannelId(channel);\n\t            if (pos > -1) {\n\t                var middlewareList = this.channels[pos];\n\t                if (middlewareList instanceof Array) {\n\t                    middlewareList.foreach(function (value) {\n\t                        data = value.method(data);\n\t                    });\n\t                }\n\t            } else global.Logger.log('Middleware:callChannel', 400, 'Attempted to call a non-existent channel: ' + channel + ' - for Service Namespace: ' + serviceNamespace);\n\t            return data;\n\t        }\n\t\n\t        /**\r\n\t         * Checks for an existing middleware for a given channelObject, serviceNamespace, and middleware\r\n\t         *\r\n\t         * @note This method ensures we lock the assigned middleware for a given channel/service namespace/middleware\r\n\t         * @param {object} channelObject The channel object from the middleware data stack\r\n\t         * @param {string} serviceNamespace The service namespace for the middleware\r\n\t         * @param {string} middleware The class name of the middleware to be used\r\n\t         * @returns {boolean|array} Returns false if channel doesn't exist or the channel datas array if it does\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_getExistingMiddleware',\n\t        value: function _getExistingMiddleware(channelObject, serviceNamespace, middleware) {\n\t            var existing = _lodash2.default.find(channelObject, { 'serviceNamespace': serviceNamespace, 'middleware': middleware });\n\t            if (existing != undefined) return false;\n\t            return existing;\n\t        }\n\t\n\t        /**\r\n\t         * Locates a channel id from the channels name\r\n\t         *\r\n\t         * @param {string} name The name of the channel\r\n\t         * @returns {number} Returns the index of the channel (-1 if channel does not exist)\r\n\t         * @private\r\n\t         */\n\t\n\t    }, {\n\t        key: '_getChannelId',\n\t        value: function _getChannelId(name) {\n\t            return this.channels.indexOf(name.toUpper);\n\t        }\n\t    }]);\n\t\n\t    return Middleware;\n\t}();\n\t\n\t/**\r\n\t * Export the middleware class as default\r\n\t */\n\t\n\t\n\texports.default = Middleware;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Api = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _lodash = __webpack_require__(7);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tvar _moment = __webpack_require__(10);\n\t\n\tvar _moment2 = _interopRequireDefault(_moment);\n\t\n\tvar _middleware = __webpack_require__(8);\n\t\n\tvar _middleware2 = _interopRequireDefault(_middleware);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * Gorgon the scripting capable network server for Node JS\r\n\t *\r\n\t * @package Gorgon\r\n\t * @author Ryan Rentfro\r\n\t * @license MIT\r\n\t * @url https://github.com/manufacturing-industry\r\n\t */\n\t\n\tvar instance = null;\n\t\n\t/**\r\n\t * The api class\r\n\t *\r\n\t * @note This powers the extensible internal API\r\n\t */\n\tvar Api = exports.Api = function () {\n\t  /**\r\n\t   * Constructs the class\r\n\t   */\n\t  function Api() {\n\t    _classCallCheck(this, Api);\n\t\n\t    if (!instance) {\n\t      /**\r\n\t       * The middleware for the class\r\n\t       * @type {Middleware}\r\n\t       */\n\t      this.middleware = new _middleware2.default();\n\t\n\t      /**\r\n\t       * Contains the api node references\r\n\t       * @type {Array}\r\n\t       */\n\t      this.api = [];\n\t\n\t      /**\r\n\t       * Contains the api node map\r\n\t       * @note The api map is also used for reserving api endpoints\r\n\t       * @type {Array}\r\n\t       */\n\t      this.apiMap = [];\n\t\n\t      /**\r\n\t       * Maps the service id's to the api\r\n\t       * @type {Array}\r\n\t       */\n\t      this.serviceIdMap = [];\n\t\n\t      /**\r\n\t       * Reserved words that can not be registered as api endpoints\r\n\t       * @type {string[]}\r\n\t       */\n\t      this.reserved = ['instance', 'middleware', 'api', 'apiMap', 'serviceIdMap', 'reserved', 'addApiNode', 'getApiNode', '_getNodePos', 'callApiNode', 'ApiCall'];\n\t\n\t      instance = this;\n\t    } else return instance;\n\t  }\n\t\n\t  /**\r\n\t   * Adds an API node to the api stack and binds it to the api\r\n\t   *\r\n\t   * @param {number} serviceId The service id\r\n\t   * @param {namespace} namespace The service namespace mounted to the api\r\n\t   * @param {function} node The function reference for the node\r\n\t   * @returns {boolean} Returns true on completion and false on failure\r\n\t   */\n\t\n\t\n\t  _createClass(Api, [{\n\t    key: 'addApiNode',\n\t    value: function addApiNode(serviceId, namespace, node) {\n\t      if (this._getNodePos(namespace) === false && this._isReservedNamespace(namespace) === false) {\n\t        this.api.push(node);\n\t        this.apiMap.push(namespace);\n\t        this.serviceIdMap.push(serviceId);\n\t        var pos = this.api.length - 1;\n\t        this[namespace] = this.api[pos];\n\t        global.Logger.log('Api:addApiNode', 200, 'Added a new API node for Service Namespace: ' + namespace);\n\t        return true;\n\t      }\n\t\n\t      if (this._getNodePos(namespace) !== false) global.Logger.log('Api:addApiNode', 400, 'Unable to create new api node. A node by for this service namespace already exists - Service Namespace: ' + namespace);else global.Logger.log('Api:addApiNode', 400, 'Unable to create new api node. This namespace is reserved - Service Namespace: ' + namespace);\n\t      return false;\n\t    }\n\t\n\t    /**\r\n\t     * Returns an api node from the stack\r\n\t     *\r\n\t     * @param {string} namespace The service namespace to locate\r\n\t     * @returns {*} Returns the api node when found or false when no node was found\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getApiNode',\n\t    value: function getApiNode(namespace) {\n\t      var pos = this._getNodePos(namespace);\n\t      if (pos > -1) return this.api[pos];\n\t      return false;\n\t    }\n\t\n\t    /**\r\n\t     * Creates an ApiCall instance and executes it - then returns the ApiCall instance if the call completed\r\n\t     *\r\n\t     * @param {string} namespace The service namespace to be called\r\n\t     * @param {string} method The method to be called\r\n\t     * @param {*} data The data to be sent to the call\r\n\t     * @returns {*} Returns the result of the call or false if the node did not exist\r\n\t     */\n\t\n\t  }, {\n\t    key: 'callApiNode',\n\t    value: function callApiNode(namespace, method, data) {\n\t      node = this.getApiNode(namespace);\n\t      if (node !== false) {\n\t        var apiCall = new ApiCall(method, data);\n\t        this.middleware.callChannel('PRE_API_CALL', apiCall);\n\t        data = apiCall.callApi(node, mehod);\n\t        this.middleware.callChannel('POST_API_CALL', data);\n\t        data.returned = (0, _moment2.default)();\n\t        return data;\n\t      }\n\t      this.Logger.log('Api:callApiNode', 400, 'Failed to call node service with namespace: ' + namespace + ' - no api node exists for this namespace.');\n\t      return false;\n\t    }\n\t\n\t    /**\r\n\t     * Returns the position of the node by its namespace\r\n\t     *\r\n\t     * @param {string} namespace The service namespace to be retrieved\r\n\t     * @returns {boolean|number} Returns false if not found or the position of the service namespace in the stack\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: '_getNodePos',\n\t    value: function _getNodePos(namespace) {\n\t      var pos = this.apiMap.indexOf(namespace);\n\t      if (pos == -1) return false;\n\t      return this.apiMap[pos];\n\t    }\n\t\n\t    /**\r\n\t     * Check if the namespace is reserved by the object\r\n\t     *\r\n\t     * @param {string} namespace The service namespace to be checked\r\n\t     * @returns {boolean} Returns true if the namespace exists false if it doesn't\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: '_isReservedNamespace',\n\t    value: function _isReservedNamespace(namespace) {\n\t      return this.reserved.indexOf(namespace) > -1;\n\t    }\n\t  }]);\n\t\n\t  return Api;\n\t}();\n\t\n\t/**\r\n\t * This API call class\r\n\t *\r\n\t * @note This is the packaged call and its related data\r\n\t */\n\t\n\t\n\tvar ApiCall = function () {\n\t  /**\r\n\t   * Constructs the class\r\n\t   */\n\t  function ApiCall(method, data) {\n\t    _classCallCheck(this, ApiCall);\n\t\n\t    /**\r\n\t     * The method to be called\r\n\t     * @var {function}\r\n\t     */\n\t    this.method = method;\n\t\n\t    /**\r\n\t     * A flag that controls if the call resulted in an error\r\n\t     * @type {boolean}\r\n\t     */\n\t    this.error = false;\n\t\n\t    /**\r\n\t     * The errors that occurred during the call\r\n\t     * @type {Array}\r\n\t     */\n\t    this.errors = [];\n\t\n\t    /**\r\n\t     * The data for the call\r\n\t     * @type {*}\r\n\t     */\n\t    this.data = data;\n\t\n\t    /**\r\n\t     * The time the API call was created\r\n\t     * @type {moment}\r\n\t     */\n\t    this.created = (0, _moment2.default)();\n\t\n\t    /**\r\n\t     * The time the API call was updated\r\n\t     * @type {moment}\r\n\t     */\n\t    this.updated = null;\n\t\n\t    /**\r\n\t     * The time the API call was returned\r\n\t     * @type {moment}\r\n\t     */\n\t    this.returned = null;\n\t  }\n\t\n\t  /**\r\n\t   * Calls the api for the call\r\n\t   *\r\n\t   * @param {function} node The node to tbe called\r\n\t   * @returns {*} Returns the ApiCall object\r\n\t   */\n\t\n\t\n\t  _createClass(ApiCall, [{\n\t    key: 'callApi',\n\t    value: function callApi(node) {\n\t      node(this);\n\t      this.updated = (0, _moment2.default)();\n\t      return this;\n\t    }\n\t  }]);\n\n\t  return ApiCall;\n\t}();\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"moment\");\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"net\");\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"http\");\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"socket.io\");\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"compression\");\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express\");\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.Logger = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n\torgon the scripting capable network server for Node JS\r\n\tr\n\tpackage Gorgon\r\n\tauthor Ryan Rentfro\r\n\tlicense MIT\r\n\turl https://github.com/manufacturing-industry\r\n\tn\t\n\t/*\r\n\t * Imports\r\n\t */\n\t\n\t\n\tvar _fs = __webpack_require__(17);\n\t\n\tvar fs = _interopRequireWildcard(_fs);\n\t\n\tvar _moment = __webpack_require__(10);\n\t\n\tvar _moment2 = _interopRequireDefault(_moment);\n\t\n\tvar _os = __webpack_require__(18);\n\t\n\tvar os = _interopRequireWildcard(_os);\n\t\n\tvar _config = __webpack_require__(1);\n\t\n\tvar _sanitizeFilename = __webpack_require__(19);\n\t\n\tvar _sanitizeFilename2 = _interopRequireDefault(_sanitizeFilename);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * The server logging class\r\n\t */\n\tvar Logger = exports.Logger = function () {\n\t    /**\r\n\t     * Constructs the class\r\n\t     */\n\t    function Logger() {\n\t        _classCallCheck(this, Logger);\n\t\n\t        this.fs = fs;\n\t        this.GorgonConfig = new _config.GorgonConfig();\n\t        this.sanitize = _sanitizeFilename2.default;\n\t        this.topicMap = [];\n\t        this.subscribers = [];\n\t        this.subscriberMap = [];\n\t        this.level = ['Debug', 'Info', 'Warn', 'Error', 'Critical', 'Fatal'];\n\t        this.levelKey = [100, 200, 300, 400, 500, 600];\n\t    }\n\t\n\t    /**\r\n\t     * Creates a new log and writes it to the corresponding file\r\n\t     *\r\n\t     * @param {string} location The location the log originated from\r\n\t     * @param {number} level The level of the log (from levelKey)\r\n\t     * @param {string} message The message for the log\r\n\t     * @param {*} values The values to include with the log\r\n\t     * @param {string} type The type for the log\r\n\t     * @return {boolean} Returns true on completion and false on failure\r\n\t     */\n\t\n\t\n\t    _createClass(Logger, [{\n\t        key: 'log',\n\t        value: function log(location, level, message, values, type) {\n\t            var logItem = new Log(location, level, message, values, type);\n\t            var logValues = logItem.values == null || logItem.values == undefined ? null : JSON.stringify(logItem.values);\n\t            var filename = logItem.created.format('YYYYMMDD') + '.log';\n\t\n\t            switch (logItem.type) {\n\t                default:\n\t                    filename = this.sanitize(logItem.type) + '-' + filename;\n\t                    break;\n\t                case undefined:\n\t                case true:\n\t                case 'sys':\n\t                    filename = 'sys-' + filename;\n\t                    break;\n\t                case 'error':\n\t                    filename = 'error-' + filename;\n\t                    break;\n\t            }\n\t\n\t            var logEntry = logItem.created.format() + ' ' + logItem.level + ' ' + logItem.location + ' [message=' + logItem.message + ']' + ' [values=' + logValues + ']' + os.EOL;\n\t\n\t            if (!this.fs.existsSync(this.GorgonConfig.storage.logs)) {\n\t                fs.mkdirSync(this.GorgonConfig.storage.logs);\n\t            }\n\t\n\t            this.fs.appendFile(this.GorgonConfig.storage.logs + filename, logEntry, 'utf8', function (err) {\n\t                if (err) {\n\t                    console.error(err);\n\t                    return false;\n\t                }\n\t            });\n\t            return true;\n\t        }\n\t    }]);\n\t\n\t    return Logger;\n\t}();\n\t\n\t/**\r\n\t * The server log class\r\n\t */\n\t\n\t\n\tvar Log =\n\t/**\r\n\t * Constructs the class\r\n\t *\r\n\t * @param {string} location The location the log originated from\r\n\t * @param {number} level The level of the log (from levelKey)\r\n\t * @param {string} message The message for the log\r\n\t * @param {*} values The values to include with the log\r\n\t * @param {string} type The type for the log\r\n\t */\n\tfunction Log(location, level, message, values, type) {\n\t    _classCallCheck(this, Log);\n\t\n\t    this.location = location;\n\t    this.level = level == null || level == undefined ? 100 : level;\n\t    this.message = message;\n\t    this.type = type == null || type == undefined ? 'sys' : type;\n\t    this.values = values == null || values == undefined ? null : values;\n\t    this.created = (0, _moment2.default)();\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"fs\");\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"os\");\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"sanitize-filename\");\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"colog\");\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** gorgon.min.js\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"lodash\"), require(\"moment\"), require(\"net\"), require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"os\"), require(\"sanitize-filename\"), require(\"colog\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gorgon\", [\"lodash\", \"moment\", \"net\", \"http\", \"socket.io\", \"compression\", \"express\", \"fs\", \"os\", \"sanitize-filename\", \"colog\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gorgon\"] = factory(require(\"lodash\"), require(\"moment\"), require(\"net\"), require(\"http\"), require(\"socket.io\"), require(\"compression\"), require(\"express\"), require(\"fs\"), require(\"os\"), require(\"sanitize-filename\"), require(\"colog\"));\n\telse\n\t\troot[\"gorgon\"] = factory(root[\"lodash\"], root[\"moment\"], root[\"net\"], root[\"http\"], root[\"socket.io\"], root[\"compression\"], root[\"express\"], root[\"fs\"], root[\"os\"], root[\"sanitize-filename\"], root[\"colog\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__, __WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_20__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 7a308837fd1b7cb72c10\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport {GorgonConfig} from \"config/config\";\r\nimport {GorgonEnv} from \"config/env\";\r\nimport {GorgonContainerService} from 'service/index';\r\nimport {Logger} from 'component/log'\r\nimport _ from 'lodash'\r\nimport colog from 'colog'\r\n\r\n/*\r\n * Configure globals\r\n */\r\n\r\n/**\r\n * The global logger class\r\n *\r\n * @type {Logger}\r\n */\r\nglobal.Logger = new Logger();\r\n\r\n/**\r\n * The global console class\r\n *\r\n * @type {object} The colog instance\r\n */\r\nglobal.Console = colog;\r\n\r\nglobal.Console.status = (type, message)=>\r\n{\r\n    switch(type)\r\n    {\r\n        default:\r\n        case 'info':\r\n            global.Console.log('[ ' + global.Console.color('INFO', 'yellow') + ' ] ' + message);\r\n            break;\r\n        case 'notice':\r\n            global.Console.log('[ ' + global.Console.color('NOTICE', 'cyan') + ' ] ' + message);\r\n            break;\r\n        case 'error':\r\n            global.Console.log('[ ' + global.Console.color('ERROR', 'red') + ' ] ' + message);\r\n            break;\r\n    }\r\n};\r\n\r\n/**\r\n * The Gorgon class\r\n */\r\nclass Gorgon {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * The gorgon config for the server\r\n         * @type {GorgonConfig}\r\n         */\r\n        this.GorgonConfig = new GorgonConfig();\r\n\r\n        /**\r\n         * The gorgon server logger\r\n         * @type {Logger}\r\n         */\r\n        this.Logger = global.Logger;\r\n        this.Logger.log('Gorgon:initServer', 200, 'The Gorgon has been summoned - GORGON SERVER STARTING...');\r\n\r\n        /**\r\n         * The gorgon environment for the server\r\n         * @type {GorgonEnv}\r\n         */\r\n        this.GorgonEnv = new GorgonEnv();\r\n\r\n        /**\r\n         * The container service\r\n         * @type {GorgonContainerService}\r\n         */\r\n        this.GorgonContainerService = new GorgonContainerService();\r\n\r\n        /**\r\n         * The first style of CLI separator\r\n         * @type {string}\r\n         */\r\n        this.separator1 = '================================================';\r\n\r\n        /**\r\n         * The second style of CLI separator\r\n         * @type {string}\r\n         */\r\n        this.separator2 = '------------------------------------------------';\r\n    }\r\n\r\n    /**\r\n     * Initializes the server and loads the configured services from the environment\r\n     */\r\n    initServer()\r\n    {\r\n        this._bootstrap();\r\n        global.Console.log(this.separator2);\r\n        global.Console.question('Loading Services');\r\n        global.Console.log(this.separator2);\r\n        this.Logger.log('Gorgon:initServer', 200, 'The server was started successfully');\r\n\r\n        this.GorgonEnv.service.forEach(function(value){\r\n            let consoleWidth = 48;\r\n            let loaded = this.GorgonContainerService.add(value.service);\r\n            if (loaded)\r\n            {\r\n                let logExtLen = 6;\r\n                let spaceLength = consoleWidth - logExtLen - value.namespace.length - 2;\r\n                let spaceChar = _.repeat('.', spaceLength);\r\n                this.Logger.log('Gorgon:initServer', 200, 'Loaded service namespace: ' + value.namespace);\r\n                global.Console.log(value.namespace +' ' + spaceChar + ' [ ' + global.Console.color('OK', 'green') + ' ]');\r\n            } else {\r\n                let logExtLen = 10;\r\n                let spaceLength = consoleWidth - logExtLen - value.namespace.length - 2;\r\n                let spaceChar = _.repeat('.', spaceLength);\r\n                this.Logger.log('Gorgon:initServer', 400, 'Failed to load service with namespace: ' + value.namespace);\r\n                global.Console.log(value.namespace +' ' + spaceChar + ' [ ' + global.Console.color('FAILED', 'red') + ' ]');\r\n            }\r\n        }, this);\r\n\r\n        this.Logger.log('Gorgon:initServer', 200, 'Service Loading Completed');\r\n        global.Console.log(this.separator2);\r\n        global.Console.log('Server is now online...');\r\n    }\r\n\r\n    /**\r\n     * The CLI server bootstrap\r\n     *\r\n     * @private\r\n     */\r\n    _bootstrap()\r\n    {\r\n        global.Console.log(global.Console.color('Gorgon Server - v' + this.GorgonConfig.data.version, 'green'));\r\n        global.Console.log('Author: Ryan Rentfro <rrentfro at gmail dot com>');\r\n        global.Console.log('Project: https://github.com/manufacturing-industry/gorgon');\r\n        this._motd();\r\n        global.Console.log('Press ' + global.Console.color('cntrl+c', 'yellow') + ' to exit the server');\r\n    }\r\n\r\n    /**\r\n     * The server message of the day display\r\n     *\r\n     * @private\r\n     */\r\n    _motd()\r\n    {\r\n        global.Console.log(this.separator1);\r\n        global.Console.log(global.Console.color(this.GorgonConfig.data.motd, 'yellow'));\r\n        global.Console.log(this.separator1);\r\n    }\r\n}\r\n\r\n/*\r\n * Run the Gorgon Server\r\n */\r\nvar GorgonServer = new Gorgon();\r\nGorgonServer.initServer();\n\n\n/** WEBPACK FOOTER **\n ** ./src/gorgon.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/**\r\n * The Gorgon config class\r\n */\r\nexport class GorgonConfig\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * The servers default config data\r\n         * @type {{name: string, version: string}}\r\n         */\r\n        this.data = {\r\n            name: 'Gorgon Server',\r\n            version: '0.0.1 Pre-Alpha',\r\n            motd: 'This is the message of the day.'\r\n        };\r\n\r\n        /**\r\n         * The servers default storage config\r\n         *\r\n         * @note Contains the path pointers for base storage components\r\n         *\r\n         * @type {{logs: string}}\r\n         */\r\n        this.storage = {\r\n            logs: 'logs/'\r\n        };\r\n\r\n        /**\r\n         * The servers default layers controls\r\n         * @type {{server: boolean, cli: boolean, services: boolean}}\r\n         */\r\n        this.load = {\r\n            server: true,\r\n            cli: true,\r\n            services: true\r\n        };\r\n\r\n        /**\r\n         * Controls debugging\r\n         * @type {{enable: boolean}}\r\n         */\r\n        this.debug = {\r\n            enable: true\r\n        };\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/config/config.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nimport StatusService from '../service/status/index'\r\n\r\n/**\r\n * The Gorgon env class\r\n */\r\nexport class GorgonEnv\r\n{\r\n    constructor()\r\n    {\r\n        this.service = new StatusService();\r\n        this.service = [\r\n            {\r\n                sid: 0,\r\n                name: 'Status',\r\n                namespace: 'StatusService',\r\n                enable: true,\r\n                service: this.service }\r\n        ];\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/config/env.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport {Routes} from '../../component/routes'\r\nimport {GorgonService} from '../index';\r\nimport {StatusServiceConfig} from 'config/config';\r\nimport {Network} from '../../component/network'\r\n\r\nvar NetworkStack = new Network();\r\n\r\n/**\r\n * The status service\r\n *\r\n * @note Provides status on server configuration\r\n */\r\nclass StatusService extends GorgonService {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        /**\r\n         * The status service configuration\r\n         * @type {StatusServiceConfig}\r\n         */\r\n        this.config = StatusServiceConfig;\r\n\r\n        /**\r\n         * The service name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Status Service';\r\n\r\n        /**\r\n         * The service namespace\r\n         * @type {string}\r\n         */\r\n        this.namespace = 'StatusService';\r\n\r\n        /**\r\n         * The service description\r\n         * @type {string}\r\n         */\r\n        this.description = 'Provides service status';\r\n\r\n        /**\r\n         * The service type\r\n         * @type {string}\r\n         */\r\n        this.type = 'Service';\r\n\r\n        /**\r\n         * The service https control - controls how https works for the services exposed http endpoints\r\n         * @type {string|boolean} Can be enable, disable, true, false, or enforce\r\n         */\r\n        this.https = true;\r\n\r\n        /**\r\n         * The inbound types supported by the service\r\n         * @type {string[]}\r\n         */\r\n        this.inboundTypes = ['rest', 'socket', 'http', 'webSocket', 'api'];\r\n\r\n        /**\r\n         * The ports that map to the inbound types 1:1\r\n         * @type {number|null[]}\r\n         */\r\n        this.ports = [2600, null, 2680, 2688, null];\r\n\r\n        /**\r\n         * The router for the service\r\n         * @type {Routes}\r\n         */\r\n        this.router = new Routes(this.namepsace);\r\n\r\n        /**\r\n         * The permissions for the service\r\n         * @type {string[]} Can be internal and/or external\r\n         */\r\n        this.permissions = ['internal'];\r\n\r\n        /**\r\n         * Binds the services routes and networking\r\n         */\r\n        this.serviceBind();\r\n    }\r\n\r\n    /**\r\n     * The routes configuration for the service\r\n     *\r\n     * @note This is loaded into the classes router and the network stack\r\n     */\r\n    routes()\r\n    {\r\n        return {\r\n            'ServiceRequest':\r\n            {\r\n                inboundTypes: this.inboundTypes,\r\n                method: '/StatusServiceRequest',\r\n                callback: this.serviceRequest()\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    /**\r\n     * The service request method for http and rest services\r\n     *\r\n     * @note Provides the service request for the server\r\n     *\r\n     * @param {Request} req A request object\r\n     * @param {Object} res A response object\r\n     * @param {string} mode Controls if the call is http or rest\r\n     * @todo Add routing for handling inbound requests\r\n     */\r\n    serviceRequest(req, res, mode)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * The service api call method\r\n     *\r\n     *\r\n     * @param data\r\n     * @todo Add routing for handling inbound requests\r\n     */\r\n    apiRequest(data)\r\n    {\r\n\r\n    }\r\n\r\n    setWebSocketEvents(socket)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Binds the services routes and networking components\r\n     *\r\n     * @return {boolean} Returns true on completion\r\n     */\r\n    serviceBind()\r\n    {\r\n        /*\r\n         * Imports the routers routes from the class\r\n         */\r\n        this.router.importRoutes(this.routes());\r\n\r\n        /*\r\n         * Set the networking configuration for the class\r\n         */\r\n        this._setNetworking();\r\n\r\n        /*\r\n         * Add the service to the network\r\n         */\r\n        NetworkStack.addService(this);\r\n\r\n        return true;\r\n    }\r\n\r\n    serviceUnbind()\r\n    {\r\n        NetworkStack.removeService(this.namespace);\r\n    }\r\n\r\n}\r\n\r\n/*\r\n * Exports\r\n */\r\nexport default StatusService;\n\n\n/** WEBPACK FOOTER **\n ** ./src/service/status/index.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nexport class Routes {\r\n    constructor(serviceNamespace) {\r\n        this.service = serviceNamespace;\r\n        this.inboundTypes = ['rest', 'socket', 'http', 'https', 'webSocket', 'api'];\r\n        this.routes = [];\r\n        this.routeCallbacks = [];\r\n        this.permissionMap = [];\r\n    }\r\n\r\n    add(inboundTypes, method, callback)\r\n    {\r\n        this.routes.push(method);\r\n        this.routeCallbacks(callback);\r\n        var pos = this.routeCallbacks.length - 1;\r\n\r\n        inboundTypes.forEach(function(value){\r\n            if (this.inboundTypes.indexOf(value) > -1) this.permissionMap[value].push(pos);\r\n            else console.log('ERROR - Invalid Permission Encountered in Service: [' + this.service + '] Method: [' + method + ']');\r\n        });\r\n    }\r\n\r\n    remove(method)\r\n    {\r\n        let pos = this.routes.indexOf(method);\r\n        if (pos > -1)\r\n        {\r\n            this.routeCallbacks[pos] = null;\r\n            this.routes[pos] = null;\r\n\r\n            this.inboundTypes.forEach(function(value)\r\n            {\r\n                if (this.permissionMap[value] != undefined && this.permissionMap[value] instanceof Array)\r\n                {\r\n                    let keyPos = this.permissionMap[value].indexOf(pos);\r\n                    if (keyPos > -1) this.permissionMap[value].splice(keyPos, 1);\r\n                }\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    importRoutes(routes)\r\n    {\r\n        if (routes instanceof Array)\r\n        {\r\n            for (var key in routes) {\r\n                if (routes.hasOwnProperty(key)) {\r\n                    this.add(routes[key]['inboundTypes'], routes[key]['method'], routes[key]['callback']);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    route(inboundType, method, payload)\r\n    {\r\n        let pos = this.routes.indexOf(method);\r\n        if (pos > -1)\r\n        {\r\n            if (this.permissionMap[inboundType] != undefined && this.permissionMap[inboundType].length > 0 && this.permissionMap[inboundType].indexOf(pos) > -1)\r\n            {\r\n                //callback exists for method\r\n                return this.routeCallbacks[pos](method, inboundType, ...payload);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/routes.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/**\r\n * The Gorgon Container Service Class\r\n *\r\n * @note This class provides containers for services\r\n */\r\nexport class GorgonContainerService {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        this.containers = [];\r\n        this.containerMap = [];\r\n        this.name = \"Gorgon Container Service\";\r\n        this.type = \"Service\";\r\n    }\r\n\r\n    /**\r\n     * Adds a new service by creating a container and injecting the service and its location to the service map\r\n     *\r\n     * @param {object} service The service to tbe added\r\n     * @returns {boolean} Returns true on completion and false on failure\r\n     */\r\n    add(service)\r\n    {\r\n        if (service.namespace != null && service.namespace != '' && this.containerMap.indexOf(service.namespace) == -1)\r\n        {\r\n            this.containers.push(service);\r\n            this.containerMap.push(service.namespace);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Removes a service container by the service namespace\r\n     *\r\n     * @param {string} serviceNamespace The service namespace to be removed\r\n     * @returns {boolean} Returns true on completion and false on failure\r\n     */\r\n    remove(serviceNamespace)\r\n    {\r\n        if (this.containerMap.indexOf(serviceNamespace) > -1)\r\n        {\r\n            let pos = this.containerMap.indexOf(serviceNamespace);\r\n            this.containers.splice(pos, 1);\r\n            this.containerMap.splice(pos, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a service container by its namespace\r\n     *\r\n     * @param {string} serviceNamespace The service namespace\r\n     * @returns {*} Returns the service when located or false when not located\r\n     */\r\n    get(serviceNamespace)\r\n    {\r\n        if (this.containerMap.indexOf(serviceNamespace) > -1) return this.containers[this.containerMap.indexOf(serviceNamespace)];\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * The gorgon service object\r\n *\r\n * @note Provides the service, default properties/methods used for constructing containers\r\n */\r\nexport class GorgonService\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        /**\r\n         * The service id for the service\r\n         *\r\n         * @note The service Id is set when a service is added to the network layer and its service id is returned\r\n         *\r\n         * @type {null|number}\r\n         */\r\n        this.serviceId = null;\r\n\r\n        /**\r\n         * The service name\r\n         * @type {null|string}\r\n         */\r\n        this.name = null;\r\n\r\n        /**\r\n         * The service description\r\n         * @type {null|string}\r\n         */\r\n        this.description = null;\r\n\r\n        /**\r\n         * The service type\r\n         * @type {string}\r\n         */\r\n        this.type = 'Service';\r\n\r\n        /**\r\n         * The service router\r\n         * @type {null|Router}\r\n         */\r\n        this.router = null;\r\n\r\n        /**\r\n         * The list of inbound service types to connect\r\n         *\r\n         * @note These map 1:1 with this.ports\r\n         *\r\n         * @type {Array}\r\n         */\r\n        this.inboundTypes = [];\r\n\r\n        /**\r\n         * The list of inbound ports types to\r\n         *\r\n         * @note These map 1:1 with this.inboundTypes\r\n         *\r\n         * @type {Array}\r\n         */\r\n        this.ports = [];\r\n\r\n        /**\r\n         * The service permissions list\r\n         * @type {Array}\r\n         */\r\n        this.permissions = [];\r\n\r\n        /**\r\n         * The service networking configuration\r\n         *\r\n         * @note Most object will build this via this._setNetworking\r\n         *\r\n         * @type {Array}\r\n         */\r\n        this.networking = [];\r\n    }\r\n\r\n    /**\r\n     * Sets the networking property via the inboundTypes and ports properties\r\n     * @private\r\n     */\r\n    _setNetworking()\r\n    {\r\n        if (this.inboundTypes instanceof Array && this.ports instanceof Array && this.inboundTypes.length == this.ports.length)\r\n        {\r\n            for(var i = 0; i < this.inboundTypes.length; i++)\r\n            {\r\n                this.networking.push({ name: this.inboundTypes[i], port: this.ports[i] })\r\n            }\r\n        } else {\r\n            console.warn('GorgonService:_setNetworking - Missing or invalid networking for service ' + this.name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the serviceId for the service\r\n     * @param {number} serviceId\r\n     * @return {boolean} Returns true on completion\r\n     */\r\n    setServiceId(serviceId)\r\n    {\r\n        this.serviceId = serviceId;\r\n        return true;\r\n    }\r\n\r\n    apiRequest(req, res, isRest)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    setWebSocketEvents(socket)\r\n    {\r\n        return null;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/service/index.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nlet instance = null;\r\nimport _ from 'lodash'\r\nimport Middleware from './middleware'\r\nimport {Api} from './api';\r\nimport net from 'net';\r\nimport http from 'http';\r\nimport SocketIO from 'socket.io';\r\nimport compression from 'compression';\r\nimport express from 'express';\r\n\r\n/**\r\n * The network controls singleton class\r\n *\r\n * @note Creates and maps the network components for services\r\n */\r\nexport class Network {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        if(!instance)\r\n        {\r\n            /**\r\n             * The middleware for the class\r\n             * @type {Middleware}\r\n             */\r\n            this.middleware = new Middleware();\r\n\r\n            /**\r\n             * The services stack\r\n             * @type {Array}\r\n             */\r\n            this.services = [];\r\n\r\n            /**\r\n             * The service stack map\r\n             * @type {Array}\r\n             */\r\n            this.serviceMap = [];\r\n\r\n            /**\r\n             * The component collection\r\n             * @type {Array}\r\n             */\r\n            this.components = [];\r\n\r\n            /**\r\n             * The component collection map\r\n             * @type {Array}\r\n             */\r\n            this.componentMap = [];\r\n\r\n            /**\r\n             * The component collection type map\r\n             * @type {{rest: Array, socket: Array, webSocket: Array, http: Array, api: Array}}\r\n             */\r\n            this.componentTypeMap = {\r\n                rest: [],\r\n                socket: [],\r\n                webSocket: [],\r\n                http: [],\r\n                api: []\r\n            };\r\n\r\n            /**\r\n             * The network API control\r\n             * @type {Api}\r\n             */\r\n            this.api = new Api();\r\n\r\n            /**\r\n             * The port reservation list\r\n             * @type {Array}\r\n             */\r\n            this.portReservations = [];\r\n\r\n            /**\r\n             * The port reservation namespace list\r\n             * @type {Array}\r\n             */\r\n            this.portReservationNamespace = [];\r\n\r\n            /**\r\n             * The active service in the network stack\r\n             * @type {Array}\r\n             */\r\n            this.activeServices = [];\r\n\r\n            instance = this;\r\n        } else return instance;\r\n    }\r\n\r\n    /**\r\n     * Adds a service to the network layer\r\n     *\r\n     * @param {object} service The service to be added\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    addService(service)\r\n    {\r\n        if (this.activeServices.indexOf(service.namespace) == -1)\r\n        {\r\n            this.services.push(service);\r\n            this.serviceMap.push(service.namespace);\r\n            let serviceId = this.serviceMap.length - 1;\r\n            service.setServiceId(service);\r\n\r\n            /*\r\n             * Add networking components\r\n             */\r\n            if (service.networking instanceof Array)\r\n            {\r\n                for(var i=0; i < service.networking.length; i++)\r\n                {\r\n                    /**\r\n                     * @todo RESUME HERE\r\n                     */\r\n                    this.add(serviceId, service.namespace, service.networking[i].name, 'label', service.networking[i].port);\r\n                }\r\n                global.Logger.log('Network:addService', 200, 'Added services components: ' + service.name + ' for Service Namespace: ' + service.namespace + ' - ServiceId: ' + serviceId);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Removes the services network components\r\n     *\r\n     * @param {string} serviceNamespace The namespace of the service to be removed\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    removeService(serviceNamespace)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Adds a service network component\r\n     *\r\n     * @param {number} serviceId The serviceId for the service\r\n     * @param {string} serviceNamespace The service namespace for the component\r\n     * @param {string} type The network component type\r\n     * @param {string} label The label for the component\r\n     * @param {string|null} port The optional port for the network component\r\n     * @param {function} middleware The middleware to call for this service\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    add(serviceId, serviceNamespace, type, label, port, middleware)\r\n    {\r\n        let created = false;\r\n        let createPort = null;\r\n        if (this.portReservations.indexOf(port) == -1 || port == null || port == undefined)\r\n        {\r\n            if (port == undefined || port == null) port = 0;\r\n            switch(type)\r\n            {\r\n                default:\r\n                    global.Logger.log('Network:add', 400, 'Unable to load component type of: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\r\n                    return false;\r\n                    break;\r\n                case 'rest':\r\n                    created = this._createRestComponent(serviceId, serviceNamespace, port, middleware);\r\n                    break;\r\n                case 'http':\r\n                    created = this._createHttpComponent(serviceId, serviceNamespace, port, middleware);\r\n                    break;\r\n                case 'socket':\r\n                    created = this._createSocketComponent(serviceId, serviceNamespace, port);\r\n                    break;\r\n                case 'webSocket':\r\n                    created = this._createWebSocketComponent(serviceId, serviceNamespace, port, middleware);\r\n                    break;\r\n                case 'api':\r\n                    created = this._createApiComponent(serviceId, serviceNamespace);\r\n                    break;\r\n            }\r\n\r\n            if (created === false) return false;\r\n            this.components.push(created);\r\n            this.componentMap.push(serviceNamespace + '-' + type + '-' + label + '-' + port);\r\n            this.componentTypeMap[type].push(serviceNamespace + '-' + type + '-' + port);\r\n            global.Logger.log('Network:add', 200, 'Added network component: ' + type + ' for Service Namespace: ' + serviceNamespace + ' - ServiceId: ' + serviceId);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Creates a REST network component\r\n     *\r\n     * @note A REST network component uses the http 1.1 stack (express)\r\n     *\r\n     * @param {number} serviceId The services id from the service stack\r\n     * @param {string} namespace The namespace for the service\r\n     * @param {null|number} port The port for the service or null.\r\n     * @param {function} middleware The middleware to call for this service\r\n     * @returns {*} Returns component if created or false on failure\r\n     * @private\r\n     */\r\n    _createRestComponent(serviceId, namespace, port, middleware)\r\n    {\r\n        return this._createHttpComponent(serviceId, namespace, port, middleware, true)\r\n    }\r\n\r\n    /**\r\n     * Creates a http network component\r\n     *\r\n     * @note When a port is set for null if the component requires a port to be created the service will assign a random port.  The service will need to retrieve this information as needed.\r\n     * @note A http network component uses the http 1.1 stack (express)\r\n     *\r\n     * @param {number} serviceId The services id from the service stack\r\n     * @param {string} namespace The namespace for the service\r\n     * @param {null|number} port The port for the service or null.\r\n     * @param {function} middleware The middleware to call for this service\r\n     * @param {boolean|undefined} isRest Controls the rest interface flag when creating the http instance\r\n     * @returns {*} Returns component if created or false on failure\r\n     * @private\r\n     */\r\n    _createHttpComponent(serviceId, namespace, port, middleware, isRest)\r\n    {\r\n        let setListener = true;\r\n        if (isRest == undefined) isRest = false;\r\n\r\n        var server = express();\r\n        server.use(compression({}));\r\n\r\n        var component = server.all('/', function (req, res) {\r\n            this.middleware.callChannel('PRE_REQUEST', req);\r\n            this.middleware.callChannel('PRE_RESPONSE', res);\r\n            this.services[serviceId].serviceRequest(req, res, isRest === false ? 'http' : 'rest');\r\n        });\r\n\r\n        if (this.isPortReserved(port))\r\n        {\r\n            setListener = false;\r\n            let pos = this.portReservations.indexOf(port);\r\n            let serviceNamespace = this.portReservationNamespace[pos];\r\n            if (serviceNamespace != namespace)\r\n            {\r\n                global.Logger.log('Network:_createHttpComponent', 400, 'Unable to create new http component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace,\r\n                    { type: isRest === false ? 'http' : 'rest' });\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (_.isFunction(middleware)) component.use(middleware);\r\n\r\n        if (setListener)\r\n        {\r\n            component.listen(port, function () {\r\n                global.Console.status('info', 'Http Bound Type: ' + (isRest === false ? 'http' : 'rest') + ' - Service Namespace: ' + namespace + ' - Port: ' + server.address().port);\r\n                global.Logger.log('Network:_createHttpComponent', 200, 'Created new http component - Mounted: ' + namespace + ' / ServiceId: ' + serviceId + ' - listening on port: ' + server.address().port,\r\n                    { type: isRest === false ? 'http' : 'rest' });\r\n            });\r\n        }\r\n\r\n        return component;\r\n    }\r\n\r\n    /**\r\n     * Creates a web socket network component\r\n     *\r\n     * @note Uses socket io/express for web socket server\r\n     *\r\n     * @param {number} serviceId The services id from the service stack\r\n     * @param {string} namespace The namespace for the service\r\n     * @param {number} port The port for the web socket component\r\n     * @param {function} middleware The middleware to call for this service\r\n     * @returns {*} Returns component if created or false on failure\r\n     * @private\r\n     */\r\n    _createWebSocketComponent(serviceId, namespace, port, middleware)\r\n    {\r\n        let setListener = true;\r\n        if (this.isPortReserved(port))\r\n        {\r\n            setListener = false;\r\n            let pos = this.portReservations.indexOf(port);\r\n            let serviceNamespace = this.portReservationNamespace[pos];\r\n            if (serviceNamespace != namespace)\r\n            {\r\n                global.Logger.log('Network:_createRestComponent', 400, 'Unable to create component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //create webSocket component\r\n        var server = express();\r\n        server.use(compression({}));\r\n\r\n        var httpServer = http.Server(server);\r\n        var webSocket = new SocketIO(httpServer);\r\n\r\n        let users = [];\r\n        let sockets = {};\r\n\r\n        webSocket.use(compression({}));\r\n        //app.use(express['static'](__dirname + '/../../client'));\r\n\r\n        webSocket.on('connection', (socket) => {\r\n            let userId = socket.handshake.query.userId;\r\n            let currentUser = {\r\n                id: socket.id,\r\n                userId: userId\r\n            };\r\n\r\n            if (findIndex(users, currentUser.id) > -1) {\r\n                console.log('[INFO] User ID is already connected, kicking.');\r\n                socket.disconnect();\r\n            }  /*else if (!validNick(currentUser.nick)) {\r\n                socket.disconnect();\r\n            }*/ else {\r\n                console.log('[INFO] User ID: ' + currentUser.userId + ' connected!');\r\n                sockets[currentUser.id] = socket;\r\n                users.push(currentUser);\r\n                webSocket.emit('User Join', { userId: currentUser.userId });\r\n                console.log('[INFO] Total users: ' + users.length);\r\n            }\r\n\r\n            socket.on('ding', () => {\r\n                socket.emit('dong');\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n                if (findIndex(users, currentUser.id) > -1) users.splice(findIndex(users, currentUser.id), 1);\r\n                console.log('[INFO] User ' + currentUser.userId + ' disconnected!');\r\n                socket.broadcast.emit('userDisconnect', { userId: currentUser.userId });\r\n            });\r\n\r\n            //Bind the events contained within the service to this socket\r\n            this.services[serviceId].setWebSocketEvents(socket);\r\n\r\n            /*\r\n            socket.on('action', (data) => {\r\n                let _nick = sanitizeString(data.nick);\r\n                let _message = sanitizeString(data.message);\r\n                let date = new Date();\r\n                let time = (\"0\" + date.getHours()).slice(-2) + (\"0\" + date.getMinutes()).slice(-2);\r\n\r\n                console.log('[CHAT] [' + time + '] ' + _nick + ': ' + _message);\r\n                socket.broadcast.emit('serverSendUserChat', {nick: _nick, message: _message});\r\n            });*/\r\n        });\r\n\r\n        httpServer.listen(port, () => {\r\n            global.Console.status('info', 'Web Socket Bound - Service Namespace: ' + namespace + ' - Port: ' + webSocket.address().port);\r\n        });\r\n\r\n        return webSocket;\r\n    }\r\n\r\n    /**\r\n     * Creates a TCP/IP socket network component\r\n     *\r\n     * @param {number} serviceId The services id from the service stack\r\n     * @param {string} namespace The namespace for the service\r\n     * @param port The port for the TCP/IP socket component\r\n     * @returns {boolean} Returns true on completion and false on error\r\n     * @private\r\n     */\r\n    _createSocketComponent(serviceId, namespace, port)\r\n    {\r\n        let setListener = true;\r\n        if (this.isPortReserved(port))\r\n        {\r\n            setListener = false;\r\n            let pos = this.portReservations.indexOf(port);\r\n            let serviceNamespace = this.portReservationNamespace[pos];\r\n            if (serviceNamespace != namespace)\r\n            {\r\n                global.Logger.log('Network:_createSocketComponent', 400, 'Unable to create new socket component - Port Reserved by another service. Attempted to mount: ' + namespace + ' / ServiceId: ' + serviceId + ' - Existing service assigned to port: ' + serviceNamespace,\r\n                    { type: isRest === false ? 'http' : 'rest' });\r\n                return false;\r\n            }\r\n        }\r\n\r\n        var server = net.createServer((socket) => {\r\n            // 'connection' listener\r\n            console.log('client connected');\r\n            socket.on('end', () => {\r\n                console.log('client disconnected');\r\n            });\r\n            socket.write('hello\\r\\n');\r\n            socket.pipe(socket);\r\n        });\r\n\r\n        server.on('error', (err) => {\r\n            //throw err;\r\n            console.log('A socket error has occurred');\r\n            global.Logger.log('Network:_createSocketComponent', 400, 'A socket error has occurred in Service Namespace: ' + namepsace + ' - Service Id: ' + serviceId);\r\n        });\r\n\r\n        if (setListener)\r\n        {\r\n            server.listen(port, () => {\r\n                global.Console.status('info', 'TCP/IP Socket Bound - Service Namespace: ' + namespace + ' - Port: ' + server.address().port);\r\n            });\r\n        }\r\n        return server;\r\n    }\r\n\r\n    /**\r\n     * Create an API extension component\r\n     *\r\n     * @param {number} serviceId The services id from the service stack\r\n     * @param {string} namespace The namespace for the service\r\n     * @returns {boolean} Returns true on completion and false on error\r\n     * @private\r\n     */\r\n    _createApiComponent(serviceId, namespace)\r\n    {\r\n        return this.api.addApiNode(serviceId, namespace, this.services[serviceId].apiRequest);\r\n    }\r\n\r\n    /**\r\n     * Removes a service network component\r\n     *\r\n     * @param {string} serviceNamespace The service namespace for the component\r\n     * @param {string} type The network component type\r\n     * @param {string} label The label for the component\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     * @todo Need to complete this\r\n     */\r\n    remove(serviceNamespace, type, label)\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Checks if the port is reserved\r\n     *\r\n     * @param {number} port The port number\r\n     * @returns {boolean} Returns true if the port is reserved false if it is not\r\n     */\r\n    isPortReserved(port)\r\n    {\r\n        return this.portReservations.indexOf(port) > -1;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * Exports\r\n */\r\nvar NetworkStack = new Network();\r\nexport default NetworkStack;\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/network.js\n **/","module.exports = require(\"lodash\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"lodash\"\n ** module id = 7\n ** module chunks = 0\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nimport _ from 'lodash';\r\n\r\n/**\r\n * The middleware class\r\n *\r\n * Manages middleware for the system for specific system interactions\r\n *\r\n * @note Middleware are limited to 1 middleware assigned to a channel->service namespace->middleware\r\n * @note This means that you have 1 method assignable to a channel per service per middleware\r\n */\r\nexport class Middleware {\r\n    constructor()\r\n    {\r\n        this.data = [];\r\n        this.serviceRegister = [];\r\n        this.dataMap = [];\r\n        this.channels = ['PRE_REQUEST', 'PRE_RESPONSE', 'PRE_API_CALL', 'POST_API_CALL'];\r\n        this.channels.forEach(function(value){\r\n            this.data.push([]);\r\n            this.dataMap.push(value);\r\n        }, this);\r\n    }\r\n\r\n    /**\r\n     * Adds a middleware to the server based on a middleware channel\r\n     *\r\n     * @param {string} channel The label for the channel\r\n     * @param {string} serviceNamespace The service namespace for the middleware\r\n     * @param {string} middleware The class name of the middleware to be used\r\n     * @param {function} method The method to be called with the object when a channel call is made\r\n     * @returns {boolean}\r\n     */\r\n    addMiddleware(channel, serviceNamespace, middleware, method)\r\n    {\r\n        let pos = this._getChannelId(channel);\r\n        if (pos > -1)\r\n        {\r\n            let middleware = this._getExistingMiddleware(channel[pos], serviceNamespace, middleware, method);\r\n            if (middleware === false)\r\n            {\r\n                this.channels[pos].push({ service: serviceNamespace, middleware: middleware, method: method });\r\n                global.Logger.log('Middleware:addMiddleware', 200, 'A new middleware was added for Service Namespace: ' + serviceNamespace + ' on Channel: ' + channel);\r\n                return true;\r\n            } else {\r\n                global.Logger.log('Middleware:addMiddleware', 300, 'Attempted to add duplicate middleware for Service Namespace: ' + serviceNamespace + ' on Channel: ' + channel + ' for middleware: ' + middleware + ' with method: ' + method);\r\n            }\r\n        }\r\n        global.Logger.log('Middleware:addMiddleware', 400, 'Attempted to add a middleware for non-existent channel: ' + channel + ' - for Service Namespace: ' + serviceNamespace);\r\n    }\r\n\r\n    /**\r\n     * Removes a registered middleware from the server\r\n     *\r\n     * @param {string} channel\r\n     * @param {string} serviceNamespace\r\n     * @param {string} middleware\r\n     */\r\n    removeMiddleware(channel, serviceNamespace, middleware)\r\n    {\r\n        let pos = this._getChannelId(channel);\r\n        if (pos > -1)\r\n        {\r\n            /**\r\n             * @todo Add Remove middleware code\r\n             */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls a channels assigned middleware with the data and returns the data\r\n     *\r\n     * @param {string} channel The name of the channel\r\n     * @param {*} data The object or data to be passed to the middleware\r\n     * @returns {*|boolean} Returns the data from the middleware call for the data sent\r\n     */\r\n    callChannel(channel, data)\r\n    {\r\n        let pos = this._getChannelId(channel);\r\n        if (pos > -1)\r\n        {\r\n            let middlewareList = this.channels[pos];\r\n            if (middlewareList instanceof Array)\r\n            {\r\n                middlewareList.foreach(function(value){\r\n                    data = value.method(data);\r\n                });\r\n            }\r\n        } else global.Logger.log('Middleware:callChannel', 400, 'Attempted to call a non-existent channel: ' + channel + ' - for Service Namespace: ' + serviceNamespace);\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Checks for an existing middleware for a given channelObject, serviceNamespace, and middleware\r\n     *\r\n     * @note This method ensures we lock the assigned middleware for a given channel/service namespace/middleware\r\n     * @param {object} channelObject The channel object from the middleware data stack\r\n     * @param {string} serviceNamespace The service namespace for the middleware\r\n     * @param {string} middleware The class name of the middleware to be used\r\n     * @returns {boolean|array} Returns false if channel doesn't exist or the channel datas array if it does\r\n     * @private\r\n     */\r\n    _getExistingMiddleware(channelObject, serviceNamespace, middleware)\r\n    {\r\n        let existing = _.find(channelObject, { 'serviceNamespace': serviceNamespace, 'middleware': middleware });\r\n        if (existing != undefined) return false;\r\n        return existing;\r\n    }\r\n\r\n    /**\r\n     * Locates a channel id from the channels name\r\n     *\r\n     * @param {string} name The name of the channel\r\n     * @returns {number} Returns the index of the channel (-1 if channel does not exist)\r\n     * @private\r\n     */\r\n    _getChannelId(name)\r\n    {\r\n        return this.channels.indexOf(name.toUpper);\r\n    }\r\n}\r\n\r\n/**\r\n * Export the middleware class as default\r\n */\r\nexport default Middleware;\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/middleware.js\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\nlet instance = null;\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport Middleware from './middleware';\r\n\r\n/**\r\n * The api class\r\n *\r\n * @note This powers the extensible internal API\r\n */\r\nexport class Api\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        if(!instance)\r\n        {\r\n            /**\r\n             * The middleware for the class\r\n             * @type {Middleware}\r\n             */\r\n            this.middleware = new Middleware();\r\n\r\n            /**\r\n             * Contains the api node references\r\n             * @type {Array}\r\n             */\r\n            this.api = [];\r\n\r\n            /**\r\n             * Contains the api node map\r\n             * @note The api map is also used for reserving api endpoints\r\n             * @type {Array}\r\n             */\r\n            this.apiMap = [];\r\n\r\n            /**\r\n             * Maps the service id's to the api\r\n             * @type {Array}\r\n             */\r\n            this.serviceIdMap = [];\r\n\r\n            /**\r\n             * Reserved words that can not be registered as api endpoints\r\n             * @type {string[]}\r\n             */\r\n            this.reserved = [\r\n                'instance', 'middleware', 'api', 'apiMap', 'serviceIdMap', 'reserved',\r\n                'addApiNode', 'getApiNode', '_getNodePos', 'callApiNode', 'ApiCall'\r\n            ];\r\n\r\n            instance = this;\r\n        } else return instance;\r\n    }\r\n\r\n    /**\r\n     * Adds an API node to the api stack and binds it to the api\r\n     *\r\n     * @param {number} serviceId The service id\r\n     * @param {namespace} namespace The service namespace mounted to the api\r\n     * @param {function} node The function reference for the node\r\n     * @returns {boolean} Returns true on completion and false on failure\r\n     */\r\n    addApiNode(serviceId, namespace, node)\r\n    {\r\n        if (this._getNodePos(namespace) === false && this._isReservedNamespace(namespace) === false)\r\n        {\r\n            this.api.push(node);\r\n            this.apiMap.push(namespace);\r\n            this.serviceIdMap.push(serviceId);\r\n            let pos = this.api.length - 1;\r\n            this[namespace] = this.api[pos];\r\n            global.Logger.log('Api:addApiNode', 200, 'Added a new API node for Service Namespace: ' + namespace);\r\n            return true;\r\n        }\r\n\r\n        if (this._getNodePos(namespace) !== false) global.Logger.log('Api:addApiNode', 400, 'Unable to create new api node. A node by for this service namespace already exists - Service Namespace: ' + namespace);\r\n        else global.Logger.log('Api:addApiNode', 400, 'Unable to create new api node. This namespace is reserved - Service Namespace: ' + namespace);\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns an api node from the stack\r\n     *\r\n     * @param {string} namespace The service namespace to locate\r\n     * @returns {*} Returns the api node when found or false when no node was found\r\n     */\r\n    getApiNode(namespace)\r\n    {\r\n        let pos = this._getNodePos(namespace);\r\n        if (pos > -1) return this.api[pos];\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Creates an ApiCall instance and executes it - then returns the ApiCall instance if the call completed\r\n     *\r\n     * @param {string} namespace The service namespace to be called\r\n     * @param {string} method The method to be called\r\n     * @param {*} data The data to be sent to the call\r\n     * @returns {*} Returns the result of the call or false if the node did not exist\r\n     */\r\n    callApiNode(namespace, method, data)\r\n    {\r\n        node = this.getApiNode(namespace);\r\n        if (node !== false)\r\n        {\r\n            let apiCall = new ApiCall(method, data);\r\n            this.middleware.callChannel('PRE_API_CALL', apiCall);\r\n            data = apiCall.callApi(node, mehod);\r\n            this.middleware.callChannel('POST_API_CALL', data);\r\n            data.returned = moment();\r\n            return data;\r\n        }\r\n        this.Logger.log('Api:callApiNode', 400, 'Failed to call node service with namespace: ' + namespace + ' - no api node exists for this namespace.');\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the position of the node by its namespace\r\n     *\r\n     * @param {string} namespace The service namespace to be retrieved\r\n     * @returns {boolean|number} Returns false if not found or the position of the service namespace in the stack\r\n     * @private\r\n     */\r\n    _getNodePos(namespace)\r\n    {\r\n        let pos = this.apiMap.indexOf(namespace);\r\n        if (pos == -1) return false;\r\n        return this.apiMap[pos];\r\n    }\r\n\r\n    /**\r\n     * Check if the namespace is reserved by the object\r\n     *\r\n     * @param {string} namespace The service namespace to be checked\r\n     * @returns {boolean} Returns true if the namespace exists false if it doesn't\r\n     * @private\r\n     */\r\n    _isReservedNamespace(namespace)\r\n    {\r\n        return this.reserved.indexOf(namespace) > -1;\r\n    }\r\n}\r\n\r\n/**\r\n * This API call class\r\n *\r\n * @note This is the packaged call and its related data\r\n */\r\nclass ApiCall\r\n{\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor(method, data)\r\n    {\r\n        /**\r\n         * The method to be called\r\n         * @var {function}\r\n         */\r\n        this.method = method;\r\n\r\n        /**\r\n         * A flag that controls if the call resulted in an error\r\n         * @type {boolean}\r\n         */\r\n        this.error = false;\r\n\r\n        /**\r\n         * The errors that occurred during the call\r\n         * @type {Array}\r\n         */\r\n        this.errors = [];\r\n\r\n        /**\r\n         * The data for the call\r\n         * @type {*}\r\n         */\r\n        this.data = data;\r\n\r\n        /**\r\n         * The time the API call was created\r\n         * @type {moment}\r\n         */\r\n        this.created = moment();\r\n\r\n        /**\r\n         * The time the API call was updated\r\n         * @type {moment}\r\n         */\r\n        this.updated = null;\r\n\r\n        /**\r\n         * The time the API call was returned\r\n         * @type {moment}\r\n         */\r\n        this.returned = null;\r\n    }\r\n\r\n    /**\r\n     * Calls the api for the call\r\n     *\r\n     * @param {function} node The node to tbe called\r\n     * @returns {*} Returns the ApiCall object\r\n     */\r\n    callApi(node)\r\n    {\r\n        node(this);\r\n        this.updated = moment();\r\n        return this;\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/api.js\n **/","module.exports = require(\"moment\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"moment\"\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = require(\"net\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"net\"\n ** module id = 11\n ** module chunks = 0\n **/","module.exports = require(\"http\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"http\"\n ** module id = 12\n ** module chunks = 0\n **/","module.exports = require(\"socket.io\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"socket.io\"\n ** module id = 13\n ** module chunks = 0\n **/","module.exports = require(\"compression\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"compression\"\n ** module id = 14\n ** module chunks = 0\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 15\n ** module chunks = 0\n **/","/**\r\n * Gorgon the scripting capable network server for Node JS\r\n *\r\n * @package Gorgon\r\n * @author Ryan Rentfro\r\n * @license MIT\r\n * @url https://github.com/manufacturing-industry\r\n */\r\n\r\n/*\r\n * Imports\r\n */\r\nimport * as fs from 'fs';\r\nimport moment from 'moment';\r\nimport * as os from 'os';\r\nimport {GorgonConfig} from '../config/config'\r\nimport sanitize from 'sanitize-filename';\r\n\r\n/**\r\n * The server logging class\r\n */\r\nexport class Logger {\r\n    /**\r\n     * Constructs the class\r\n     */\r\n    constructor()\r\n    {\r\n        this.fs = fs;\r\n        this.GorgonConfig = new GorgonConfig();\r\n        this.sanitize = sanitize;\r\n        this.topicMap = [];\r\n        this.subscribers = [];\r\n        this.subscriberMap = [];\r\n        this.level = ['Debug', 'Info', 'Warn', 'Error', 'Critical', 'Fatal'];\r\n        this.levelKey = [100, 200, 300, 400, 500, 600];\r\n    }\r\n\r\n    /**\r\n     * Creates a new log and writes it to the corresponding file\r\n     *\r\n     * @param {string} location The location the log originated from\r\n     * @param {number} level The level of the log (from levelKey)\r\n     * @param {string} message The message for the log\r\n     * @param {*} values The values to include with the log\r\n     * @param {string} type The type for the log\r\n     * @return {boolean} Returns true on completion and false on failure\r\n     */\r\n    log(location, level, message, values, type)\r\n    {\r\n        var logItem = new Log(location, level, message, values, type);\r\n        var logValues = logItem.values == null || logItem.values == undefined ? null : JSON.stringify(logItem.values);\r\n        var filename = logItem.created.format('YYYYMMDD') + '.log';\r\n\r\n        switch(logItem.type)\r\n        {\r\n            default:\r\n                filename = this.sanitize(logItem.type) + '-' + filename;\r\n                break;\r\n            case undefined:\r\n            case true:\r\n            case 'sys':\r\n                filename = 'sys-' + filename;\r\n                break;\r\n            case 'error':\r\n                filename = 'error-' + filename;\r\n                break;\r\n        }\r\n\r\n        var logEntry = logItem.created.format() + ' ' + logItem.level + ' ' + logItem.location + ' [message=' + logItem.message + ']' + ' [values=' + logValues + ']' + os.EOL;\r\n\r\n        if (!this.fs.existsSync(this.GorgonConfig.storage.logs)){\r\n            fs.mkdirSync(this.GorgonConfig.storage.logs);\r\n        }\r\n\r\n        this.fs.appendFile(this.GorgonConfig.storage.logs + filename, logEntry, 'utf8',  function (err)\r\n        {\r\n            if (err) {\r\n                console.error(err);\r\n                return false;\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * The server log class\r\n */\r\nclass Log {\r\n    /**\r\n     * Constructs the class\r\n     *\r\n     * @param {string} location The location the log originated from\r\n     * @param {number} level The level of the log (from levelKey)\r\n     * @param {string} message The message for the log\r\n     * @param {*} values The values to include with the log\r\n     * @param {string} type The type for the log\r\n     */\r\n    constructor(location, level, message, values, type)\r\n    {\r\n        this.location = location;\r\n        this.level = level == null || level == undefined ? 100 : level;\r\n        this.message = message;\r\n        this.type = type == null || type == undefined ? 'sys' : type;\r\n        this.values = values == null || values == undefined ? null : values;\r\n        this.created = moment();\r\n    }\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/component/log.js\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = require(\"os\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"os\"\n ** module id = 18\n ** module chunks = 0\n **/","module.exports = require(\"sanitize-filename\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"sanitize-filename\"\n ** module id = 19\n ** module chunks = 0\n **/","module.exports = require(\"colog\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"colog\"\n ** module id = 20\n ** module chunks = 0\n **/"],"sourceRoot":""}
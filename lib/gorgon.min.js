require("source-map-support").install(),function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("moment"),require("lodash"),require("net"),require("http"),require("socket.io"),require("compression"),require("express"),require("fs"),require("os"),require("sanitize-filename"),require("colog")):"function"==typeof define&&define.amd?define("gorgon",["moment","lodash","net","http","socket.io","compression","express","fs","os","sanitize-filename","colog"],t):"object"==typeof exports?exports.gorgon=t(require("moment"),require("lodash"),require("net"),require("http"),require("socket.io"),require("compression"),require("express"),require("fs"),require("os"),require("sanitize-filename"),require("colog")):e.gorgon=t(e.moment,e.lodash,e.net,e.http,e["socket.io"],e.compression,e.express,e.fs,e.os,e["sanitize-filename"],e.colog)}(this,function(e,t,n,o,r,i,s,a,l,c,u){return function(e){function t(o){if(n[o])return n[o].exports;var r=n[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(1),a=n(2),l=n(5),c=n(16),u=n(8),d=o(u),p=n(20),f=o(p);global.Logger=new c.Logger,global.Console=f["default"],global.Console.status=function(e,t){switch(e){default:case"info":global.Console.log("["+global.Console.color("I","yellow")+"] "+t);break;case"notice":global.Console.log("["+global.Console.color("N","cyan")+"] "+t);break;case"error":global.Console.log("["+global.Console.color("E","red")+"] "+t)}};var h=function(){function e(){r(this,e),this.GorgonConfig=new s.GorgonConfig,this.Logger=global.Logger,this.Logger.log("Gorgon:initServer",200,"The Gorgon has been summoned - GORGON SERVER STARTING..."),this.GorgonEnv=new a.GorgonEnv,this.GorgonContainerService=new l.GorgonContainerService,this.separator1="================================================",this.separator2="------------------------------------------------"}return i(e,[{key:"initServer",value:function(){this._bootstrap(),global.Console.log(this.separator2),global.Console.question("Loading Services"),global.Console.log(this.separator2),this.Logger.log("Gorgon:initServer",200,"The server was started successfully"),this.GorgonEnv.service.forEach(function(e){var t=48,n=this.GorgonContainerService.add(e.service);if(n){var o=6,r=t-o-e.namespace.length-2,i=d["default"].repeat(".",r);this.Logger.log("Gorgon:initServer",200,"Loaded service namespace: "+e.namespace),global.Console.log(e.namespace+" "+i+" [ "+global.Console.color("OK","green")+" ]")}else{var s=10,a=t-s-e.namespace.length-2,l=d["default"].repeat(".",a);this.Logger.log("Gorgon:initServer",400,"Failed to load service with namespace: "+e.namespace),global.Console.log(e.namespace+" "+l+" [ "+global.Console.color("FAILED","red")+" ]")}},this),this.Logger.log("Gorgon:initServer",200,"Service Loading Completed"),global.Console.log(this.separator2),global.Console.question("Loading Complete - Server Online"),global.Console.log(this.separator1)}},{key:"_bootstrap",value:function(){global.Console.log(global.Console.color("Gorgon Server - v"+this.GorgonConfig.data.version,"green")),global.Console.log("Author: Ryan Rentfro <rrentfro at gmail dot com>"),global.Console.log("Project: https://github.com/manufacturing-industry/gorgon"),this._motd(),global.Console.log("Press "+global.Console.color("cntrl+c","yellow")+" to exit the server")}},{key:"_motd",value:function(){global.Console.log(this.separator1),global.Console.log(global.Console.color(this.GorgonConfig.data.motd,"yellow")),global.Console.log(this.separator1)}}]),e}(),v=new h;v.initServer()},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});/**
	 * Gorgon the scripting capable network server for Node JS
	 *
	 * @package Gorgon
	 * @author Ryan Rentfro
	 * @license MIT
	 * @url https://github.com/manufacturing-industry
	 */
t.GorgonConfig=function r(){o(this,r),this.data={name:"gorgon",version:"0.0.2 Build: 55 - Pre-Alpha",motd:"This is the message of the day."},this.storage={logs:"logs/"},this.load={server:!0,cli:!0,services:!0},this.debug={enable:!0}}},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.GorgonEnv=void 0;var i=n(3),s=o(i);t.GorgonEnv=function a(){r(this,a),this.service=new s["default"],this.service=[{sid:0,name:"Status",namespace:"StatusService",enable:!0,service:this.service}]}},function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(4),l=n(5),c=n(1),u=n(7),d=new u.Network,p=function(e){function t(){o(this,t);var e=r(this,Object.getPrototypeOf(t).call(this));return e.config=c.StatusServiceConfig,e.name="Status Service",e.namespace="StatusService",e.description="Provides service status",e.type="Service",e.https=!0,e.inboundTypes=["rest","socket","http","webSocket","api"],e.ports=[2600,null,2680,2688,null],e.router=new a.Routes(e.namepsace),e.permissions=["internal"],e.serviceBind(),e}return i(t,e),s(t,[{key:"routes",value:function(){return{ServiceRequest:{inboundTypes:this.inboundTypes,method:"/StatusServiceRequest",callback:this.serviceRequest()}}}},{key:"serviceRequest",value:function(e,t,n){}},{key:"apiRequest",value:function(e){}},{key:"setWebSocketEvents",value:function(e){}},{key:"serviceBind",value:function(){return this.router.importRoutes(this.routes()),this._setNetworking(),d.addService(this),!0}},{key:"serviceUnbind",value:function(){d.removeService(this.namespace)}}]),t}(l.GorgonService);t["default"]=p,e.exports=t["default"]},function(e,t){"use strict";function n(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();t.Routes=function(){function e(t){o(this,e),this.service=t,this.inboundTypes=["rest","socket","http","https","webSocket","api"],this.routes=[],this.routeCallbacks=[],this.permissionMap=[]}return r(e,[{key:"add",value:function(e,t,n){this.routes.push(t),this.routeCallbacks(n);var o=this.routeCallbacks.length-1;e.forEach(function(e){this.inboundTypes.indexOf(e)>-1?this.permissionMap[e].push(o):console.log("ERROR - Invalid Permission Encountered in Service: ["+this.service+"] Method: ["+t+"]")})}},{key:"remove",value:function(e){var t=this.routes.indexOf(e);return t>-1&&(this.routeCallbacks[t]=null,this.routes[t]=null,this.inboundTypes.forEach(function(e){if(void 0!=this.permissionMap[e]&&this.permissionMap[e]instanceof Array){var n=this.permissionMap[e].indexOf(t);n>-1&&this.permissionMap[e].splice(n,1)}}),!0)}},{key:"importRoutes",value:function(e){if(e instanceof Array)for(var t in e)e.hasOwnProperty(t)&&this.add(e[t].inboundTypes,e[t].method,e[t].callback);return!1}},{key:"route",value:function(e,t,o){var r=this.routes.indexOf(t);if(r>-1&&void 0!=this.permissionMap[e]&&this.permissionMap[e].length>0&&this.permissionMap[e].indexOf(r)>-1){var i;return(i=this.routeCallbacks)[r].apply(i,[t,e].concat(n(o)))}return!1}}]),e}()},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.GorgonService=t.GorgonContainerService=void 0;var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(6),a=o(s);t.GorgonContainerService=function(){function e(){r(this,e),this.containers=[],this.containerMap=[],this.name="Gorgon Container Service",this.type="Service"}return i(e,[{key:"add",value:function(e){return null!=e.namespace&&""!=e.namespace&&this.containerMap.indexOf(e.namespace)==-1&&(this.containers.push(e),this.containerMap.push(e.namespace),!0)}},{key:"remove",value:function(e){if(this.containerMap.indexOf(e)>-1){var t=this.containerMap.indexOf(e);return this.containers.splice(t,1),this.containerMap.splice(t,1),!0}return!1}},{key:"get",value:function(e){return this.containerMap.indexOf(e)>-1&&this.containers[this.containerMap.indexOf(e)]}}]),e}(),t.GorgonService=function(){function e(){r(this,e),this.serviceId=null,this.name=null,this.description=null,this.type="Service",this.router=null,this.inboundTypes=[],this.ports=[],this.permissions=[],this.networking=[]}return i(e,[{key:"_setNetworking",value:function(){if(this.inboundTypes instanceof Array&&this.ports instanceof Array&&this.inboundTypes.length==this.ports.length)for(var e=0;e<this.inboundTypes.length;e++)this.networking.push({name:this.inboundTypes[e],port:this.ports[e]});else console.warn("GorgonService:_setNetworking - Missing or invalid networking for service "+this.name)}},{key:"setServiceId",value:function(e){return this.serviceId=e,!0}},{key:"serviceRequest",value:function(e,t,n){return null}},{key:"apiRequest",value:function(e){return e.error=!0,e.errors,push("API call handler not defined"),e.returned=(0,a["default"])(),e}},{key:"setWebSocketEvents",value:function(e){return null}}]),e}()},function(e,t){e.exports=require("moment")},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.Network=void 0;var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(8),a=o(s),l=n(9),c=o(l),u=n(10),d=n(11),p=o(d),f=n(12),h=o(f),v=n(13),g=o(v),m=n(14),b=o(m),y=n(15),w=o(y),k=null,C=t.Network=function(){function e(){return r(this,e),k?k:(this.middleware=new c["default"],this.services=[],this.serviceMap=[],this.components=[],this.componentMap=[],this.componentTypeMap={rest:[],socket:[],webSocket:[],http:[],api:[]},this.api=new u.Api,this.portReservations=[],this.portReservationNamespace=[],this.activeServices=[],k=this,void 0)}return i(e,[{key:"addService",value:function(e){if(this.activeServices.indexOf(e.namespace)==-1){this.services.push(e),this.serviceMap.push(e.namespace);var t=this.serviceMap.length-1;if(e.setServiceId(e),e.networking instanceof Array){for(var n=0;n<e.networking.length;n++)this.add(t,e.namespace,e.networking[n].name,"label",e.networking[n].port);return global.Logger.log("Network:addService",200,"Added services components: "+e.name+" for Service: "+e.namespace+" - ServiceId: "+t),!0}}return!1}},{key:"removeService",value:function(e){}},{key:"add",value:function(e,t,n,o,r,i){var s=!1;if(this.portReservations.indexOf(r)==-1||null==r||void 0==r){switch(void 0!=r&&null!=r||(r=0),n){default:return global.Logger.log("Network:add",400,"Unable to load component type of: "+n+" for Service: "+t+" - ServiceId: "+e),!1;case"rest":s=this._createRestComponent(e,t,r,i);break;case"http":s=this._createHttpComponent(e,t,r,i);break;case"socket":s=this._createSocketComponent(e,t,r);break;case"webSocket":s=this._createWebSocketComponent(e,t,r,i);break;case"api":s=this._createApiComponent(e,t)}return s!==!1&&(this.components.push(s),this.componentMap.push(t+"-"+n+"-"+o+"-"+r),this.componentTypeMap[n].push(t+"-"+n+"-"+r),global.Logger.log("Network:add",200,"Added network component: "+n+" for Service: "+t+" - ServiceId: "+e),!0)}return!1}},{key:"_createRestComponent",value:function(e,t,n,o){return this._createHttpComponent(e,t,n,o,!0)}},{key:"_createHttpComponent",value:function(e,t,n,o,r){var i=!0;void 0==r&&(r=!1);var s=(0,w["default"])();s.use((0,b["default"])({}));var l=s.all("/",function(t,n){this.middleware.callChannel("PRE_REQUEST",t),this.middleware.callChannel("PRE_RESPONSE",n),this.services[e].serviceRequest(t,n,r===!1?"http":"rest")});if(this.isPortReserved(n)){i=!1;var c=this.portReservations.indexOf(n),u=this.portReservationNamespace[c];if(u!=t)return global.Logger.log("Network:_createHttpComponent",400,"Unable to create new http component - Port Reserved by another service. Attempted to mount: "+t+" / ServiceId: "+e+" - Existing service assigned to port: "+u,{type:r===!1?"http":"rest"}),!1}if(a["default"].isFunction(o)&&l.use(o),i)var d=l.listen(n,function(){S.addPortReservation(t,d.address().port),global.Console.status("info","Http Bound Type: "+(r===!1?"http":"rest")+" - Service: "+t+" - "+(0==n?"Random ":"")+"Port: "+d.address().port),global.Logger.log("Network:_createHttpComponent",200,"Created new http component - Mounted: "+t+" / ServiceId: "+e+" - listening on "+(0==n?"Random ":"")+"Port: "+d.address().port,{type:r===!1?"http":"rest"})});return l}},{key:"_createWebSocketComponent",value:function(e,t,n,o){var r=this,i=!0;if(this.isPortReserved(n)){i=!1;var s=this.portReservations.indexOf(n),a=this.portReservationNamespace[s];if(a!=t)return global.Logger.log("Network:_createRestComponent",400,"Unable to create component - Port Reserved by another service. Attempted to mount: "+t+" / ServiceId: "+e+" - Existing service assigned to port: "+a),!1}var l=(0,w["default"])();l.use((0,b["default"])({}));var c=h["default"].Server(l),u=new g["default"](c),d=[],p={};u.use((0,b["default"])({})),u.on("connection",function(t){var n=t.handshake.query.userId,o={id:t.id,userId:n};findIndex(d,o.id)>-1?(console.log("[INFO] User ID is already connected, kicking."),t.disconnect()):(console.log("[INFO] User ID: "+o.userId+" connected!"),p[o.id]=t,d.push(o),u.emit("User Join",{userId:o.userId}),console.log("[INFO] Total users: "+d.length)),t.on("ding",function(){t.emit("dong")}),t.on("disconnect",function(){findIndex(d,o.id)>-1&&d.splice(findIndex(d,o.id),1),console.log("[INFO] User "+o.userId+" disconnected!"),t.broadcast.emit("userDisconnect",{userId:o.userId})}),r.services[e].setWebSocketEvents(t)});var f=c.listen(n,function(){S.addPortReservation(t,f.address().port),global.Console.status("info","Web Socket Bound - Service: "+t+" - "+(0==n?"Random ":"")+"Port: "+f.address().port),global.Logger.log("Network:_createWebSocketComponent",200,"Created new web socket component - Mounted: "+t+" / ServiceId: "+e+" - listening on "+(0==n?"Random ":"")+"Port: "+f.address().port)});return u}},{key:"_createSocketComponent",value:function(e,t,n){var o=!0;if(this.isPortReserved(n)){o=!1;var r=this.portReservations.indexOf(n),i=this.portReservationNamespace[r];if(i!=t)return global.Logger.log("Network:_createSocketComponent",400,"Unable to create new socket component - Port Reserved by another service. Attempted to mount: "+t+" / ServiceId: "+e+" - Existing service assigned to port: "+i,{type:isRest===!1?"http":"rest"}),!1}var s=p["default"].createServer(function(e){console.log("client connected"),e.on("end",function(){console.log("client disconnected")}),e.write("hello\r\n"),e.pipe(e)});if(s.on("error",function(t){console.log("A socket error has occurred"),global.Logger.log("Network:_createSocketComponent",400,"A socket error has occurred in Service: "+namepsace+" - Service Id: "+e)}),o)var a=s.listen(n,function(){S.addPortReservation(t,a.address().port),global.Console.status("info","TCP/IP Socket Bound - Service: "+t+" - "+(0==n?"Random ":"")+"Port: "+a.address().port),global.Logger.log("Network:_createSocketComponent",200,"Created new TCP/IP socket component - Mounted: "+t+" / ServiceId: "+e+" - listening on "+(0==n?"Random ":"")+"Port: "+a.address().port)});return s}},{key:"_createApiComponent",value:function(e,t){return this.api.addApiNode(e,t,this.services[e].apiRequest)}},{key:"remove",value:function(e,t,n){}},{key:"isPortReserved",value:function(e){return this.portReservations.indexOf(e)>-1}},{key:"addPortReservation",value:function(e,t){return this.portReservations.push(t),this.portReservationNamespace.push(e),!0}}]),e}(),S=new C;t["default"]=S},function(e,t){e.exports=require("lodash")},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.Middleware=void 0;var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(8),a=o(s),l=t.Middleware=function(){function e(){r(this,e),this.data=[],this.serviceRegister=[],this.dataMap=[],this.channels=["PRE_REQUEST","PRE_RESPONSE","PRE_API_CALL","POST_API_CALL"],this.channels.forEach(function(e){this.data.push([]),this.dataMap.push(e)},this)}return i(e,[{key:"addMiddleware",value:function(e,t,n,o){var r=this._getChannelId(e);if(r>-1){var i=this._getExistingMiddleware(e[r],t,i,o);if(i===!1)return this.channels[r].push({service:t,middleware:i,method:o}),global.Logger.log("Middleware:addMiddleware",200,"A new middleware was added for Service Namespace: "+t+" on Channel: "+e),!0;global.Logger.log("Middleware:addMiddleware",300,"Attempted to add duplicate middleware for Service Namespace: "+t+" on Channel: "+e+" for middleware: "+i+" with method: "+o)}global.Logger.log("Middleware:addMiddleware",400,"Attempted to add a middleware for non-existent channel: "+e+" - for Service Namespace: "+t)}},{key:"removeMiddleware",value:function(e,t,n){this._getChannelId(e)}},{key:"callChannel",value:function(e,t){var n=this._getChannelId(e);if(n>-1){var o=this.channels[n];o instanceof Array&&o.foreach(function(e){t=e.method(t)})}else global.Logger.log("Middleware:callChannel",400,"Attempted to call a non-existent channel: "+e+" - for Service Namespace: "+serviceNamespace);return t}},{key:"_getExistingMiddleware",value:function(e,t,n){var o=a["default"].find(e,{serviceNamespace:t,middleware:n});return void 0==o&&o}},{key:"_getChannelId",value:function(e){return this.channels.indexOf(e.toUpper)}}]),e}();t["default"]=l},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.Api=void 0;var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(8),a=(o(s),n(6)),l=o(a),c=n(9),u=o(c),d=null,p=(t.Api=function(){function e(){return r(this,e),d?d:(this.middleware=new u["default"],this.api=[],this.apiMap=[],this.serviceIdMap=[],this.reserved=["instance","middleware","api","apiMap","serviceIdMap","reserved","addApiNode","getApiNode","_getNodePos","callApiNode","ApiCall"],d=this,void 0)}return i(e,[{key:"addApiNode",value:function(e,t,n){if(this._getNodePos(t)===!1&&this._isReservedNamespace(t)===!1){this.api.push(n),this.apiMap.push(t),this.serviceIdMap.push(e);var o=this.api.length-1;return this[t]=this.api[o],global.Logger.log("Api:addApiNode",200,"Added a new API node for Service Namespace: "+t),!0}return this._getNodePos(t)!==!1?global.Logger.log("Api:addApiNode",400,"Unable to create new api node. A node by for this service namespace already exists - Service Namespace: "+t):global.Logger.log("Api:addApiNode",400,"Unable to create new api node. This namespace is reserved - Service Namespace: "+t),!1}},{key:"getApiNode",value:function(e){var t=this._getNodePos(e);return t>-1&&this.api[t]}},{key:"callApiNode",value:function(e,t,n){if(node=this.getApiNode(e),node!==!1){var o=new p(t,n);return this.middleware.callChannel("PRE_API_CALL",o),n=o.callApi(node,mehod),this.middleware.callChannel("POST_API_CALL",n),n.returned=(0,l["default"])(),n}return this.Logger.log("Api:callApiNode",400,"Failed to call node service with namespace: "+e+" - no api node exists for this namespace."),!1}},{key:"_getNodePos",value:function(e){var t=this.apiMap.indexOf(e);return t!=-1&&this.apiMap[t]}},{key:"_isReservedNamespace",value:function(e){return this.reserved.indexOf(e)>-1}}]),e}(),function(){function e(t,n){r(this,e),this.method=t,this.error=!1,this.errors=[],this.data=n,this.created=(0,l["default"])(),this.updated=null,this.returned=null}return i(e,[{key:"callApi",value:function(e){return e(this),this.updated=(0,l["default"])(),this}}]),e}())},function(e,t){e.exports=require("net")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("socket.io")},function(e,t){e.exports=require("compression")},function(e,t){e.exports=require("express")},function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0}),t.Logger=void 0;var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(17),l=r(a),c=n(6),u=o(c),d=n(18),p=r(d),f=n(1),h=n(19),v=o(h),g=(t.Logger=function(){function e(){i(this,e),this.fs=l,this.GorgonConfig=new f.GorgonConfig,this.sanitize=v["default"],this.topicMap=[],this.subscribers=[],this.subscriberMap=[],this.level=["Debug","Info","Warn","Error","Critical","Fatal"],this.levelKey=[100,200,300,400,500,600]}return s(e,[{key:"log",value:function(e,t,n,o,r){var i=new g(e,t,n,o,r),s=null==i.values||void 0==i.values?null:JSON.stringify(i.values),a=i.created.format("YYYYMMDD")+".log";switch(i.type){default:a=this.sanitize(i.type)+"-"+a;break;case void 0:case!0:case"sys":a="sys-"+a;break;case"error":a="error-"+a}var c=i.created.format()+" "+i.level+" "+i.location+" [message="+i.message+"] [values="+s+"]"+p.EOL;return this.fs.existsSync(this.GorgonConfig.storage.logs)||l.mkdirSync(this.GorgonConfig.storage.logs),this.fs.appendFile(this.GorgonConfig.storage.logs+a,c,"utf8",function(e){if(e)return console.error(e),!1}),!0}}]),e}(),function m(e,t,n,o,r){i(this,m),this.location=e,this.level=null==t||void 0==t?100:t,this.message=n,this.type=null==r||void 0==r?"sys":r,this.values=null==o||void 0==o?null:o,this.created=(0,u["default"])()})},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("os")},function(e,t){e.exports=require("sanitize-filename")},function(e,t){e.exports=require("colog")}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,